// Automatically generated by MockGen. DO NOT EDIT!
// Source: interfaces.go

package libkbfs

import (
	gomock "github.com/golang/mock/gomock"
	libkb "github.com/keybase/client/go/libkb"
	logger "github.com/keybase/client/go/logger"
	keybase1 "github.com/keybase/client/go/protocol/keybase1"
	kbfsblock "github.com/keybase/kbfs/kbfsblock"
	kbfscodec "github.com/keybase/kbfs/kbfscodec"
	kbfscrypto "github.com/keybase/kbfs/kbfscrypto"
	kbfsmd "github.com/keybase/kbfs/kbfsmd"
	tlf "github.com/keybase/kbfs/tlf"
	go_metrics "github.com/rcrowley/go-metrics"
	context "golang.org/x/net/context"
	time "time"
)

// Mock of dataVersioner interface
type MockdataVersioner struct {
	ctrl     *gomock.Controller
	recorder *_MockdataVersionerRecorder
}

// Recorder for MockdataVersioner (not exported)
type _MockdataVersionerRecorder struct {
	mock *MockdataVersioner
}

func NewMockdataVersioner(ctrl *gomock.Controller) *MockdataVersioner {
	mock := &MockdataVersioner{ctrl: ctrl}
	mock.recorder = &_MockdataVersionerRecorder{mock}
	return mock
}

func (_m *MockdataVersioner) EXPECT() *_MockdataVersionerRecorder {
	return _m.recorder
}

func (_m *MockdataVersioner) DataVersion() DataVer {
	ret := _m.ctrl.Call(_m, "DataVersion")
	ret0, _ := ret[0].(DataVer)
	return ret0
}

func (_mr *_MockdataVersionerRecorder) DataVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DataVersion")
}

// Mock of logMaker interface
type MocklogMaker struct {
	ctrl     *gomock.Controller
	recorder *_MocklogMakerRecorder
}

// Recorder for MocklogMaker (not exported)
type _MocklogMakerRecorder struct {
	mock *MocklogMaker
}

func NewMocklogMaker(ctrl *gomock.Controller) *MocklogMaker {
	mock := &MocklogMaker{ctrl: ctrl}
	mock.recorder = &_MocklogMakerRecorder{mock}
	return mock
}

func (_m *MocklogMaker) EXPECT() *_MocklogMakerRecorder {
	return _m.recorder
}

func (_m *MocklogMaker) MakeLogger(module string) logger.Logger {
	ret := _m.ctrl.Call(_m, "MakeLogger", module)
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

func (_mr *_MocklogMakerRecorder) MakeLogger(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeLogger", arg0)
}

// Mock of blockCacher interface
type MockblockCacher struct {
	ctrl     *gomock.Controller
	recorder *_MockblockCacherRecorder
}

// Recorder for MockblockCacher (not exported)
type _MockblockCacherRecorder struct {
	mock *MockblockCacher
}

func NewMockblockCacher(ctrl *gomock.Controller) *MockblockCacher {
	mock := &MockblockCacher{ctrl: ctrl}
	mock.recorder = &_MockblockCacherRecorder{mock}
	return mock
}

func (_m *MockblockCacher) EXPECT() *_MockblockCacherRecorder {
	return _m.recorder
}

func (_m *MockblockCacher) BlockCache() BlockCache {
	ret := _m.ctrl.Call(_m, "BlockCache")
	ret0, _ := ret[0].(BlockCache)
	return ret0
}

func (_mr *_MockblockCacherRecorder) BlockCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockCache")
}

// Mock of keyGetterGetter interface
type MockkeyGetterGetter struct {
	ctrl     *gomock.Controller
	recorder *_MockkeyGetterGetterRecorder
}

// Recorder for MockkeyGetterGetter (not exported)
type _MockkeyGetterGetterRecorder struct {
	mock *MockkeyGetterGetter
}

func NewMockkeyGetterGetter(ctrl *gomock.Controller) *MockkeyGetterGetter {
	mock := &MockkeyGetterGetter{ctrl: ctrl}
	mock.recorder = &_MockkeyGetterGetterRecorder{mock}
	return mock
}

func (_m *MockkeyGetterGetter) EXPECT() *_MockkeyGetterGetterRecorder {
	return _m.recorder
}

func (_m *MockkeyGetterGetter) keyGetter() blockKeyGetter {
	ret := _m.ctrl.Call(_m, "keyGetter")
	ret0, _ := ret[0].(blockKeyGetter)
	return ret0
}

func (_mr *_MockkeyGetterGetterRecorder) keyGetter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "keyGetter")
}

// Mock of codecGetter interface
type MockcodecGetter struct {
	ctrl     *gomock.Controller
	recorder *_MockcodecGetterRecorder
}

// Recorder for MockcodecGetter (not exported)
type _MockcodecGetterRecorder struct {
	mock *MockcodecGetter
}

func NewMockcodecGetter(ctrl *gomock.Controller) *MockcodecGetter {
	mock := &MockcodecGetter{ctrl: ctrl}
	mock.recorder = &_MockcodecGetterRecorder{mock}
	return mock
}

func (_m *MockcodecGetter) EXPECT() *_MockcodecGetterRecorder {
	return _m.recorder
}

func (_m *MockcodecGetter) Codec() kbfscodec.Codec {
	ret := _m.ctrl.Call(_m, "Codec")
	ret0, _ := ret[0].(kbfscodec.Codec)
	return ret0
}

func (_mr *_MockcodecGetterRecorder) Codec() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Codec")
}

// Mock of blockServerGetter interface
type MockblockServerGetter struct {
	ctrl     *gomock.Controller
	recorder *_MockblockServerGetterRecorder
}

// Recorder for MockblockServerGetter (not exported)
type _MockblockServerGetterRecorder struct {
	mock *MockblockServerGetter
}

func NewMockblockServerGetter(ctrl *gomock.Controller) *MockblockServerGetter {
	mock := &MockblockServerGetter{ctrl: ctrl}
	mock.recorder = &_MockblockServerGetterRecorder{mock}
	return mock
}

func (_m *MockblockServerGetter) EXPECT() *_MockblockServerGetterRecorder {
	return _m.recorder
}

func (_m *MockblockServerGetter) BlockServer() BlockServer {
	ret := _m.ctrl.Call(_m, "BlockServer")
	ret0, _ := ret[0].(BlockServer)
	return ret0
}

func (_mr *_MockblockServerGetterRecorder) BlockServer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockServer")
}

// Mock of cryptoPureGetter interface
type MockcryptoPureGetter struct {
	ctrl     *gomock.Controller
	recorder *_MockcryptoPureGetterRecorder
}

// Recorder for MockcryptoPureGetter (not exported)
type _MockcryptoPureGetterRecorder struct {
	mock *MockcryptoPureGetter
}

func NewMockcryptoPureGetter(ctrl *gomock.Controller) *MockcryptoPureGetter {
	mock := &MockcryptoPureGetter{ctrl: ctrl}
	mock.recorder = &_MockcryptoPureGetterRecorder{mock}
	return mock
}

func (_m *MockcryptoPureGetter) EXPECT() *_MockcryptoPureGetterRecorder {
	return _m.recorder
}

func (_m *MockcryptoPureGetter) cryptoPure() cryptoPure {
	ret := _m.ctrl.Call(_m, "cryptoPure")
	ret0, _ := ret[0].(cryptoPure)
	return ret0
}

func (_mr *_MockcryptoPureGetterRecorder) cryptoPure() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "cryptoPure")
}

// Mock of cryptoGetter interface
type MockcryptoGetter struct {
	ctrl     *gomock.Controller
	recorder *_MockcryptoGetterRecorder
}

// Recorder for MockcryptoGetter (not exported)
type _MockcryptoGetterRecorder struct {
	mock *MockcryptoGetter
}

func NewMockcryptoGetter(ctrl *gomock.Controller) *MockcryptoGetter {
	mock := &MockcryptoGetter{ctrl: ctrl}
	mock.recorder = &_MockcryptoGetterRecorder{mock}
	return mock
}

func (_m *MockcryptoGetter) EXPECT() *_MockcryptoGetterRecorder {
	return _m.recorder
}

func (_m *MockcryptoGetter) Crypto() Crypto {
	ret := _m.ctrl.Call(_m, "Crypto")
	ret0, _ := ret[0].(Crypto)
	return ret0
}

func (_mr *_MockcryptoGetterRecorder) Crypto() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Crypto")
}

// Mock of currentSessionGetterGetter interface
type MockcurrentSessionGetterGetter struct {
	ctrl     *gomock.Controller
	recorder *_MockcurrentSessionGetterGetterRecorder
}

// Recorder for MockcurrentSessionGetterGetter (not exported)
type _MockcurrentSessionGetterGetterRecorder struct {
	mock *MockcurrentSessionGetterGetter
}

func NewMockcurrentSessionGetterGetter(ctrl *gomock.Controller) *MockcurrentSessionGetterGetter {
	mock := &MockcurrentSessionGetterGetter{ctrl: ctrl}
	mock.recorder = &_MockcurrentSessionGetterGetterRecorder{mock}
	return mock
}

func (_m *MockcurrentSessionGetterGetter) EXPECT() *_MockcurrentSessionGetterGetterRecorder {
	return _m.recorder
}

func (_m *MockcurrentSessionGetterGetter) CurrentSessionGetter() CurrentSessionGetter {
	ret := _m.ctrl.Call(_m, "CurrentSessionGetter")
	ret0, _ := ret[0].(CurrentSessionGetter)
	return ret0
}

func (_mr *_MockcurrentSessionGetterGetterRecorder) CurrentSessionGetter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CurrentSessionGetter")
}

// Mock of signerGetter interface
type MocksignerGetter struct {
	ctrl     *gomock.Controller
	recorder *_MocksignerGetterRecorder
}

// Recorder for MocksignerGetter (not exported)
type _MocksignerGetterRecorder struct {
	mock *MocksignerGetter
}

func NewMocksignerGetter(ctrl *gomock.Controller) *MocksignerGetter {
	mock := &MocksignerGetter{ctrl: ctrl}
	mock.recorder = &_MocksignerGetterRecorder{mock}
	return mock
}

func (_m *MocksignerGetter) EXPECT() *_MocksignerGetterRecorder {
	return _m.recorder
}

func (_m *MocksignerGetter) Signer() kbfscrypto.Signer {
	ret := _m.ctrl.Call(_m, "Signer")
	ret0, _ := ret[0].(kbfscrypto.Signer)
	return ret0
}

func (_mr *_MocksignerGetterRecorder) Signer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Signer")
}

// Mock of diskBlockCacheGetter interface
type MockdiskBlockCacheGetter struct {
	ctrl     *gomock.Controller
	recorder *_MockdiskBlockCacheGetterRecorder
}

// Recorder for MockdiskBlockCacheGetter (not exported)
type _MockdiskBlockCacheGetterRecorder struct {
	mock *MockdiskBlockCacheGetter
}

func NewMockdiskBlockCacheGetter(ctrl *gomock.Controller) *MockdiskBlockCacheGetter {
	mock := &MockdiskBlockCacheGetter{ctrl: ctrl}
	mock.recorder = &_MockdiskBlockCacheGetterRecorder{mock}
	return mock
}

func (_m *MockdiskBlockCacheGetter) EXPECT() *_MockdiskBlockCacheGetterRecorder {
	return _m.recorder
}

func (_m *MockdiskBlockCacheGetter) DiskBlockCache() DiskBlockCache {
	ret := _m.ctrl.Call(_m, "DiskBlockCache")
	ret0, _ := ret[0].(DiskBlockCache)
	return ret0
}

func (_mr *_MockdiskBlockCacheGetterRecorder) DiskBlockCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DiskBlockCache")
}

// Mock of diskBlockCacheSetter interface
type MockdiskBlockCacheSetter struct {
	ctrl     *gomock.Controller
	recorder *_MockdiskBlockCacheSetterRecorder
}

// Recorder for MockdiskBlockCacheSetter (not exported)
type _MockdiskBlockCacheSetterRecorder struct {
	mock *MockdiskBlockCacheSetter
}

func NewMockdiskBlockCacheSetter(ctrl *gomock.Controller) *MockdiskBlockCacheSetter {
	mock := &MockdiskBlockCacheSetter{ctrl: ctrl}
	mock.recorder = &_MockdiskBlockCacheSetterRecorder{mock}
	return mock
}

func (_m *MockdiskBlockCacheSetter) EXPECT() *_MockdiskBlockCacheSetterRecorder {
	return _m.recorder
}

func (_m *MockdiskBlockCacheSetter) SetDiskBlockCache(_param0 DiskBlockCache) {
	_m.ctrl.Call(_m, "SetDiskBlockCache", _param0)
}

func (_mr *_MockdiskBlockCacheSetterRecorder) SetDiskBlockCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetDiskBlockCache", arg0)
}

// Mock of clockGetter interface
type MockclockGetter struct {
	ctrl     *gomock.Controller
	recorder *_MockclockGetterRecorder
}

// Recorder for MockclockGetter (not exported)
type _MockclockGetterRecorder struct {
	mock *MockclockGetter
}

func NewMockclockGetter(ctrl *gomock.Controller) *MockclockGetter {
	mock := &MockclockGetter{ctrl: ctrl}
	mock.recorder = &_MockclockGetterRecorder{mock}
	return mock
}

func (_m *MockclockGetter) EXPECT() *_MockclockGetterRecorder {
	return _m.recorder
}

func (_m *MockclockGetter) Clock() Clock {
	ret := _m.ctrl.Call(_m, "Clock")
	ret0, _ := ret[0].(Clock)
	return ret0
}

func (_mr *_MockclockGetterRecorder) Clock() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Clock")
}

// Mock of diskLimiterGetter interface
type MockdiskLimiterGetter struct {
	ctrl     *gomock.Controller
	recorder *_MockdiskLimiterGetterRecorder
}

// Recorder for MockdiskLimiterGetter (not exported)
type _MockdiskLimiterGetterRecorder struct {
	mock *MockdiskLimiterGetter
}

func NewMockdiskLimiterGetter(ctrl *gomock.Controller) *MockdiskLimiterGetter {
	mock := &MockdiskLimiterGetter{ctrl: ctrl}
	mock.recorder = &_MockdiskLimiterGetterRecorder{mock}
	return mock
}

func (_m *MockdiskLimiterGetter) EXPECT() *_MockdiskLimiterGetterRecorder {
	return _m.recorder
}

func (_m *MockdiskLimiterGetter) DiskLimiter() DiskLimiter {
	ret := _m.ctrl.Call(_m, "DiskLimiter")
	ret0, _ := ret[0].(DiskLimiter)
	return ret0
}

func (_mr *_MockdiskLimiterGetterRecorder) DiskLimiter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DiskLimiter")
}

// Mock of Block interface
type MockBlock struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockRecorder
}

// Recorder for MockBlock (not exported)
type _MockBlockRecorder struct {
	mock *MockBlock
}

func NewMockBlock(ctrl *gomock.Controller) *MockBlock {
	mock := &MockBlock{ctrl: ctrl}
	mock.recorder = &_MockBlockRecorder{mock}
	return mock
}

func (_m *MockBlock) EXPECT() *_MockBlockRecorder {
	return _m.recorder
}

func (_m *MockBlock) DataVersion() DataVer {
	ret := _m.ctrl.Call(_m, "DataVersion")
	ret0, _ := ret[0].(DataVer)
	return ret0
}

func (_mr *_MockBlockRecorder) DataVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DataVersion")
}

func (_m *MockBlock) GetEncodedSize() uint32 {
	ret := _m.ctrl.Call(_m, "GetEncodedSize")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockBlockRecorder) GetEncodedSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEncodedSize")
}

func (_m *MockBlock) SetEncodedSize(size uint32) {
	_m.ctrl.Call(_m, "SetEncodedSize", size)
}

func (_mr *_MockBlockRecorder) SetEncodedSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetEncodedSize", arg0)
}

func (_m *MockBlock) NewEmpty() Block {
	ret := _m.ctrl.Call(_m, "NewEmpty")
	ret0, _ := ret[0].(Block)
	return ret0
}

func (_mr *_MockBlockRecorder) NewEmpty() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewEmpty")
}

func (_m *MockBlock) Set(other Block) {
	_m.ctrl.Call(_m, "Set", other)
}

func (_mr *_MockBlockRecorder) Set(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Set", arg0)
}

func (_m *MockBlock) ToCommonBlock() *CommonBlock {
	ret := _m.ctrl.Call(_m, "ToCommonBlock")
	ret0, _ := ret[0].(*CommonBlock)
	return ret0
}

func (_mr *_MockBlockRecorder) ToCommonBlock() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ToCommonBlock")
}

// Mock of NodeID interface
type MockNodeID struct {
	ctrl     *gomock.Controller
	recorder *_MockNodeIDRecorder
}

// Recorder for MockNodeID (not exported)
type _MockNodeIDRecorder struct {
	mock *MockNodeID
}

func NewMockNodeID(ctrl *gomock.Controller) *MockNodeID {
	mock := &MockNodeID{ctrl: ctrl}
	mock.recorder = &_MockNodeIDRecorder{mock}
	return mock
}

func (_m *MockNodeID) EXPECT() *_MockNodeIDRecorder {
	return _m.recorder
}

func (_m *MockNodeID) ParentID() NodeID {
	ret := _m.ctrl.Call(_m, "ParentID")
	ret0, _ := ret[0].(NodeID)
	return ret0
}

func (_mr *_MockNodeIDRecorder) ParentID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ParentID")
}

// Mock of Node interface
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *_MockNodeRecorder
}

// Recorder for MockNode (not exported)
type _MockNodeRecorder struct {
	mock *MockNode
}

func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &_MockNodeRecorder{mock}
	return mock
}

func (_m *MockNode) EXPECT() *_MockNodeRecorder {
	return _m.recorder
}

func (_m *MockNode) GetID() NodeID {
	ret := _m.ctrl.Call(_m, "GetID")
	ret0, _ := ret[0].(NodeID)
	return ret0
}

func (_mr *_MockNodeRecorder) GetID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetID")
}

func (_m *MockNode) GetFolderBranch() FolderBranch {
	ret := _m.ctrl.Call(_m, "GetFolderBranch")
	ret0, _ := ret[0].(FolderBranch)
	return ret0
}

func (_mr *_MockNodeRecorder) GetFolderBranch() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFolderBranch")
}

func (_m *MockNode) GetBasename() string {
	ret := _m.ctrl.Call(_m, "GetBasename")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockNodeRecorder) GetBasename() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBasename")
}

// Mock of KBFSOps interface
type MockKBFSOps struct {
	ctrl     *gomock.Controller
	recorder *_MockKBFSOpsRecorder
}

// Recorder for MockKBFSOps (not exported)
type _MockKBFSOpsRecorder struct {
	mock *MockKBFSOps
}

func NewMockKBFSOps(ctrl *gomock.Controller) *MockKBFSOps {
	mock := &MockKBFSOps{ctrl: ctrl}
	mock.recorder = &_MockKBFSOpsRecorder{mock}
	return mock
}

func (_m *MockKBFSOps) EXPECT() *_MockKBFSOpsRecorder {
	return _m.recorder
}

func (_m *MockKBFSOps) GetFavorites(ctx context.Context) ([]Favorite, error) {
	ret := _m.ctrl.Call(_m, "GetFavorites", ctx)
	ret0, _ := ret[0].([]Favorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) GetFavorites(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFavorites", arg0)
}

func (_m *MockKBFSOps) RefreshCachedFavorites(ctx context.Context) {
	_m.ctrl.Call(_m, "RefreshCachedFavorites", ctx)
}

func (_mr *_MockKBFSOpsRecorder) RefreshCachedFavorites(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RefreshCachedFavorites", arg0)
}

func (_m *MockKBFSOps) AddFavorite(ctx context.Context, fav Favorite) error {
	ret := _m.ctrl.Call(_m, "AddFavorite", ctx, fav)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) AddFavorite(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddFavorite", arg0, arg1)
}

func (_m *MockKBFSOps) DeleteFavorite(ctx context.Context, fav Favorite) error {
	ret := _m.ctrl.Call(_m, "DeleteFavorite", ctx, fav)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) DeleteFavorite(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteFavorite", arg0, arg1)
}

func (_m *MockKBFSOps) GetTLFCryptKeys(ctx context.Context, tlfHandle *TlfHandle) ([]kbfscrypto.TLFCryptKey, tlf.ID, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeys", ctx, tlfHandle)
	ret0, _ := ret[0].([]kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(tlf.ID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) GetTLFCryptKeys(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeys", arg0, arg1)
}

func (_m *MockKBFSOps) GetTLFID(ctx context.Context, tlfHandle *TlfHandle) (tlf.ID, error) {
	ret := _m.ctrl.Call(_m, "GetTLFID", ctx, tlfHandle)
	ret0, _ := ret[0].(tlf.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) GetTLFID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFID", arg0, arg1)
}

func (_m *MockKBFSOps) GetOrCreateRootNode(ctx context.Context, h *TlfHandle, branch BranchName) (Node, EntryInfo, error) {
	ret := _m.ctrl.Call(_m, "GetOrCreateRootNode", ctx, h, branch)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(EntryInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) GetOrCreateRootNode(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOrCreateRootNode", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) GetRootNode(ctx context.Context, h *TlfHandle, branch BranchName) (Node, EntryInfo, error) {
	ret := _m.ctrl.Call(_m, "GetRootNode", ctx, h, branch)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(EntryInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) GetRootNode(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRootNode", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) GetDirChildren(ctx context.Context, dir Node) (map[string]EntryInfo, error) {
	ret := _m.ctrl.Call(_m, "GetDirChildren", ctx, dir)
	ret0, _ := ret[0].(map[string]EntryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) GetDirChildren(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDirChildren", arg0, arg1)
}

func (_m *MockKBFSOps) Lookup(ctx context.Context, dir Node, name string) (Node, EntryInfo, error) {
	ret := _m.ctrl.Call(_m, "Lookup", ctx, dir, name)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(EntryInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) Lookup(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Lookup", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) Stat(ctx context.Context, node Node) (EntryInfo, error) {
	ret := _m.ctrl.Call(_m, "Stat", ctx, node)
	ret0, _ := ret[0].(EntryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) Stat(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stat", arg0, arg1)
}

func (_m *MockKBFSOps) CreateDir(ctx context.Context, dir Node, name string) (Node, EntryInfo, error) {
	ret := _m.ctrl.Call(_m, "CreateDir", ctx, dir, name)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(EntryInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) CreateDir(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDir", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) CreateFile(ctx context.Context, dir Node, name string, isExec bool, excl Excl) (Node, EntryInfo, error) {
	ret := _m.ctrl.Call(_m, "CreateFile", ctx, dir, name, isExec, excl)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(EntryInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) CreateFile(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateFile", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockKBFSOps) CreateLink(ctx context.Context, dir Node, fromName string, toPath string) (EntryInfo, error) {
	ret := _m.ctrl.Call(_m, "CreateLink", ctx, dir, fromName, toPath)
	ret0, _ := ret[0].(EntryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) CreateLink(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateLink", arg0, arg1, arg2, arg3)
}

func (_m *MockKBFSOps) RemoveDir(ctx context.Context, dir Node, dirName string) error {
	ret := _m.ctrl.Call(_m, "RemoveDir", ctx, dir, dirName)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) RemoveDir(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveDir", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) RemoveEntry(ctx context.Context, dir Node, name string) error {
	ret := _m.ctrl.Call(_m, "RemoveEntry", ctx, dir, name)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) RemoveEntry(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveEntry", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) Rename(ctx context.Context, oldParent Node, oldName string, newParent Node, newName string) error {
	ret := _m.ctrl.Call(_m, "Rename", ctx, oldParent, oldName, newParent, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) Rename(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rename", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockKBFSOps) Read(ctx context.Context, file Node, dest []byte, off int64) (int64, error) {
	ret := _m.ctrl.Call(_m, "Read", ctx, file, dest, off)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) Read(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read", arg0, arg1, arg2, arg3)
}

func (_m *MockKBFSOps) Write(ctx context.Context, file Node, data []byte, off int64) error {
	ret := _m.ctrl.Call(_m, "Write", ctx, file, data, off)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) Write(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0, arg1, arg2, arg3)
}

func (_m *MockKBFSOps) Truncate(ctx context.Context, file Node, size uint64) error {
	ret := _m.ctrl.Call(_m, "Truncate", ctx, file, size)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) Truncate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Truncate", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) SetEx(ctx context.Context, file Node, ex bool) error {
	ret := _m.ctrl.Call(_m, "SetEx", ctx, file, ex)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) SetEx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetEx", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) SetMtime(ctx context.Context, file Node, mtime *time.Time) error {
	ret := _m.ctrl.Call(_m, "SetMtime", ctx, file, mtime)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) SetMtime(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMtime", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) SyncAll(ctx context.Context, folderBranch FolderBranch) error {
	ret := _m.ctrl.Call(_m, "SyncAll", ctx, folderBranch)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) SyncAll(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SyncAll", arg0, arg1)
}

func (_m *MockKBFSOps) FolderStatus(ctx context.Context, folderBranch FolderBranch) (FolderBranchStatus, <-chan StatusUpdate, error) {
	ret := _m.ctrl.Call(_m, "FolderStatus", ctx, folderBranch)
	ret0, _ := ret[0].(FolderBranchStatus)
	ret1, _ := ret[1].(<-chan StatusUpdate)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) FolderStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FolderStatus", arg0, arg1)
}

func (_m *MockKBFSOps) Status(ctx context.Context) (KBFSStatus, <-chan StatusUpdate, error) {
	ret := _m.ctrl.Call(_m, "Status", ctx)
	ret0, _ := ret[0].(KBFSStatus)
	ret1, _ := ret[1].(<-chan StatusUpdate)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) Status(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Status", arg0)
}

func (_m *MockKBFSOps) UnstageForTesting(ctx context.Context, folderBranch FolderBranch) error {
	ret := _m.ctrl.Call(_m, "UnstageForTesting", ctx, folderBranch)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) UnstageForTesting(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnstageForTesting", arg0, arg1)
}

func (_m *MockKBFSOps) RequestRekey(ctx context.Context, id tlf.ID) {
	_m.ctrl.Call(_m, "RequestRekey", ctx, id)
}

func (_mr *_MockKBFSOpsRecorder) RequestRekey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RequestRekey", arg0, arg1)
}

func (_m *MockKBFSOps) SyncFromServerForTesting(ctx context.Context, folderBranch FolderBranch) error {
	ret := _m.ctrl.Call(_m, "SyncFromServerForTesting", ctx, folderBranch)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) SyncFromServerForTesting(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SyncFromServerForTesting", arg0, arg1)
}

func (_m *MockKBFSOps) GetUpdateHistory(ctx context.Context, folderBranch FolderBranch) (TLFUpdateHistory, error) {
	ret := _m.ctrl.Call(_m, "GetUpdateHistory", ctx, folderBranch)
	ret0, _ := ret[0].(TLFUpdateHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) GetUpdateHistory(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUpdateHistory", arg0, arg1)
}

func (_m *MockKBFSOps) GetEditHistory(ctx context.Context, folderBranch FolderBranch) (TlfWriterEdits, error) {
	ret := _m.ctrl.Call(_m, "GetEditHistory", ctx, folderBranch)
	ret0, _ := ret[0].(TlfWriterEdits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) GetEditHistory(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEditHistory", arg0, arg1)
}

func (_m *MockKBFSOps) GetNodeMetadata(ctx context.Context, node Node) (NodeMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetNodeMetadata", ctx, node)
	ret0, _ := ret[0].(NodeMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) GetNodeMetadata(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNodeMetadata", arg0, arg1)
}

func (_m *MockKBFSOps) Shutdown(ctx context.Context) error {
	ret := _m.ctrl.Call(_m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) Shutdown(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown", arg0)
}

func (_m *MockKBFSOps) PushConnectionStatusChange(service string, newStatus error) {
	_m.ctrl.Call(_m, "PushConnectionStatusChange", service, newStatus)
}

func (_mr *_MockKBFSOpsRecorder) PushConnectionStatusChange(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PushConnectionStatusChange", arg0, arg1)
}

func (_m *MockKBFSOps) PushStatusChange() {
	_m.ctrl.Call(_m, "PushStatusChange")
}

func (_mr *_MockKBFSOpsRecorder) PushStatusChange() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PushStatusChange")
}

func (_m *MockKBFSOps) ClearPrivateFolderMD(ctx context.Context) {
	_m.ctrl.Call(_m, "ClearPrivateFolderMD", ctx)
}

func (_mr *_MockKBFSOpsRecorder) ClearPrivateFolderMD(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClearPrivateFolderMD", arg0)
}

func (_m *MockKBFSOps) ForceFastForward(ctx context.Context) {
	_m.ctrl.Call(_m, "ForceFastForward", ctx)
}

func (_mr *_MockKBFSOpsRecorder) ForceFastForward(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ForceFastForward", arg0)
}

func (_m *MockKBFSOps) TeamNameChanged(ctx context.Context, tid keybase1.TeamID) {
	_m.ctrl.Call(_m, "TeamNameChanged", ctx, tid)
}

func (_mr *_MockKBFSOpsRecorder) TeamNameChanged(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TeamNameChanged", arg0, arg1)
}

// Mock of merkleSeqNoGetter interface
type MockmerkleSeqNoGetter struct {
	ctrl     *gomock.Controller
	recorder *_MockmerkleSeqNoGetterRecorder
}

// Recorder for MockmerkleSeqNoGetter (not exported)
type _MockmerkleSeqNoGetterRecorder struct {
	mock *MockmerkleSeqNoGetter
}

func NewMockmerkleSeqNoGetter(ctrl *gomock.Controller) *MockmerkleSeqNoGetter {
	mock := &MockmerkleSeqNoGetter{ctrl: ctrl}
	mock.recorder = &_MockmerkleSeqNoGetterRecorder{mock}
	return mock
}

func (_m *MockmerkleSeqNoGetter) EXPECT() *_MockmerkleSeqNoGetterRecorder {
	return _m.recorder
}

func (_m *MockmerkleSeqNoGetter) GetCurrentMerkleSeqNo(ctx context.Context) (MerkleSeqNo, error) {
	ret := _m.ctrl.Call(_m, "GetCurrentMerkleSeqNo", ctx)
	ret0, _ := ret[0].(MerkleSeqNo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockmerkleSeqNoGetterRecorder) GetCurrentMerkleSeqNo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCurrentMerkleSeqNo", arg0)
}

// Mock of KeybaseService interface
type MockKeybaseService struct {
	ctrl     *gomock.Controller
	recorder *_MockKeybaseServiceRecorder
}

// Recorder for MockKeybaseService (not exported)
type _MockKeybaseServiceRecorder struct {
	mock *MockKeybaseService
}

func NewMockKeybaseService(ctrl *gomock.Controller) *MockKeybaseService {
	mock := &MockKeybaseService{ctrl: ctrl}
	mock.recorder = &_MockKeybaseServiceRecorder{mock}
	return mock
}

func (_m *MockKeybaseService) EXPECT() *_MockKeybaseServiceRecorder {
	return _m.recorder
}

func (_m *MockKeybaseService) GetCurrentMerkleSeqNo(ctx context.Context) (MerkleSeqNo, error) {
	ret := _m.ctrl.Call(_m, "GetCurrentMerkleSeqNo", ctx)
	ret0, _ := ret[0].(MerkleSeqNo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeybaseServiceRecorder) GetCurrentMerkleSeqNo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCurrentMerkleSeqNo", arg0)
}

func (_m *MockKeybaseService) Resolve(ctx context.Context, assertion string) (libkb.NormalizedUsername, keybase1.UserOrTeamID, error) {
	ret := _m.ctrl.Call(_m, "Resolve", ctx, assertion)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(keybase1.UserOrTeamID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKeybaseServiceRecorder) Resolve(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Resolve", arg0, arg1)
}

func (_m *MockKeybaseService) Identify(ctx context.Context, assertion string, reason string) (libkb.NormalizedUsername, keybase1.UserOrTeamID, error) {
	ret := _m.ctrl.Call(_m, "Identify", ctx, assertion, reason)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(keybase1.UserOrTeamID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKeybaseServiceRecorder) Identify(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Identify", arg0, arg1, arg2)
}

func (_m *MockKeybaseService) LoadUserPlusKeys(ctx context.Context, uid keybase1.UID, pollForKID keybase1.KID) (UserInfo, error) {
	ret := _m.ctrl.Call(_m, "LoadUserPlusKeys", ctx, uid, pollForKID)
	ret0, _ := ret[0].(UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeybaseServiceRecorder) LoadUserPlusKeys(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoadUserPlusKeys", arg0, arg1, arg2)
}

func (_m *MockKeybaseService) LoadUnverifiedKeys(ctx context.Context, uid keybase1.UID) ([]keybase1.PublicKey, error) {
	ret := _m.ctrl.Call(_m, "LoadUnverifiedKeys", ctx, uid)
	ret0, _ := ret[0].([]keybase1.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeybaseServiceRecorder) LoadUnverifiedKeys(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoadUnverifiedKeys", arg0, arg1)
}

func (_m *MockKeybaseService) LoadTeamPlusKeys(ctx context.Context, tid keybase1.TeamID, desiredKeyGen KeyGen, desiredUser keybase1.UserVersion, desiredRole keybase1.TeamRole) (TeamInfo, error) {
	ret := _m.ctrl.Call(_m, "LoadTeamPlusKeys", ctx, tid, desiredKeyGen, desiredUser, desiredRole)
	ret0, _ := ret[0].(TeamInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeybaseServiceRecorder) LoadTeamPlusKeys(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoadTeamPlusKeys", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockKeybaseService) CurrentSession(ctx context.Context, sessionID int) (SessionInfo, error) {
	ret := _m.ctrl.Call(_m, "CurrentSession", ctx, sessionID)
	ret0, _ := ret[0].(SessionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeybaseServiceRecorder) CurrentSession(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CurrentSession", arg0, arg1)
}

func (_m *MockKeybaseService) FavoriteAdd(ctx context.Context, folder keybase1.Folder) error {
	ret := _m.ctrl.Call(_m, "FavoriteAdd", ctx, folder)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeybaseServiceRecorder) FavoriteAdd(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteAdd", arg0, arg1)
}

func (_m *MockKeybaseService) FavoriteDelete(ctx context.Context, folder keybase1.Folder) error {
	ret := _m.ctrl.Call(_m, "FavoriteDelete", ctx, folder)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeybaseServiceRecorder) FavoriteDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteDelete", arg0, arg1)
}

func (_m *MockKeybaseService) FavoriteList(ctx context.Context, sessionID int) ([]keybase1.Folder, error) {
	ret := _m.ctrl.Call(_m, "FavoriteList", ctx, sessionID)
	ret0, _ := ret[0].([]keybase1.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeybaseServiceRecorder) FavoriteList(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteList", arg0, arg1)
}

func (_m *MockKeybaseService) Notify(ctx context.Context, notification *keybase1.FSNotification) error {
	ret := _m.ctrl.Call(_m, "Notify", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeybaseServiceRecorder) Notify(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Notify", arg0, arg1)
}

func (_m *MockKeybaseService) NotifySyncStatus(ctx context.Context, status *keybase1.FSPathSyncStatus) error {
	ret := _m.ctrl.Call(_m, "NotifySyncStatus", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeybaseServiceRecorder) NotifySyncStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifySyncStatus", arg0, arg1)
}

func (_m *MockKeybaseService) FlushUserFromLocalCache(ctx context.Context, uid keybase1.UID) {
	_m.ctrl.Call(_m, "FlushUserFromLocalCache", ctx, uid)
}

func (_mr *_MockKeybaseServiceRecorder) FlushUserFromLocalCache(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FlushUserFromLocalCache", arg0, arg1)
}

func (_m *MockKeybaseService) FlushUserUnverifiedKeysFromLocalCache(ctx context.Context, uid keybase1.UID) {
	_m.ctrl.Call(_m, "FlushUserUnverifiedKeysFromLocalCache", ctx, uid)
}

func (_mr *_MockKeybaseServiceRecorder) FlushUserUnverifiedKeysFromLocalCache(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FlushUserUnverifiedKeysFromLocalCache", arg0, arg1)
}

func (_m *MockKeybaseService) EstablishMountDir(ctx context.Context) (string, error) {
	ret := _m.ctrl.Call(_m, "EstablishMountDir", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeybaseServiceRecorder) EstablishMountDir(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EstablishMountDir", arg0)
}

func (_m *MockKeybaseService) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockKeybaseServiceRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of KeybaseServiceCn interface
type MockKeybaseServiceCn struct {
	ctrl     *gomock.Controller
	recorder *_MockKeybaseServiceCnRecorder
}

// Recorder for MockKeybaseServiceCn (not exported)
type _MockKeybaseServiceCnRecorder struct {
	mock *MockKeybaseServiceCn
}

func NewMockKeybaseServiceCn(ctrl *gomock.Controller) *MockKeybaseServiceCn {
	mock := &MockKeybaseServiceCn{ctrl: ctrl}
	mock.recorder = &_MockKeybaseServiceCnRecorder{mock}
	return mock
}

func (_m *MockKeybaseServiceCn) EXPECT() *_MockKeybaseServiceCnRecorder {
	return _m.recorder
}

func (_m *MockKeybaseServiceCn) NewKeybaseService(config Config, params InitParams, ctx Context, log logger.Logger) (KeybaseService, error) {
	ret := _m.ctrl.Call(_m, "NewKeybaseService", config, params, ctx, log)
	ret0, _ := ret[0].(KeybaseService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeybaseServiceCnRecorder) NewKeybaseService(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewKeybaseService", arg0, arg1, arg2, arg3)
}

func (_m *MockKeybaseServiceCn) NewCrypto(config Config, params InitParams, ctx Context, log logger.Logger) (Crypto, error) {
	ret := _m.ctrl.Call(_m, "NewCrypto", config, params, ctx, log)
	ret0, _ := ret[0].(Crypto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeybaseServiceCnRecorder) NewCrypto(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewCrypto", arg0, arg1, arg2, arg3)
}

// Mock of resolver interface
type Mockresolver struct {
	ctrl     *gomock.Controller
	recorder *_MockresolverRecorder
}

// Recorder for Mockresolver (not exported)
type _MockresolverRecorder struct {
	mock *Mockresolver
}

func NewMockresolver(ctrl *gomock.Controller) *Mockresolver {
	mock := &Mockresolver{ctrl: ctrl}
	mock.recorder = &_MockresolverRecorder{mock}
	return mock
}

func (_m *Mockresolver) EXPECT() *_MockresolverRecorder {
	return _m.recorder
}

func (_m *Mockresolver) Resolve(ctx context.Context, assertion string) (libkb.NormalizedUsername, keybase1.UserOrTeamID, error) {
	ret := _m.ctrl.Call(_m, "Resolve", ctx, assertion)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(keybase1.UserOrTeamID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockresolverRecorder) Resolve(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Resolve", arg0, arg1)
}

// Mock of identifier interface
type Mockidentifier struct {
	ctrl     *gomock.Controller
	recorder *_MockidentifierRecorder
}

// Recorder for Mockidentifier (not exported)
type _MockidentifierRecorder struct {
	mock *Mockidentifier
}

func NewMockidentifier(ctrl *gomock.Controller) *Mockidentifier {
	mock := &Mockidentifier{ctrl: ctrl}
	mock.recorder = &_MockidentifierRecorder{mock}
	return mock
}

func (_m *Mockidentifier) EXPECT() *_MockidentifierRecorder {
	return _m.recorder
}

func (_m *Mockidentifier) Identify(ctx context.Context, assertion string, reason string) (libkb.NormalizedUsername, keybase1.UserOrTeamID, error) {
	ret := _m.ctrl.Call(_m, "Identify", ctx, assertion, reason)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(keybase1.UserOrTeamID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockidentifierRecorder) Identify(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Identify", arg0, arg1, arg2)
}

// Mock of normalizedUsernameGetter interface
type MocknormalizedUsernameGetter struct {
	ctrl     *gomock.Controller
	recorder *_MocknormalizedUsernameGetterRecorder
}

// Recorder for MocknormalizedUsernameGetter (not exported)
type _MocknormalizedUsernameGetterRecorder struct {
	mock *MocknormalizedUsernameGetter
}

func NewMocknormalizedUsernameGetter(ctrl *gomock.Controller) *MocknormalizedUsernameGetter {
	mock := &MocknormalizedUsernameGetter{ctrl: ctrl}
	mock.recorder = &_MocknormalizedUsernameGetterRecorder{mock}
	return mock
}

func (_m *MocknormalizedUsernameGetter) EXPECT() *_MocknormalizedUsernameGetterRecorder {
	return _m.recorder
}

func (_m *MocknormalizedUsernameGetter) GetNormalizedUsername(ctx context.Context, id keybase1.UserOrTeamID) (libkb.NormalizedUsername, error) {
	ret := _m.ctrl.Call(_m, "GetNormalizedUsername", ctx, id)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MocknormalizedUsernameGetterRecorder) GetNormalizedUsername(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNormalizedUsername", arg0, arg1)
}

// Mock of CurrentSessionGetter interface
type MockCurrentSessionGetter struct {
	ctrl     *gomock.Controller
	recorder *_MockCurrentSessionGetterRecorder
}

// Recorder for MockCurrentSessionGetter (not exported)
type _MockCurrentSessionGetterRecorder struct {
	mock *MockCurrentSessionGetter
}

func NewMockCurrentSessionGetter(ctrl *gomock.Controller) *MockCurrentSessionGetter {
	mock := &MockCurrentSessionGetter{ctrl: ctrl}
	mock.recorder = &_MockCurrentSessionGetterRecorder{mock}
	return mock
}

func (_m *MockCurrentSessionGetter) EXPECT() *_MockCurrentSessionGetterRecorder {
	return _m.recorder
}

func (_m *MockCurrentSessionGetter) GetCurrentSession(ctx context.Context) (SessionInfo, error) {
	ret := _m.ctrl.Call(_m, "GetCurrentSession", ctx)
	ret0, _ := ret[0].(SessionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCurrentSessionGetterRecorder) GetCurrentSession(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCurrentSession", arg0)
}

// Mock of TeamMembershipChecker interface
type MockTeamMembershipChecker struct {
	ctrl     *gomock.Controller
	recorder *_MockTeamMembershipCheckerRecorder
}

// Recorder for MockTeamMembershipChecker (not exported)
type _MockTeamMembershipCheckerRecorder struct {
	mock *MockTeamMembershipChecker
}

func NewMockTeamMembershipChecker(ctrl *gomock.Controller) *MockTeamMembershipChecker {
	mock := &MockTeamMembershipChecker{ctrl: ctrl}
	mock.recorder = &_MockTeamMembershipCheckerRecorder{mock}
	return mock
}

func (_m *MockTeamMembershipChecker) EXPECT() *_MockTeamMembershipCheckerRecorder {
	return _m.recorder
}

func (_m *MockTeamMembershipChecker) IsTeamWriter(ctx context.Context, tid keybase1.TeamID, uid keybase1.UID) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsTeamWriter", ctx, tid, uid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTeamMembershipCheckerRecorder) IsTeamWriter(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsTeamWriter", arg0, arg1, arg2)
}

func (_m *MockTeamMembershipChecker) IsTeamReader(ctx context.Context, tid keybase1.TeamID, uid keybase1.UID) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsTeamReader", ctx, tid, uid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTeamMembershipCheckerRecorder) IsTeamReader(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsTeamReader", arg0, arg1, arg2)
}

// Mock of teamKeysGetter interface
type MockteamKeysGetter struct {
	ctrl     *gomock.Controller
	recorder *_MockteamKeysGetterRecorder
}

// Recorder for MockteamKeysGetter (not exported)
type _MockteamKeysGetterRecorder struct {
	mock *MockteamKeysGetter
}

func NewMockteamKeysGetter(ctrl *gomock.Controller) *MockteamKeysGetter {
	mock := &MockteamKeysGetter{ctrl: ctrl}
	mock.recorder = &_MockteamKeysGetterRecorder{mock}
	return mock
}

func (_m *MockteamKeysGetter) EXPECT() *_MockteamKeysGetterRecorder {
	return _m.recorder
}

func (_m *MockteamKeysGetter) GetTeamTLFCryptKeys(ctx context.Context, tid keybase1.TeamID, desiredKeyGen KeyGen) (map[KeyGen]kbfscrypto.TLFCryptKey, KeyGen, error) {
	ret := _m.ctrl.Call(_m, "GetTeamTLFCryptKeys", ctx, tid, desiredKeyGen)
	ret0, _ := ret[0].(map[KeyGen]kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(KeyGen)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockteamKeysGetterRecorder) GetTeamTLFCryptKeys(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTeamTLFCryptKeys", arg0, arg1, arg2)
}

// Mock of KBPKI interface
type MockKBPKI struct {
	ctrl     *gomock.Controller
	recorder *_MockKBPKIRecorder
}

// Recorder for MockKBPKI (not exported)
type _MockKBPKIRecorder struct {
	mock *MockKBPKI
}

func NewMockKBPKI(ctrl *gomock.Controller) *MockKBPKI {
	mock := &MockKBPKI{ctrl: ctrl}
	mock.recorder = &_MockKBPKIRecorder{mock}
	return mock
}

func (_m *MockKBPKI) EXPECT() *_MockKBPKIRecorder {
	return _m.recorder
}

func (_m *MockKBPKI) GetCurrentSession(ctx context.Context) (SessionInfo, error) {
	ret := _m.ctrl.Call(_m, "GetCurrentSession", ctx)
	ret0, _ := ret[0].(SessionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetCurrentSession(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCurrentSession", arg0)
}

func (_m *MockKBPKI) Resolve(ctx context.Context, assertion string) (libkb.NormalizedUsername, keybase1.UserOrTeamID, error) {
	ret := _m.ctrl.Call(_m, "Resolve", ctx, assertion)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(keybase1.UserOrTeamID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBPKIRecorder) Resolve(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Resolve", arg0, arg1)
}

func (_m *MockKBPKI) Identify(ctx context.Context, assertion string, reason string) (libkb.NormalizedUsername, keybase1.UserOrTeamID, error) {
	ret := _m.ctrl.Call(_m, "Identify", ctx, assertion, reason)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(keybase1.UserOrTeamID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBPKIRecorder) Identify(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Identify", arg0, arg1, arg2)
}

func (_m *MockKBPKI) GetNormalizedUsername(ctx context.Context, id keybase1.UserOrTeamID) (libkb.NormalizedUsername, error) {
	ret := _m.ctrl.Call(_m, "GetNormalizedUsername", ctx, id)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetNormalizedUsername(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNormalizedUsername", arg0, arg1)
}

func (_m *MockKBPKI) GetCurrentMerkleSeqNo(ctx context.Context) (MerkleSeqNo, error) {
	ret := _m.ctrl.Call(_m, "GetCurrentMerkleSeqNo", ctx)
	ret0, _ := ret[0].(MerkleSeqNo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetCurrentMerkleSeqNo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCurrentMerkleSeqNo", arg0)
}

func (_m *MockKBPKI) IsTeamWriter(ctx context.Context, tid keybase1.TeamID, uid keybase1.UID) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsTeamWriter", ctx, tid, uid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) IsTeamWriter(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsTeamWriter", arg0, arg1, arg2)
}

func (_m *MockKBPKI) IsTeamReader(ctx context.Context, tid keybase1.TeamID, uid keybase1.UID) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsTeamReader", ctx, tid, uid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) IsTeamReader(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsTeamReader", arg0, arg1, arg2)
}

func (_m *MockKBPKI) GetTeamTLFCryptKeys(ctx context.Context, tid keybase1.TeamID, desiredKeyGen KeyGen) (map[KeyGen]kbfscrypto.TLFCryptKey, KeyGen, error) {
	ret := _m.ctrl.Call(_m, "GetTeamTLFCryptKeys", ctx, tid, desiredKeyGen)
	ret0, _ := ret[0].(map[KeyGen]kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(KeyGen)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBPKIRecorder) GetTeamTLFCryptKeys(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTeamTLFCryptKeys", arg0, arg1, arg2)
}

func (_m *MockKBPKI) HasVerifyingKey(ctx context.Context, uid keybase1.UID, verifyingKey kbfscrypto.VerifyingKey, atServerTime time.Time) error {
	ret := _m.ctrl.Call(_m, "HasVerifyingKey", ctx, uid, verifyingKey, atServerTime)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBPKIRecorder) HasVerifyingKey(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HasVerifyingKey", arg0, arg1, arg2, arg3)
}

func (_m *MockKBPKI) HasUnverifiedVerifyingKey(ctx context.Context, uid keybase1.UID, verifyingKey kbfscrypto.VerifyingKey) error {
	ret := _m.ctrl.Call(_m, "HasUnverifiedVerifyingKey", ctx, uid, verifyingKey)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBPKIRecorder) HasUnverifiedVerifyingKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HasUnverifiedVerifyingKey", arg0, arg1, arg2)
}

func (_m *MockKBPKI) GetCryptPublicKeys(ctx context.Context, uid keybase1.UID) ([]kbfscrypto.CryptPublicKey, error) {
	ret := _m.ctrl.Call(_m, "GetCryptPublicKeys", ctx, uid)
	ret0, _ := ret[0].([]kbfscrypto.CryptPublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetCryptPublicKeys(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCryptPublicKeys", arg0, arg1)
}

func (_m *MockKBPKI) FavoriteAdd(ctx context.Context, folder keybase1.Folder) error {
	ret := _m.ctrl.Call(_m, "FavoriteAdd", ctx, folder)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBPKIRecorder) FavoriteAdd(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteAdd", arg0, arg1)
}

func (_m *MockKBPKI) FavoriteDelete(ctx context.Context, folder keybase1.Folder) error {
	ret := _m.ctrl.Call(_m, "FavoriteDelete", ctx, folder)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBPKIRecorder) FavoriteDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteDelete", arg0, arg1)
}

func (_m *MockKBPKI) FavoriteList(ctx context.Context) ([]keybase1.Folder, error) {
	ret := _m.ctrl.Call(_m, "FavoriteList", ctx)
	ret0, _ := ret[0].([]keybase1.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) FavoriteList(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteList", arg0)
}

func (_m *MockKBPKI) Notify(ctx context.Context, notification *keybase1.FSNotification) error {
	ret := _m.ctrl.Call(_m, "Notify", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBPKIRecorder) Notify(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Notify", arg0, arg1)
}

// Mock of KeyMetadata interface
type MockKeyMetadata struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyMetadataRecorder
}

// Recorder for MockKeyMetadata (not exported)
type _MockKeyMetadataRecorder struct {
	mock *MockKeyMetadata
}

func NewMockKeyMetadata(ctrl *gomock.Controller) *MockKeyMetadata {
	mock := &MockKeyMetadata{ctrl: ctrl}
	mock.recorder = &_MockKeyMetadataRecorder{mock}
	return mock
}

func (_m *MockKeyMetadata) EXPECT() *_MockKeyMetadataRecorder {
	return _m.recorder
}

func (_m *MockKeyMetadata) TlfID() tlf.ID {
	ret := _m.ctrl.Call(_m, "TlfID")
	ret0, _ := ret[0].(tlf.ID)
	return ret0
}

func (_mr *_MockKeyMetadataRecorder) TlfID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TlfID")
}

func (_m *MockKeyMetadata) LatestKeyGeneration() KeyGen {
	ret := _m.ctrl.Call(_m, "LatestKeyGeneration")
	ret0, _ := ret[0].(KeyGen)
	return ret0
}

func (_mr *_MockKeyMetadataRecorder) LatestKeyGeneration() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LatestKeyGeneration")
}

func (_m *MockKeyMetadata) GetTlfHandle() *TlfHandle {
	ret := _m.ctrl.Call(_m, "GetTlfHandle")
	ret0, _ := ret[0].(*TlfHandle)
	return ret0
}

func (_mr *_MockKeyMetadataRecorder) GetTlfHandle() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTlfHandle")
}

func (_m *MockKeyMetadata) IsWriter(ctx context.Context, checker TeamMembershipChecker, uid keybase1.UID) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsWriter", ctx, checker, uid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyMetadataRecorder) IsWriter(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsWriter", arg0, arg1, arg2)
}

func (_m *MockKeyMetadata) HasKeyForUser(user keybase1.UID) (bool, error) {
	ret := _m.ctrl.Call(_m, "HasKeyForUser", user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyMetadataRecorder) HasKeyForUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HasKeyForUser", arg0)
}

func (_m *MockKeyMetadata) GetTLFCryptKeyParams(keyGen KeyGen, user keybase1.UID, key kbfscrypto.CryptPublicKey) (kbfscrypto.TLFEphemeralPublicKey, EncryptedTLFCryptKeyClientHalf, TLFCryptKeyServerHalfID, bool, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyParams", keyGen, user, key)
	ret0, _ := ret[0].(kbfscrypto.TLFEphemeralPublicKey)
	ret1, _ := ret[1].(EncryptedTLFCryptKeyClientHalf)
	ret2, _ := ret[2].(TLFCryptKeyServerHalfID)
	ret3, _ := ret[3].(bool)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

func (_mr *_MockKeyMetadataRecorder) GetTLFCryptKeyParams(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyParams", arg0, arg1, arg2)
}

func (_m *MockKeyMetadata) StoresHistoricTLFCryptKeys() bool {
	ret := _m.ctrl.Call(_m, "StoresHistoricTLFCryptKeys")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockKeyMetadataRecorder) StoresHistoricTLFCryptKeys() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StoresHistoricTLFCryptKeys")
}

func (_m *MockKeyMetadata) GetHistoricTLFCryptKey(c cryptoPure, keyGen KeyGen, currentKey kbfscrypto.TLFCryptKey) (kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetHistoricTLFCryptKey", c, keyGen, currentKey)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyMetadataRecorder) GetHistoricTLFCryptKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetHistoricTLFCryptKey", arg0, arg1, arg2)
}

// Mock of encryptionKeyGetter interface
type MockencryptionKeyGetter struct {
	ctrl     *gomock.Controller
	recorder *_MockencryptionKeyGetterRecorder
}

// Recorder for MockencryptionKeyGetter (not exported)
type _MockencryptionKeyGetterRecorder struct {
	mock *MockencryptionKeyGetter
}

func NewMockencryptionKeyGetter(ctrl *gomock.Controller) *MockencryptionKeyGetter {
	mock := &MockencryptionKeyGetter{ctrl: ctrl}
	mock.recorder = &_MockencryptionKeyGetterRecorder{mock}
	return mock
}

func (_m *MockencryptionKeyGetter) EXPECT() *_MockencryptionKeyGetterRecorder {
	return _m.recorder
}

func (_m *MockencryptionKeyGetter) GetTLFCryptKeyForEncryption(ctx context.Context, kmd KeyMetadata) (kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyForEncryption", ctx, kmd)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockencryptionKeyGetterRecorder) GetTLFCryptKeyForEncryption(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyForEncryption", arg0, arg1)
}

// Mock of mdDecryptionKeyGetter interface
type MockmdDecryptionKeyGetter struct {
	ctrl     *gomock.Controller
	recorder *_MockmdDecryptionKeyGetterRecorder
}

// Recorder for MockmdDecryptionKeyGetter (not exported)
type _MockmdDecryptionKeyGetterRecorder struct {
	mock *MockmdDecryptionKeyGetter
}

func NewMockmdDecryptionKeyGetter(ctrl *gomock.Controller) *MockmdDecryptionKeyGetter {
	mock := &MockmdDecryptionKeyGetter{ctrl: ctrl}
	mock.recorder = &_MockmdDecryptionKeyGetterRecorder{mock}
	return mock
}

func (_m *MockmdDecryptionKeyGetter) EXPECT() *_MockmdDecryptionKeyGetterRecorder {
	return _m.recorder
}

func (_m *MockmdDecryptionKeyGetter) GetTLFCryptKeyForMDDecryption(ctx context.Context, kmdToDecrypt KeyMetadata, kmdWithKeys KeyMetadata) (kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyForMDDecryption", ctx, kmdToDecrypt, kmdWithKeys)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockmdDecryptionKeyGetterRecorder) GetTLFCryptKeyForMDDecryption(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyForMDDecryption", arg0, arg1, arg2)
}

// Mock of blockDecryptionKeyGetter interface
type MockblockDecryptionKeyGetter struct {
	ctrl     *gomock.Controller
	recorder *_MockblockDecryptionKeyGetterRecorder
}

// Recorder for MockblockDecryptionKeyGetter (not exported)
type _MockblockDecryptionKeyGetterRecorder struct {
	mock *MockblockDecryptionKeyGetter
}

func NewMockblockDecryptionKeyGetter(ctrl *gomock.Controller) *MockblockDecryptionKeyGetter {
	mock := &MockblockDecryptionKeyGetter{ctrl: ctrl}
	mock.recorder = &_MockblockDecryptionKeyGetterRecorder{mock}
	return mock
}

func (_m *MockblockDecryptionKeyGetter) EXPECT() *_MockblockDecryptionKeyGetterRecorder {
	return _m.recorder
}

func (_m *MockblockDecryptionKeyGetter) GetTLFCryptKeyForBlockDecryption(ctx context.Context, kmd KeyMetadata, blockPtr BlockPointer) (kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyForBlockDecryption", ctx, kmd, blockPtr)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockblockDecryptionKeyGetterRecorder) GetTLFCryptKeyForBlockDecryption(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyForBlockDecryption", arg0, arg1, arg2)
}

// Mock of blockKeyGetter interface
type MockblockKeyGetter struct {
	ctrl     *gomock.Controller
	recorder *_MockblockKeyGetterRecorder
}

// Recorder for MockblockKeyGetter (not exported)
type _MockblockKeyGetterRecorder struct {
	mock *MockblockKeyGetter
}

func NewMockblockKeyGetter(ctrl *gomock.Controller) *MockblockKeyGetter {
	mock := &MockblockKeyGetter{ctrl: ctrl}
	mock.recorder = &_MockblockKeyGetterRecorder{mock}
	return mock
}

func (_m *MockblockKeyGetter) EXPECT() *_MockblockKeyGetterRecorder {
	return _m.recorder
}

func (_m *MockblockKeyGetter) GetTLFCryptKeyForEncryption(ctx context.Context, kmd KeyMetadata) (kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyForEncryption", ctx, kmd)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockblockKeyGetterRecorder) GetTLFCryptKeyForEncryption(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyForEncryption", arg0, arg1)
}

func (_m *MockblockKeyGetter) GetTLFCryptKeyForBlockDecryption(ctx context.Context, kmd KeyMetadata, blockPtr BlockPointer) (kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyForBlockDecryption", ctx, kmd, blockPtr)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockblockKeyGetterRecorder) GetTLFCryptKeyForBlockDecryption(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyForBlockDecryption", arg0, arg1, arg2)
}

// Mock of KeyManager interface
type MockKeyManager struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyManagerRecorder
}

// Recorder for MockKeyManager (not exported)
type _MockKeyManagerRecorder struct {
	mock *MockKeyManager
}

func NewMockKeyManager(ctrl *gomock.Controller) *MockKeyManager {
	mock := &MockKeyManager{ctrl: ctrl}
	mock.recorder = &_MockKeyManagerRecorder{mock}
	return mock
}

func (_m *MockKeyManager) EXPECT() *_MockKeyManagerRecorder {
	return _m.recorder
}

func (_m *MockKeyManager) GetTLFCryptKeyForEncryption(ctx context.Context, kmd KeyMetadata) (kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyForEncryption", ctx, kmd)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyManagerRecorder) GetTLFCryptKeyForEncryption(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyForEncryption", arg0, arg1)
}

func (_m *MockKeyManager) GetTLFCryptKeyForBlockDecryption(ctx context.Context, kmd KeyMetadata, blockPtr BlockPointer) (kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyForBlockDecryption", ctx, kmd, blockPtr)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyManagerRecorder) GetTLFCryptKeyForBlockDecryption(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyForBlockDecryption", arg0, arg1, arg2)
}

func (_m *MockKeyManager) GetTLFCryptKeyForMDDecryption(ctx context.Context, kmdToDecrypt KeyMetadata, kmdWithKeys KeyMetadata) (kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyForMDDecryption", ctx, kmdToDecrypt, kmdWithKeys)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyManagerRecorder) GetTLFCryptKeyForMDDecryption(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyForMDDecryption", arg0, arg1, arg2)
}

func (_m *MockKeyManager) GetTLFCryptKeyOfAllGenerations(ctx context.Context, kmd KeyMetadata) ([]kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyOfAllGenerations", ctx, kmd)
	ret0, _ := ret[0].([]kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyManagerRecorder) GetTLFCryptKeyOfAllGenerations(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyOfAllGenerations", arg0, arg1)
}

func (_m *MockKeyManager) Rekey(ctx context.Context, md *RootMetadata, promptPaper bool) (bool, *kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "Rekey", ctx, md, promptPaper)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*kbfscrypto.TLFCryptKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKeyManagerRecorder) Rekey(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rekey", arg0, arg1, arg2)
}

// Mock of Reporter interface
type MockReporter struct {
	ctrl     *gomock.Controller
	recorder *_MockReporterRecorder
}

// Recorder for MockReporter (not exported)
type _MockReporterRecorder struct {
	mock *MockReporter
}

func NewMockReporter(ctrl *gomock.Controller) *MockReporter {
	mock := &MockReporter{ctrl: ctrl}
	mock.recorder = &_MockReporterRecorder{mock}
	return mock
}

func (_m *MockReporter) EXPECT() *_MockReporterRecorder {
	return _m.recorder
}

func (_m *MockReporter) ReportErr(ctx context.Context, tlfName CanonicalTlfName, t tlf.Type, mode ErrorModeType, err error) {
	_m.ctrl.Call(_m, "ReportErr", ctx, tlfName, t, mode, err)
}

func (_mr *_MockReporterRecorder) ReportErr(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReportErr", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockReporter) AllKnownErrors() []ReportedError {
	ret := _m.ctrl.Call(_m, "AllKnownErrors")
	ret0, _ := ret[0].([]ReportedError)
	return ret0
}

func (_mr *_MockReporterRecorder) AllKnownErrors() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllKnownErrors")
}

func (_m *MockReporter) Notify(ctx context.Context, notification *keybase1.FSNotification) {
	_m.ctrl.Call(_m, "Notify", ctx, notification)
}

func (_mr *_MockReporterRecorder) Notify(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Notify", arg0, arg1)
}

func (_m *MockReporter) NotifySyncStatus(ctx context.Context, status *keybase1.FSPathSyncStatus) {
	_m.ctrl.Call(_m, "NotifySyncStatus", ctx, status)
}

func (_mr *_MockReporterRecorder) NotifySyncStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifySyncStatus", arg0, arg1)
}

func (_m *MockReporter) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockReporterRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of MDCache interface
type MockMDCache struct {
	ctrl     *gomock.Controller
	recorder *_MockMDCacheRecorder
}

// Recorder for MockMDCache (not exported)
type _MockMDCacheRecorder struct {
	mock *MockMDCache
}

func NewMockMDCache(ctrl *gomock.Controller) *MockMDCache {
	mock := &MockMDCache{ctrl: ctrl}
	mock.recorder = &_MockMDCacheRecorder{mock}
	return mock
}

func (_m *MockMDCache) EXPECT() *_MockMDCacheRecorder {
	return _m.recorder
}

func (_m *MockMDCache) Get(tlf tlf.ID, rev kbfsmd.Revision, bid BranchID) (ImmutableRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "Get", tlf, rev, bid)
	ret0, _ := ret[0].(ImmutableRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDCacheRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2)
}

func (_m *MockMDCache) Put(md ImmutableRootMetadata) error {
	ret := _m.ctrl.Call(_m, "Put", md)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDCacheRecorder) Put(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0)
}

func (_m *MockMDCache) Delete(tlf tlf.ID, rev kbfsmd.Revision, bid BranchID) {
	_m.ctrl.Call(_m, "Delete", tlf, rev, bid)
}

func (_mr *_MockMDCacheRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1, arg2)
}

func (_m *MockMDCache) Replace(newRmd ImmutableRootMetadata, oldBID BranchID) error {
	ret := _m.ctrl.Call(_m, "Replace", newRmd, oldBID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDCacheRecorder) Replace(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Replace", arg0, arg1)
}

// Mock of KeyCache interface
type MockKeyCache struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyCacheRecorder
}

// Recorder for MockKeyCache (not exported)
type _MockKeyCacheRecorder struct {
	mock *MockKeyCache
}

func NewMockKeyCache(ctrl *gomock.Controller) *MockKeyCache {
	mock := &MockKeyCache{ctrl: ctrl}
	mock.recorder = &_MockKeyCacheRecorder{mock}
	return mock
}

func (_m *MockKeyCache) EXPECT() *_MockKeyCacheRecorder {
	return _m.recorder
}

func (_m *MockKeyCache) GetTLFCryptKey(_param0 tlf.ID, _param1 KeyGen) (kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKey", _param0, _param1)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyCacheRecorder) GetTLFCryptKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKey", arg0, arg1)
}

func (_m *MockKeyCache) PutTLFCryptKey(_param0 tlf.ID, _param1 KeyGen, _param2 kbfscrypto.TLFCryptKey) error {
	ret := _m.ctrl.Call(_m, "PutTLFCryptKey", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyCacheRecorder) PutTLFCryptKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutTLFCryptKey", arg0, arg1, arg2)
}

// Mock of BlockCacheSimple interface
type MockBlockCacheSimple struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockCacheSimpleRecorder
}

// Recorder for MockBlockCacheSimple (not exported)
type _MockBlockCacheSimpleRecorder struct {
	mock *MockBlockCacheSimple
}

func NewMockBlockCacheSimple(ctrl *gomock.Controller) *MockBlockCacheSimple {
	mock := &MockBlockCacheSimple{ctrl: ctrl}
	mock.recorder = &_MockBlockCacheSimpleRecorder{mock}
	return mock
}

func (_m *MockBlockCacheSimple) EXPECT() *_MockBlockCacheSimpleRecorder {
	return _m.recorder
}

func (_m *MockBlockCacheSimple) Get(ptr BlockPointer) (Block, error) {
	ret := _m.ctrl.Call(_m, "Get", ptr)
	ret0, _ := ret[0].(Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockCacheSimpleRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockBlockCacheSimple) Put(ptr BlockPointer, tlf tlf.ID, block Block, lifetime BlockCacheLifetime) error {
	ret := _m.ctrl.Call(_m, "Put", ptr, tlf, block, lifetime)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockCacheSimpleRecorder) Put(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2, arg3)
}

// Mock of BlockCache interface
type MockBlockCache struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockCacheRecorder
}

// Recorder for MockBlockCache (not exported)
type _MockBlockCacheRecorder struct {
	mock *MockBlockCache
}

func NewMockBlockCache(ctrl *gomock.Controller) *MockBlockCache {
	mock := &MockBlockCache{ctrl: ctrl}
	mock.recorder = &_MockBlockCacheRecorder{mock}
	return mock
}

func (_m *MockBlockCache) EXPECT() *_MockBlockCacheRecorder {
	return _m.recorder
}

func (_m *MockBlockCache) Get(ptr BlockPointer) (Block, error) {
	ret := _m.ctrl.Call(_m, "Get", ptr)
	ret0, _ := ret[0].(Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockCacheRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockBlockCache) Put(ptr BlockPointer, tlf tlf.ID, block Block, lifetime BlockCacheLifetime) error {
	ret := _m.ctrl.Call(_m, "Put", ptr, tlf, block, lifetime)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) Put(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2, arg3)
}

func (_m *MockBlockCache) CheckForKnownPtr(tlf tlf.ID, block *FileBlock) (BlockPointer, error) {
	ret := _m.ctrl.Call(_m, "CheckForKnownPtr", tlf, block)
	ret0, _ := ret[0].(BlockPointer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockCacheRecorder) CheckForKnownPtr(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckForKnownPtr", arg0, arg1)
}

func (_m *MockBlockCache) DeleteTransient(ptr BlockPointer, tlf tlf.ID) error {
	ret := _m.ctrl.Call(_m, "DeleteTransient", ptr, tlf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) DeleteTransient(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteTransient", arg0, arg1)
}

func (_m *MockBlockCache) DeletePermanent(id kbfsblock.ID) error {
	ret := _m.ctrl.Call(_m, "DeletePermanent", id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) DeletePermanent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePermanent", arg0)
}

func (_m *MockBlockCache) DeleteKnownPtr(tlf tlf.ID, block *FileBlock) error {
	ret := _m.ctrl.Call(_m, "DeleteKnownPtr", tlf, block)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) DeleteKnownPtr(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteKnownPtr", arg0, arg1)
}

func (_m *MockBlockCache) GetWithPrefetch(ptr BlockPointer) (Block, bool, BlockCacheLifetime, error) {
	ret := _m.ctrl.Call(_m, "GetWithPrefetch", ptr)
	ret0, _ := ret[0].(Block)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(BlockCacheLifetime)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockBlockCacheRecorder) GetWithPrefetch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWithPrefetch", arg0)
}

func (_m *MockBlockCache) PutWithPrefetch(ptr BlockPointer, tlf tlf.ID, block Block, lifetime BlockCacheLifetime, hasPrefetched bool) error {
	ret := _m.ctrl.Call(_m, "PutWithPrefetch", ptr, tlf, block, lifetime, hasPrefetched)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) PutWithPrefetch(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutWithPrefetch", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockBlockCache) SetCleanBytesCapacity(capacity uint64) {
	_m.ctrl.Call(_m, "SetCleanBytesCapacity", capacity)
}

func (_mr *_MockBlockCacheRecorder) SetCleanBytesCapacity(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCleanBytesCapacity", arg0)
}

func (_m *MockBlockCache) GetCleanBytesCapacity() uint64 {
	ret := _m.ctrl.Call(_m, "GetCleanBytesCapacity")
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) GetCleanBytesCapacity() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCleanBytesCapacity")
}

// Mock of DirtyBlockCache interface
type MockDirtyBlockCache struct {
	ctrl     *gomock.Controller
	recorder *_MockDirtyBlockCacheRecorder
}

// Recorder for MockDirtyBlockCache (not exported)
type _MockDirtyBlockCacheRecorder struct {
	mock *MockDirtyBlockCache
}

func NewMockDirtyBlockCache(ctrl *gomock.Controller) *MockDirtyBlockCache {
	mock := &MockDirtyBlockCache{ctrl: ctrl}
	mock.recorder = &_MockDirtyBlockCacheRecorder{mock}
	return mock
}

func (_m *MockDirtyBlockCache) EXPECT() *_MockDirtyBlockCacheRecorder {
	return _m.recorder
}

func (_m *MockDirtyBlockCache) Get(tlfID tlf.ID, ptr BlockPointer, branch BranchName) (Block, error) {
	ret := _m.ctrl.Call(_m, "Get", tlfID, ptr, branch)
	ret0, _ := ret[0].(Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirtyBlockCacheRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2)
}

func (_m *MockDirtyBlockCache) Put(tlfID tlf.ID, ptr BlockPointer, branch BranchName, block Block) error {
	ret := _m.ctrl.Call(_m, "Put", tlfID, ptr, branch, block)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDirtyBlockCacheRecorder) Put(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2, arg3)
}

func (_m *MockDirtyBlockCache) Delete(tlfID tlf.ID, ptr BlockPointer, branch BranchName) error {
	ret := _m.ctrl.Call(_m, "Delete", tlfID, ptr, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDirtyBlockCacheRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1, arg2)
}

func (_m *MockDirtyBlockCache) IsDirty(tlfID tlf.ID, ptr BlockPointer, branch BranchName) bool {
	ret := _m.ctrl.Call(_m, "IsDirty", tlfID, ptr, branch)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockDirtyBlockCacheRecorder) IsDirty(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsDirty", arg0, arg1, arg2)
}

func (_m *MockDirtyBlockCache) IsAnyDirty(tlfID tlf.ID) bool {
	ret := _m.ctrl.Call(_m, "IsAnyDirty", tlfID)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockDirtyBlockCacheRecorder) IsAnyDirty(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsAnyDirty", arg0)
}

func (_m *MockDirtyBlockCache) RequestPermissionToDirty(ctx context.Context, tlfID tlf.ID, estimatedDirtyBytes int64) (DirtyPermChan, error) {
	ret := _m.ctrl.Call(_m, "RequestPermissionToDirty", ctx, tlfID, estimatedDirtyBytes)
	ret0, _ := ret[0].(DirtyPermChan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirtyBlockCacheRecorder) RequestPermissionToDirty(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RequestPermissionToDirty", arg0, arg1, arg2)
}

func (_m *MockDirtyBlockCache) UpdateUnsyncedBytes(tlfID tlf.ID, newUnsyncedBytes int64, wasSyncing bool) {
	_m.ctrl.Call(_m, "UpdateUnsyncedBytes", tlfID, newUnsyncedBytes, wasSyncing)
}

func (_mr *_MockDirtyBlockCacheRecorder) UpdateUnsyncedBytes(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateUnsyncedBytes", arg0, arg1, arg2)
}

func (_m *MockDirtyBlockCache) UpdateSyncingBytes(tlfID tlf.ID, size int64) {
	_m.ctrl.Call(_m, "UpdateSyncingBytes", tlfID, size)
}

func (_mr *_MockDirtyBlockCacheRecorder) UpdateSyncingBytes(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSyncingBytes", arg0, arg1)
}

func (_m *MockDirtyBlockCache) BlockSyncFinished(tlfID tlf.ID, size int64) {
	_m.ctrl.Call(_m, "BlockSyncFinished", tlfID, size)
}

func (_mr *_MockDirtyBlockCacheRecorder) BlockSyncFinished(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockSyncFinished", arg0, arg1)
}

func (_m *MockDirtyBlockCache) SyncFinished(tlfID tlf.ID, size int64) {
	_m.ctrl.Call(_m, "SyncFinished", tlfID, size)
}

func (_mr *_MockDirtyBlockCacheRecorder) SyncFinished(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SyncFinished", arg0, arg1)
}

func (_m *MockDirtyBlockCache) ShouldForceSync(tlfID tlf.ID) bool {
	ret := _m.ctrl.Call(_m, "ShouldForceSync", tlfID)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockDirtyBlockCacheRecorder) ShouldForceSync(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShouldForceSync", arg0)
}

func (_m *MockDirtyBlockCache) Shutdown() error {
	ret := _m.ctrl.Call(_m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDirtyBlockCacheRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of DiskBlockCache interface
type MockDiskBlockCache struct {
	ctrl     *gomock.Controller
	recorder *_MockDiskBlockCacheRecorder
}

// Recorder for MockDiskBlockCache (not exported)
type _MockDiskBlockCacheRecorder struct {
	mock *MockDiskBlockCache
}

func NewMockDiskBlockCache(ctrl *gomock.Controller) *MockDiskBlockCache {
	mock := &MockDiskBlockCache{ctrl: ctrl}
	mock.recorder = &_MockDiskBlockCacheRecorder{mock}
	return mock
}

func (_m *MockDiskBlockCache) EXPECT() *_MockDiskBlockCacheRecorder {
	return _m.recorder
}

func (_m *MockDiskBlockCache) Get(ctx context.Context, tlfID tlf.ID, blockID kbfsblock.ID) ([]byte, kbfscrypto.BlockCryptKeyServerHalf, bool, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, tlfID, blockID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(kbfscrypto.BlockCryptKeyServerHalf)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockDiskBlockCacheRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2)
}

func (_m *MockDiskBlockCache) Put(ctx context.Context, tlfID tlf.ID, blockID kbfsblock.ID, buf []byte, serverHalf kbfscrypto.BlockCryptKeyServerHalf) error {
	ret := _m.ctrl.Call(_m, "Put", ctx, tlfID, blockID, buf, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDiskBlockCacheRecorder) Put(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockDiskBlockCache) Delete(ctx context.Context, blockIDs []kbfsblock.ID) (int, int64, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, blockIDs)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockDiskBlockCacheRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}

func (_m *MockDiskBlockCache) UpdateMetadata(ctx context.Context, blockID kbfsblock.ID, hasPrefetched bool) error {
	ret := _m.ctrl.Call(_m, "UpdateMetadata", ctx, blockID, hasPrefetched)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDiskBlockCacheRecorder) UpdateMetadata(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateMetadata", arg0, arg1, arg2)
}

func (_m *MockDiskBlockCache) Size() int64 {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockDiskBlockCacheRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Size")
}

func (_m *MockDiskBlockCache) Status() *DiskBlockCacheStatus {
	ret := _m.ctrl.Call(_m, "Status")
	ret0, _ := ret[0].(*DiskBlockCacheStatus)
	return ret0
}

func (_mr *_MockDiskBlockCacheRecorder) Status() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Status")
}

func (_m *MockDiskBlockCache) Shutdown(ctx context.Context) {
	_m.ctrl.Call(_m, "Shutdown", ctx)
}

func (_mr *_MockDiskBlockCacheRecorder) Shutdown(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown", arg0)
}

// Mock of cryptoPure interface
type MockcryptoPure struct {
	ctrl     *gomock.Controller
	recorder *_MockcryptoPureRecorder
}

// Recorder for MockcryptoPure (not exported)
type _MockcryptoPureRecorder struct {
	mock *MockcryptoPure
}

func NewMockcryptoPure(ctrl *gomock.Controller) *MockcryptoPure {
	mock := &MockcryptoPure{ctrl: ctrl}
	mock.recorder = &_MockcryptoPureRecorder{mock}
	return mock
}

func (_m *MockcryptoPure) EXPECT() *_MockcryptoPureRecorder {
	return _m.recorder
}

func (_m *MockcryptoPure) MakeRandomTlfID(t tlf.Type) (tlf.ID, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomTlfID", t)
	ret0, _ := ret[0].(tlf.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakeRandomTlfID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomTlfID", arg0)
}

func (_m *MockcryptoPure) MakeRandomBranchID() (BranchID, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomBranchID")
	ret0, _ := ret[0].(BranchID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakeRandomBranchID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomBranchID")
}

func (_m *MockcryptoPure) MakeMerkleHash(md *RootMetadataSigned) (MerkleHash, error) {
	ret := _m.ctrl.Call(_m, "MakeMerkleHash", md)
	ret0, _ := ret[0].(MerkleHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakeMerkleHash(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeMerkleHash", arg0)
}

func (_m *MockcryptoPure) MakeTemporaryBlockID() (kbfsblock.ID, error) {
	ret := _m.ctrl.Call(_m, "MakeTemporaryBlockID")
	ret0, _ := ret[0].(kbfsblock.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakeTemporaryBlockID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeTemporaryBlockID")
}

func (_m *MockcryptoPure) MakeBlockRefNonce() (kbfsblock.RefNonce, error) {
	ret := _m.ctrl.Call(_m, "MakeBlockRefNonce")
	ret0, _ := ret[0].(kbfsblock.RefNonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakeBlockRefNonce() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeBlockRefNonce")
}

func (_m *MockcryptoPure) MakeRandomTLFEphemeralKeys() (kbfscrypto.TLFEphemeralPublicKey, kbfscrypto.TLFEphemeralPrivateKey, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomTLFEphemeralKeys")
	ret0, _ := ret[0].(kbfscrypto.TLFEphemeralPublicKey)
	ret1, _ := ret[1].(kbfscrypto.TLFEphemeralPrivateKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockcryptoPureRecorder) MakeRandomTLFEphemeralKeys() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomTLFEphemeralKeys")
}

func (_m *MockcryptoPure) MakeRandomTLFKeys() (kbfscrypto.TLFPublicKey, kbfscrypto.TLFPrivateKey, kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomTLFKeys")
	ret0, _ := ret[0].(kbfscrypto.TLFPublicKey)
	ret1, _ := ret[1].(kbfscrypto.TLFPrivateKey)
	ret2, _ := ret[2].(kbfscrypto.TLFCryptKey)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockcryptoPureRecorder) MakeRandomTLFKeys() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomTLFKeys")
}

func (_m *MockcryptoPure) MakeRandomTLFCryptKeyServerHalf() (kbfscrypto.TLFCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomTLFCryptKeyServerHalf")
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakeRandomTLFCryptKeyServerHalf() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomTLFCryptKeyServerHalf")
}

func (_m *MockcryptoPure) MakeRandomBlockCryptKeyServerHalf() (kbfscrypto.BlockCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomBlockCryptKeyServerHalf")
	ret0, _ := ret[0].(kbfscrypto.BlockCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakeRandomBlockCryptKeyServerHalf() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomBlockCryptKeyServerHalf")
}

func (_m *MockcryptoPure) EncryptTLFCryptKeyClientHalf(privateKey kbfscrypto.TLFEphemeralPrivateKey, publicKey kbfscrypto.CryptPublicKey, clientHalf kbfscrypto.TLFCryptKeyClientHalf) (EncryptedTLFCryptKeyClientHalf, error) {
	ret := _m.ctrl.Call(_m, "EncryptTLFCryptKeyClientHalf", privateKey, publicKey, clientHalf)
	ret0, _ := ret[0].(EncryptedTLFCryptKeyClientHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) EncryptTLFCryptKeyClientHalf(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptTLFCryptKeyClientHalf", arg0, arg1, arg2)
}

func (_m *MockcryptoPure) EncryptPrivateMetadata(pmd PrivateMetadata, key kbfscrypto.TLFCryptKey) (EncryptedPrivateMetadata, error) {
	ret := _m.ctrl.Call(_m, "EncryptPrivateMetadata", pmd, key)
	ret0, _ := ret[0].(EncryptedPrivateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) EncryptPrivateMetadata(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptPrivateMetadata", arg0, arg1)
}

func (_m *MockcryptoPure) DecryptPrivateMetadata(encryptedPMD EncryptedPrivateMetadata, key kbfscrypto.TLFCryptKey) (PrivateMetadata, error) {
	ret := _m.ctrl.Call(_m, "DecryptPrivateMetadata", encryptedPMD, key)
	ret0, _ := ret[0].(PrivateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) DecryptPrivateMetadata(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptPrivateMetadata", arg0, arg1)
}

func (_m *MockcryptoPure) EncryptBlock(block Block, key kbfscrypto.BlockCryptKey) (int, EncryptedBlock, error) {
	ret := _m.ctrl.Call(_m, "EncryptBlock", block, key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(EncryptedBlock)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockcryptoPureRecorder) EncryptBlock(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptBlock", arg0, arg1)
}

func (_m *MockcryptoPure) DecryptBlock(encryptedBlock EncryptedBlock, key kbfscrypto.BlockCryptKey, block Block) error {
	ret := _m.ctrl.Call(_m, "DecryptBlock", encryptedBlock, key, block)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockcryptoPureRecorder) DecryptBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptBlock", arg0, arg1, arg2)
}

func (_m *MockcryptoPure) GetTLFCryptKeyServerHalfID(user keybase1.UID, devicePubKey kbfscrypto.CryptPublicKey, serverHalf kbfscrypto.TLFCryptKeyServerHalf) (TLFCryptKeyServerHalfID, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyServerHalfID", user, devicePubKey, serverHalf)
	ret0, _ := ret[0].(TLFCryptKeyServerHalfID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) GetTLFCryptKeyServerHalfID(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyServerHalfID", arg0, arg1, arg2)
}

func (_m *MockcryptoPure) VerifyTLFCryptKeyServerHalfID(serverHalfID TLFCryptKeyServerHalfID, user keybase1.UID, devicePubKey kbfscrypto.CryptPublicKey, serverHalf kbfscrypto.TLFCryptKeyServerHalf) error {
	ret := _m.ctrl.Call(_m, "VerifyTLFCryptKeyServerHalfID", serverHalfID, user, devicePubKey, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockcryptoPureRecorder) VerifyTLFCryptKeyServerHalfID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VerifyTLFCryptKeyServerHalfID", arg0, arg1, arg2, arg3)
}

func (_m *MockcryptoPure) EncryptMerkleLeaf(leaf MerkleLeaf, pubKey kbfscrypto.TLFPublicKey, nonce *[24]byte, ePrivKey kbfscrypto.TLFEphemeralPrivateKey) (EncryptedMerkleLeaf, error) {
	ret := _m.ctrl.Call(_m, "EncryptMerkleLeaf", leaf, pubKey, nonce, ePrivKey)
	ret0, _ := ret[0].(EncryptedMerkleLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) EncryptMerkleLeaf(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptMerkleLeaf", arg0, arg1, arg2, arg3)
}

func (_m *MockcryptoPure) DecryptMerkleLeaf(encryptedLeaf EncryptedMerkleLeaf, privKey kbfscrypto.TLFPrivateKey, nonce *[24]byte, ePubKey kbfscrypto.TLFEphemeralPublicKey) (*MerkleLeaf, error) {
	ret := _m.ctrl.Call(_m, "DecryptMerkleLeaf", encryptedLeaf, privKey, nonce, ePubKey)
	ret0, _ := ret[0].(*MerkleLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) DecryptMerkleLeaf(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptMerkleLeaf", arg0, arg1, arg2, arg3)
}

func (_m *MockcryptoPure) MakeTLFWriterKeyBundleID(wkb TLFWriterKeyBundleV3) (TLFWriterKeyBundleID, error) {
	ret := _m.ctrl.Call(_m, "MakeTLFWriterKeyBundleID", wkb)
	ret0, _ := ret[0].(TLFWriterKeyBundleID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakeTLFWriterKeyBundleID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeTLFWriterKeyBundleID", arg0)
}

func (_m *MockcryptoPure) MakeTLFReaderKeyBundleID(rkb TLFReaderKeyBundleV3) (TLFReaderKeyBundleID, error) {
	ret := _m.ctrl.Call(_m, "MakeTLFReaderKeyBundleID", rkb)
	ret0, _ := ret[0].(TLFReaderKeyBundleID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakeTLFReaderKeyBundleID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeTLFReaderKeyBundleID", arg0)
}

func (_m *MockcryptoPure) EncryptTLFCryptKeys(oldKeys []kbfscrypto.TLFCryptKey, key kbfscrypto.TLFCryptKey) (EncryptedTLFCryptKeys, error) {
	ret := _m.ctrl.Call(_m, "EncryptTLFCryptKeys", oldKeys, key)
	ret0, _ := ret[0].(EncryptedTLFCryptKeys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) EncryptTLFCryptKeys(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptTLFCryptKeys", arg0, arg1)
}

func (_m *MockcryptoPure) DecryptTLFCryptKeys(encKeys EncryptedTLFCryptKeys, key kbfscrypto.TLFCryptKey) ([]kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "DecryptTLFCryptKeys", encKeys, key)
	ret0, _ := ret[0].([]kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) DecryptTLFCryptKeys(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptTLFCryptKeys", arg0, arg1)
}

// Mock of Crypto interface
type MockCrypto struct {
	ctrl     *gomock.Controller
	recorder *_MockCryptoRecorder
}

// Recorder for MockCrypto (not exported)
type _MockCryptoRecorder struct {
	mock *MockCrypto
}

func NewMockCrypto(ctrl *gomock.Controller) *MockCrypto {
	mock := &MockCrypto{ctrl: ctrl}
	mock.recorder = &_MockCryptoRecorder{mock}
	return mock
}

func (_m *MockCrypto) EXPECT() *_MockCryptoRecorder {
	return _m.recorder
}

func (_m *MockCrypto) MakeRandomTlfID(t tlf.Type) (tlf.ID, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomTlfID", t)
	ret0, _ := ret[0].(tlf.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeRandomTlfID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomTlfID", arg0)
}

func (_m *MockCrypto) MakeRandomBranchID() (BranchID, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomBranchID")
	ret0, _ := ret[0].(BranchID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeRandomBranchID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomBranchID")
}

func (_m *MockCrypto) MakeMerkleHash(md *RootMetadataSigned) (MerkleHash, error) {
	ret := _m.ctrl.Call(_m, "MakeMerkleHash", md)
	ret0, _ := ret[0].(MerkleHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeMerkleHash(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeMerkleHash", arg0)
}

func (_m *MockCrypto) MakeTemporaryBlockID() (kbfsblock.ID, error) {
	ret := _m.ctrl.Call(_m, "MakeTemporaryBlockID")
	ret0, _ := ret[0].(kbfsblock.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeTemporaryBlockID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeTemporaryBlockID")
}

func (_m *MockCrypto) MakeBlockRefNonce() (kbfsblock.RefNonce, error) {
	ret := _m.ctrl.Call(_m, "MakeBlockRefNonce")
	ret0, _ := ret[0].(kbfsblock.RefNonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeBlockRefNonce() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeBlockRefNonce")
}

func (_m *MockCrypto) MakeRandomTLFEphemeralKeys() (kbfscrypto.TLFEphemeralPublicKey, kbfscrypto.TLFEphemeralPrivateKey, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomTLFEphemeralKeys")
	ret0, _ := ret[0].(kbfscrypto.TLFEphemeralPublicKey)
	ret1, _ := ret[1].(kbfscrypto.TLFEphemeralPrivateKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockCryptoRecorder) MakeRandomTLFEphemeralKeys() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomTLFEphemeralKeys")
}

func (_m *MockCrypto) MakeRandomTLFKeys() (kbfscrypto.TLFPublicKey, kbfscrypto.TLFPrivateKey, kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomTLFKeys")
	ret0, _ := ret[0].(kbfscrypto.TLFPublicKey)
	ret1, _ := ret[1].(kbfscrypto.TLFPrivateKey)
	ret2, _ := ret[2].(kbfscrypto.TLFCryptKey)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockCryptoRecorder) MakeRandomTLFKeys() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomTLFKeys")
}

func (_m *MockCrypto) MakeRandomTLFCryptKeyServerHalf() (kbfscrypto.TLFCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomTLFCryptKeyServerHalf")
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeRandomTLFCryptKeyServerHalf() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomTLFCryptKeyServerHalf")
}

func (_m *MockCrypto) MakeRandomBlockCryptKeyServerHalf() (kbfscrypto.BlockCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomBlockCryptKeyServerHalf")
	ret0, _ := ret[0].(kbfscrypto.BlockCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeRandomBlockCryptKeyServerHalf() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomBlockCryptKeyServerHalf")
}

func (_m *MockCrypto) EncryptTLFCryptKeyClientHalf(privateKey kbfscrypto.TLFEphemeralPrivateKey, publicKey kbfscrypto.CryptPublicKey, clientHalf kbfscrypto.TLFCryptKeyClientHalf) (EncryptedTLFCryptKeyClientHalf, error) {
	ret := _m.ctrl.Call(_m, "EncryptTLFCryptKeyClientHalf", privateKey, publicKey, clientHalf)
	ret0, _ := ret[0].(EncryptedTLFCryptKeyClientHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) EncryptTLFCryptKeyClientHalf(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptTLFCryptKeyClientHalf", arg0, arg1, arg2)
}

func (_m *MockCrypto) EncryptPrivateMetadata(pmd PrivateMetadata, key kbfscrypto.TLFCryptKey) (EncryptedPrivateMetadata, error) {
	ret := _m.ctrl.Call(_m, "EncryptPrivateMetadata", pmd, key)
	ret0, _ := ret[0].(EncryptedPrivateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) EncryptPrivateMetadata(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptPrivateMetadata", arg0, arg1)
}

func (_m *MockCrypto) DecryptPrivateMetadata(encryptedPMD EncryptedPrivateMetadata, key kbfscrypto.TLFCryptKey) (PrivateMetadata, error) {
	ret := _m.ctrl.Call(_m, "DecryptPrivateMetadata", encryptedPMD, key)
	ret0, _ := ret[0].(PrivateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) DecryptPrivateMetadata(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptPrivateMetadata", arg0, arg1)
}

func (_m *MockCrypto) EncryptBlock(block Block, key kbfscrypto.BlockCryptKey) (int, EncryptedBlock, error) {
	ret := _m.ctrl.Call(_m, "EncryptBlock", block, key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(EncryptedBlock)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockCryptoRecorder) EncryptBlock(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptBlock", arg0, arg1)
}

func (_m *MockCrypto) DecryptBlock(encryptedBlock EncryptedBlock, key kbfscrypto.BlockCryptKey, block Block) error {
	ret := _m.ctrl.Call(_m, "DecryptBlock", encryptedBlock, key, block)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCryptoRecorder) DecryptBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptBlock", arg0, arg1, arg2)
}

func (_m *MockCrypto) GetTLFCryptKeyServerHalfID(user keybase1.UID, devicePubKey kbfscrypto.CryptPublicKey, serverHalf kbfscrypto.TLFCryptKeyServerHalf) (TLFCryptKeyServerHalfID, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyServerHalfID", user, devicePubKey, serverHalf)
	ret0, _ := ret[0].(TLFCryptKeyServerHalfID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) GetTLFCryptKeyServerHalfID(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyServerHalfID", arg0, arg1, arg2)
}

func (_m *MockCrypto) VerifyTLFCryptKeyServerHalfID(serverHalfID TLFCryptKeyServerHalfID, user keybase1.UID, devicePubKey kbfscrypto.CryptPublicKey, serverHalf kbfscrypto.TLFCryptKeyServerHalf) error {
	ret := _m.ctrl.Call(_m, "VerifyTLFCryptKeyServerHalfID", serverHalfID, user, devicePubKey, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCryptoRecorder) VerifyTLFCryptKeyServerHalfID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VerifyTLFCryptKeyServerHalfID", arg0, arg1, arg2, arg3)
}

func (_m *MockCrypto) EncryptMerkleLeaf(leaf MerkleLeaf, pubKey kbfscrypto.TLFPublicKey, nonce *[24]byte, ePrivKey kbfscrypto.TLFEphemeralPrivateKey) (EncryptedMerkleLeaf, error) {
	ret := _m.ctrl.Call(_m, "EncryptMerkleLeaf", leaf, pubKey, nonce, ePrivKey)
	ret0, _ := ret[0].(EncryptedMerkleLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) EncryptMerkleLeaf(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptMerkleLeaf", arg0, arg1, arg2, arg3)
}

func (_m *MockCrypto) DecryptMerkleLeaf(encryptedLeaf EncryptedMerkleLeaf, privKey kbfscrypto.TLFPrivateKey, nonce *[24]byte, ePubKey kbfscrypto.TLFEphemeralPublicKey) (*MerkleLeaf, error) {
	ret := _m.ctrl.Call(_m, "DecryptMerkleLeaf", encryptedLeaf, privKey, nonce, ePubKey)
	ret0, _ := ret[0].(*MerkleLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) DecryptMerkleLeaf(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptMerkleLeaf", arg0, arg1, arg2, arg3)
}

func (_m *MockCrypto) MakeTLFWriterKeyBundleID(wkb TLFWriterKeyBundleV3) (TLFWriterKeyBundleID, error) {
	ret := _m.ctrl.Call(_m, "MakeTLFWriterKeyBundleID", wkb)
	ret0, _ := ret[0].(TLFWriterKeyBundleID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeTLFWriterKeyBundleID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeTLFWriterKeyBundleID", arg0)
}

func (_m *MockCrypto) MakeTLFReaderKeyBundleID(rkb TLFReaderKeyBundleV3) (TLFReaderKeyBundleID, error) {
	ret := _m.ctrl.Call(_m, "MakeTLFReaderKeyBundleID", rkb)
	ret0, _ := ret[0].(TLFReaderKeyBundleID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeTLFReaderKeyBundleID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeTLFReaderKeyBundleID", arg0)
}

func (_m *MockCrypto) EncryptTLFCryptKeys(oldKeys []kbfscrypto.TLFCryptKey, key kbfscrypto.TLFCryptKey) (EncryptedTLFCryptKeys, error) {
	ret := _m.ctrl.Call(_m, "EncryptTLFCryptKeys", oldKeys, key)
	ret0, _ := ret[0].(EncryptedTLFCryptKeys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) EncryptTLFCryptKeys(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptTLFCryptKeys", arg0, arg1)
}

func (_m *MockCrypto) DecryptTLFCryptKeys(encKeys EncryptedTLFCryptKeys, key kbfscrypto.TLFCryptKey) ([]kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "DecryptTLFCryptKeys", encKeys, key)
	ret0, _ := ret[0].([]kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) DecryptTLFCryptKeys(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptTLFCryptKeys", arg0, arg1)
}

func (_m *MockCrypto) Sign(_param0 context.Context, _param1 []byte) (kbfscrypto.SignatureInfo, error) {
	ret := _m.ctrl.Call(_m, "Sign", _param0, _param1)
	ret0, _ := ret[0].(kbfscrypto.SignatureInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) Sign(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Sign", arg0, arg1)
}

func (_m *MockCrypto) SignForKBFS(_param0 context.Context, _param1 []byte) (kbfscrypto.SignatureInfo, error) {
	ret := _m.ctrl.Call(_m, "SignForKBFS", _param0, _param1)
	ret0, _ := ret[0].(kbfscrypto.SignatureInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) SignForKBFS(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SignForKBFS", arg0, arg1)
}

func (_m *MockCrypto) SignToString(_param0 context.Context, _param1 []byte) (string, error) {
	ret := _m.ctrl.Call(_m, "SignToString", _param0, _param1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) SignToString(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SignToString", arg0, arg1)
}

func (_m *MockCrypto) DecryptTLFCryptKeyClientHalf(ctx context.Context, publicKey kbfscrypto.TLFEphemeralPublicKey, encryptedClientHalf EncryptedTLFCryptKeyClientHalf) (kbfscrypto.TLFCryptKeyClientHalf, error) {
	ret := _m.ctrl.Call(_m, "DecryptTLFCryptKeyClientHalf", ctx, publicKey, encryptedClientHalf)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKeyClientHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) DecryptTLFCryptKeyClientHalf(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptTLFCryptKeyClientHalf", arg0, arg1, arg2)
}

func (_m *MockCrypto) DecryptTLFCryptKeyClientHalfAny(ctx context.Context, keys []EncryptedTLFCryptKeyClientAndEphemeral, promptPaper bool) (kbfscrypto.TLFCryptKeyClientHalf, int, error) {
	ret := _m.ctrl.Call(_m, "DecryptTLFCryptKeyClientHalfAny", ctx, keys, promptPaper)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKeyClientHalf)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockCryptoRecorder) DecryptTLFCryptKeyClientHalfAny(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptTLFCryptKeyClientHalfAny", arg0, arg1, arg2)
}

func (_m *MockCrypto) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockCryptoRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of MDOps interface
type MockMDOps struct {
	ctrl     *gomock.Controller
	recorder *_MockMDOpsRecorder
}

// Recorder for MockMDOps (not exported)
type _MockMDOpsRecorder struct {
	mock *MockMDOps
}

func NewMockMDOps(ctrl *gomock.Controller) *MockMDOps {
	mock := &MockMDOps{ctrl: ctrl}
	mock.recorder = &_MockMDOpsRecorder{mock}
	return mock
}

func (_m *MockMDOps) EXPECT() *_MockMDOpsRecorder {
	return _m.recorder
}

func (_m *MockMDOps) GetForHandle(ctx context.Context, handle *TlfHandle, mStatus MergeStatus) (tlf.ID, ImmutableRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetForHandle", ctx, handle, mStatus)
	ret0, _ := ret[0].(tlf.ID)
	ret1, _ := ret[1].(ImmutableRootMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockMDOpsRecorder) GetForHandle(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetForHandle", arg0, arg1, arg2)
}

func (_m *MockMDOps) GetForTLF(ctx context.Context, id tlf.ID) (ImmutableRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetForTLF", ctx, id)
	ret0, _ := ret[0].(ImmutableRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetForTLF(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetForTLF", arg0, arg1)
}

func (_m *MockMDOps) GetUnmergedForTLF(ctx context.Context, id tlf.ID, bid BranchID) (ImmutableRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetUnmergedForTLF", ctx, id, bid)
	ret0, _ := ret[0].(ImmutableRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetUnmergedForTLF(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUnmergedForTLF", arg0, arg1, arg2)
}

func (_m *MockMDOps) GetRange(ctx context.Context, id tlf.ID, start kbfsmd.Revision, stop kbfsmd.Revision) ([]ImmutableRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetRange", ctx, id, start, stop)
	ret0, _ := ret[0].([]ImmutableRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetRange(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRange", arg0, arg1, arg2, arg3)
}

func (_m *MockMDOps) GetUnmergedRange(ctx context.Context, id tlf.ID, bid BranchID, start kbfsmd.Revision, stop kbfsmd.Revision) ([]ImmutableRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetUnmergedRange", ctx, id, bid, start, stop)
	ret0, _ := ret[0].([]ImmutableRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetUnmergedRange(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUnmergedRange", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockMDOps) Put(ctx context.Context, rmd *RootMetadata, verifyingKey kbfscrypto.VerifyingKey) (ImmutableRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "Put", ctx, rmd, verifyingKey)
	ret0, _ := ret[0].(ImmutableRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2)
}

func (_m *MockMDOps) PutUnmerged(ctx context.Context, rmd *RootMetadata, verifyingKey kbfscrypto.VerifyingKey) (ImmutableRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "PutUnmerged", ctx, rmd, verifyingKey)
	ret0, _ := ret[0].(ImmutableRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) PutUnmerged(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutUnmerged", arg0, arg1, arg2)
}

func (_m *MockMDOps) PruneBranch(ctx context.Context, id tlf.ID, bid BranchID) error {
	ret := _m.ctrl.Call(_m, "PruneBranch", ctx, id, bid)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDOpsRecorder) PruneBranch(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PruneBranch", arg0, arg1, arg2)
}

func (_m *MockMDOps) ResolveBranch(ctx context.Context, id tlf.ID, bid BranchID, blocksToDelete []kbfsblock.ID, rmd *RootMetadata, verifyingKey kbfscrypto.VerifyingKey) (ImmutableRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "ResolveBranch", ctx, id, bid, blocksToDelete, rmd, verifyingKey)
	ret0, _ := ret[0].(ImmutableRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) ResolveBranch(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResolveBranch", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockMDOps) GetLatestHandleForTLF(ctx context.Context, id tlf.ID) (tlf.Handle, error) {
	ret := _m.ctrl.Call(_m, "GetLatestHandleForTLF", ctx, id)
	ret0, _ := ret[0].(tlf.Handle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetLatestHandleForTLF(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLatestHandleForTLF", arg0, arg1)
}

// Mock of KeyOps interface
type MockKeyOps struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyOpsRecorder
}

// Recorder for MockKeyOps (not exported)
type _MockKeyOpsRecorder struct {
	mock *MockKeyOps
}

func NewMockKeyOps(ctrl *gomock.Controller) *MockKeyOps {
	mock := &MockKeyOps{ctrl: ctrl}
	mock.recorder = &_MockKeyOpsRecorder{mock}
	return mock
}

func (_m *MockKeyOps) EXPECT() *_MockKeyOpsRecorder {
	return _m.recorder
}

func (_m *MockKeyOps) GetTLFCryptKeyServerHalf(ctx context.Context, serverHalfID TLFCryptKeyServerHalfID, cryptPublicKey kbfscrypto.CryptPublicKey) (kbfscrypto.TLFCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyServerHalf", ctx, serverHalfID, cryptPublicKey)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyOpsRecorder) GetTLFCryptKeyServerHalf(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyServerHalf", arg0, arg1, arg2)
}

func (_m *MockKeyOps) PutTLFCryptKeyServerHalves(ctx context.Context, keyServerHalves UserDeviceKeyServerHalves) error {
	ret := _m.ctrl.Call(_m, "PutTLFCryptKeyServerHalves", ctx, keyServerHalves)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyOpsRecorder) PutTLFCryptKeyServerHalves(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutTLFCryptKeyServerHalves", arg0, arg1)
}

func (_m *MockKeyOps) DeleteTLFCryptKeyServerHalf(ctx context.Context, uid keybase1.UID, key kbfscrypto.CryptPublicKey, serverHalfID TLFCryptKeyServerHalfID) error {
	ret := _m.ctrl.Call(_m, "DeleteTLFCryptKeyServerHalf", ctx, uid, key, serverHalfID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyOpsRecorder) DeleteTLFCryptKeyServerHalf(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteTLFCryptKeyServerHalf", arg0, arg1, arg2, arg3)
}

// Mock of Prefetcher interface
type MockPrefetcher struct {
	ctrl     *gomock.Controller
	recorder *_MockPrefetcherRecorder
}

// Recorder for MockPrefetcher (not exported)
type _MockPrefetcherRecorder struct {
	mock *MockPrefetcher
}

func NewMockPrefetcher(ctrl *gomock.Controller) *MockPrefetcher {
	mock := &MockPrefetcher{ctrl: ctrl}
	mock.recorder = &_MockPrefetcherRecorder{mock}
	return mock
}

func (_m *MockPrefetcher) EXPECT() *_MockPrefetcherRecorder {
	return _m.recorder
}

func (_m *MockPrefetcher) PrefetchBlock(block Block, blockPtr BlockPointer, kmd KeyMetadata, priority int) error {
	ret := _m.ctrl.Call(_m, "PrefetchBlock", block, blockPtr, kmd, priority)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPrefetcherRecorder) PrefetchBlock(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PrefetchBlock", arg0, arg1, arg2, arg3)
}

func (_m *MockPrefetcher) PrefetchAfterBlockRetrieved(b Block, blockPtr BlockPointer, kmd KeyMetadata) {
	_m.ctrl.Call(_m, "PrefetchAfterBlockRetrieved", b, blockPtr, kmd)
}

func (_mr *_MockPrefetcherRecorder) PrefetchAfterBlockRetrieved(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PrefetchAfterBlockRetrieved", arg0, arg1, arg2)
}

func (_m *MockPrefetcher) Shutdown() <-chan struct{} {
	ret := _m.ctrl.Call(_m, "Shutdown")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

func (_mr *_MockPrefetcherRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of BlockOps interface
type MockBlockOps struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockOpsRecorder
}

// Recorder for MockBlockOps (not exported)
type _MockBlockOpsRecorder struct {
	mock *MockBlockOps
}

func NewMockBlockOps(ctrl *gomock.Controller) *MockBlockOps {
	mock := &MockBlockOps{ctrl: ctrl}
	mock.recorder = &_MockBlockOpsRecorder{mock}
	return mock
}

func (_m *MockBlockOps) EXPECT() *_MockBlockOpsRecorder {
	return _m.recorder
}

func (_m *MockBlockOps) Get(ctx context.Context, kmd KeyMetadata, blockPtr BlockPointer, block Block, cacheLifetime BlockCacheLifetime) error {
	ret := _m.ctrl.Call(_m, "Get", ctx, kmd, blockPtr, block, cacheLifetime)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockOpsRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockBlockOps) GetEncodedSize(ctx context.Context, kmd KeyMetadata, blockPtr BlockPointer) (uint32, error) {
	ret := _m.ctrl.Call(_m, "GetEncodedSize", ctx, kmd, blockPtr)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockOpsRecorder) GetEncodedSize(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEncodedSize", arg0, arg1, arg2)
}

func (_m *MockBlockOps) Ready(ctx context.Context, kmd KeyMetadata, block Block) (kbfsblock.ID, int, ReadyBlockData, error) {
	ret := _m.ctrl.Call(_m, "Ready", ctx, kmd, block)
	ret0, _ := ret[0].(kbfsblock.ID)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(ReadyBlockData)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockBlockOpsRecorder) Ready(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ready", arg0, arg1, arg2)
}

func (_m *MockBlockOps) Delete(ctx context.Context, tlfID tlf.ID, ptrs []BlockPointer) (map[kbfsblock.ID]int, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, tlfID, ptrs)
	ret0, _ := ret[0].(map[kbfsblock.ID]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockOpsRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1, arg2)
}

func (_m *MockBlockOps) Archive(ctx context.Context, tlfID tlf.ID, ptrs []BlockPointer) error {
	ret := _m.ctrl.Call(_m, "Archive", ctx, tlfID, ptrs)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockOpsRecorder) Archive(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Archive", arg0, arg1, arg2)
}

func (_m *MockBlockOps) TogglePrefetcher(ctx context.Context, enable bool) error {
	ret := _m.ctrl.Call(_m, "TogglePrefetcher", ctx, enable)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockOpsRecorder) TogglePrefetcher(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TogglePrefetcher", arg0, arg1)
}

func (_m *MockBlockOps) BlockRetriever() BlockRetriever {
	ret := _m.ctrl.Call(_m, "BlockRetriever")
	ret0, _ := ret[0].(BlockRetriever)
	return ret0
}

func (_mr *_MockBlockOpsRecorder) BlockRetriever() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockRetriever")
}

func (_m *MockBlockOps) Prefetcher() Prefetcher {
	ret := _m.ctrl.Call(_m, "Prefetcher")
	ret0, _ := ret[0].(Prefetcher)
	return ret0
}

func (_mr *_MockBlockOpsRecorder) Prefetcher() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Prefetcher")
}

func (_m *MockBlockOps) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockBlockOpsRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of authTokenRefreshHandler interface
type MockauthTokenRefreshHandler struct {
	ctrl     *gomock.Controller
	recorder *_MockauthTokenRefreshHandlerRecorder
}

// Recorder for MockauthTokenRefreshHandler (not exported)
type _MockauthTokenRefreshHandlerRecorder struct {
	mock *MockauthTokenRefreshHandler
}

func NewMockauthTokenRefreshHandler(ctrl *gomock.Controller) *MockauthTokenRefreshHandler {
	mock := &MockauthTokenRefreshHandler{ctrl: ctrl}
	mock.recorder = &_MockauthTokenRefreshHandlerRecorder{mock}
	return mock
}

func (_m *MockauthTokenRefreshHandler) EXPECT() *_MockauthTokenRefreshHandlerRecorder {
	return _m.recorder
}

func (_m *MockauthTokenRefreshHandler) RefreshAuthToken(_param0 context.Context) {
	_m.ctrl.Call(_m, "RefreshAuthToken", _param0)
}

func (_mr *_MockauthTokenRefreshHandlerRecorder) RefreshAuthToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RefreshAuthToken", arg0)
}

// Mock of MDServer interface
type MockMDServer struct {
	ctrl     *gomock.Controller
	recorder *_MockMDServerRecorder
}

// Recorder for MockMDServer (not exported)
type _MockMDServerRecorder struct {
	mock *MockMDServer
}

func NewMockMDServer(ctrl *gomock.Controller) *MockMDServer {
	mock := &MockMDServer{ctrl: ctrl}
	mock.recorder = &_MockMDServerRecorder{mock}
	return mock
}

func (_m *MockMDServer) EXPECT() *_MockMDServerRecorder {
	return _m.recorder
}

func (_m *MockMDServer) RefreshAuthToken(_param0 context.Context) {
	_m.ctrl.Call(_m, "RefreshAuthToken", _param0)
}

func (_mr *_MockMDServerRecorder) RefreshAuthToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RefreshAuthToken", arg0)
}

func (_m *MockMDServer) GetForHandle(ctx context.Context, handle tlf.Handle, mStatus MergeStatus) (tlf.ID, *RootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "GetForHandle", ctx, handle, mStatus)
	ret0, _ := ret[0].(tlf.ID)
	ret1, _ := ret[1].(*RootMetadataSigned)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockMDServerRecorder) GetForHandle(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetForHandle", arg0, arg1, arg2)
}

func (_m *MockMDServer) GetForTLF(ctx context.Context, id tlf.ID, bid BranchID, mStatus MergeStatus) (*RootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "GetForTLF", ctx, id, bid, mStatus)
	ret0, _ := ret[0].(*RootMetadataSigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) GetForTLF(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetForTLF", arg0, arg1, arg2, arg3)
}

func (_m *MockMDServer) GetRange(ctx context.Context, id tlf.ID, bid BranchID, mStatus MergeStatus, start kbfsmd.Revision, stop kbfsmd.Revision) ([]*RootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "GetRange", ctx, id, bid, mStatus, start, stop)
	ret0, _ := ret[0].([]*RootMetadataSigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) GetRange(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRange", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockMDServer) Put(ctx context.Context, rmds *RootMetadataSigned, extra ExtraMetadata) error {
	ret := _m.ctrl.Call(_m, "Put", ctx, rmds, extra)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDServerRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2)
}

func (_m *MockMDServer) PruneBranch(ctx context.Context, id tlf.ID, bid BranchID) error {
	ret := _m.ctrl.Call(_m, "PruneBranch", ctx, id, bid)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDServerRecorder) PruneBranch(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PruneBranch", arg0, arg1, arg2)
}

func (_m *MockMDServer) RegisterForUpdate(ctx context.Context, id tlf.ID, currHead kbfsmd.Revision) (<-chan error, error) {
	ret := _m.ctrl.Call(_m, "RegisterForUpdate", ctx, id, currHead)
	ret0, _ := ret[0].(<-chan error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) RegisterForUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterForUpdate", arg0, arg1, arg2)
}

func (_m *MockMDServer) CancelRegistration(ctx context.Context, id tlf.ID) {
	_m.ctrl.Call(_m, "CancelRegistration", ctx, id)
}

func (_mr *_MockMDServerRecorder) CancelRegistration(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelRegistration", arg0, arg1)
}

func (_m *MockMDServer) CheckForRekeys(ctx context.Context) <-chan error {
	ret := _m.ctrl.Call(_m, "CheckForRekeys", ctx)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

func (_mr *_MockMDServerRecorder) CheckForRekeys(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckForRekeys", arg0)
}

func (_m *MockMDServer) TruncateLock(ctx context.Context, id tlf.ID) (bool, error) {
	ret := _m.ctrl.Call(_m, "TruncateLock", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) TruncateLock(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TruncateLock", arg0, arg1)
}

func (_m *MockMDServer) TruncateUnlock(ctx context.Context, id tlf.ID) (bool, error) {
	ret := _m.ctrl.Call(_m, "TruncateUnlock", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) TruncateUnlock(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TruncateUnlock", arg0, arg1)
}

func (_m *MockMDServer) DisableRekeyUpdatesForTesting() {
	_m.ctrl.Call(_m, "DisableRekeyUpdatesForTesting")
}

func (_mr *_MockMDServerRecorder) DisableRekeyUpdatesForTesting() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DisableRekeyUpdatesForTesting")
}

func (_m *MockMDServer) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockMDServerRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

func (_m *MockMDServer) IsConnected() bool {
	ret := _m.ctrl.Call(_m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockMDServerRecorder) IsConnected() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsConnected")
}

func (_m *MockMDServer) GetLatestHandleForTLF(ctx context.Context, id tlf.ID) (tlf.Handle, error) {
	ret := _m.ctrl.Call(_m, "GetLatestHandleForTLF", ctx, id)
	ret0, _ := ret[0].(tlf.Handle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) GetLatestHandleForTLF(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLatestHandleForTLF", arg0, arg1)
}

func (_m *MockMDServer) OffsetFromServerTime() (time.Duration, bool) {
	ret := _m.ctrl.Call(_m, "OffsetFromServerTime")
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) OffsetFromServerTime() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OffsetFromServerTime")
}

func (_m *MockMDServer) GetKeyBundles(ctx context.Context, tlfID tlf.ID, wkbID TLFWriterKeyBundleID, rkbID TLFReaderKeyBundleID) (*TLFWriterKeyBundleV3, *TLFReaderKeyBundleV3, error) {
	ret := _m.ctrl.Call(_m, "GetKeyBundles", ctx, tlfID, wkbID, rkbID)
	ret0, _ := ret[0].(*TLFWriterKeyBundleV3)
	ret1, _ := ret[1].(*TLFReaderKeyBundleV3)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockMDServerRecorder) GetKeyBundles(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetKeyBundles", arg0, arg1, arg2, arg3)
}

func (_m *MockMDServer) CheckReachability(ctx context.Context) {
	_m.ctrl.Call(_m, "CheckReachability", ctx)
}

func (_mr *_MockMDServerRecorder) CheckReachability(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckReachability", arg0)
}

func (_m *MockMDServer) FastForwardBackoff() {
	_m.ctrl.Call(_m, "FastForwardBackoff")
}

func (_mr *_MockMDServerRecorder) FastForwardBackoff() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FastForwardBackoff")
}

// Mock of mdServerLocal interface
type MockmdServerLocal struct {
	ctrl     *gomock.Controller
	recorder *_MockmdServerLocalRecorder
}

// Recorder for MockmdServerLocal (not exported)
type _MockmdServerLocalRecorder struct {
	mock *MockmdServerLocal
}

func NewMockmdServerLocal(ctrl *gomock.Controller) *MockmdServerLocal {
	mock := &MockmdServerLocal{ctrl: ctrl}
	mock.recorder = &_MockmdServerLocalRecorder{mock}
	return mock
}

func (_m *MockmdServerLocal) EXPECT() *_MockmdServerLocalRecorder {
	return _m.recorder
}

func (_m *MockmdServerLocal) RefreshAuthToken(_param0 context.Context) {
	_m.ctrl.Call(_m, "RefreshAuthToken", _param0)
}

func (_mr *_MockmdServerLocalRecorder) RefreshAuthToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RefreshAuthToken", arg0)
}

func (_m *MockmdServerLocal) GetForHandle(ctx context.Context, handle tlf.Handle, mStatus MergeStatus) (tlf.ID, *RootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "GetForHandle", ctx, handle, mStatus)
	ret0, _ := ret[0].(tlf.ID)
	ret1, _ := ret[1].(*RootMetadataSigned)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockmdServerLocalRecorder) GetForHandle(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetForHandle", arg0, arg1, arg2)
}

func (_m *MockmdServerLocal) GetForTLF(ctx context.Context, id tlf.ID, bid BranchID, mStatus MergeStatus) (*RootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "GetForTLF", ctx, id, bid, mStatus)
	ret0, _ := ret[0].(*RootMetadataSigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockmdServerLocalRecorder) GetForTLF(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetForTLF", arg0, arg1, arg2, arg3)
}

func (_m *MockmdServerLocal) GetRange(ctx context.Context, id tlf.ID, bid BranchID, mStatus MergeStatus, start kbfsmd.Revision, stop kbfsmd.Revision) ([]*RootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "GetRange", ctx, id, bid, mStatus, start, stop)
	ret0, _ := ret[0].([]*RootMetadataSigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockmdServerLocalRecorder) GetRange(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRange", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockmdServerLocal) Put(ctx context.Context, rmds *RootMetadataSigned, extra ExtraMetadata) error {
	ret := _m.ctrl.Call(_m, "Put", ctx, rmds, extra)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockmdServerLocalRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2)
}

func (_m *MockmdServerLocal) PruneBranch(ctx context.Context, id tlf.ID, bid BranchID) error {
	ret := _m.ctrl.Call(_m, "PruneBranch", ctx, id, bid)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockmdServerLocalRecorder) PruneBranch(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PruneBranch", arg0, arg1, arg2)
}

func (_m *MockmdServerLocal) RegisterForUpdate(ctx context.Context, id tlf.ID, currHead kbfsmd.Revision) (<-chan error, error) {
	ret := _m.ctrl.Call(_m, "RegisterForUpdate", ctx, id, currHead)
	ret0, _ := ret[0].(<-chan error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockmdServerLocalRecorder) RegisterForUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterForUpdate", arg0, arg1, arg2)
}

func (_m *MockmdServerLocal) CancelRegistration(ctx context.Context, id tlf.ID) {
	_m.ctrl.Call(_m, "CancelRegistration", ctx, id)
}

func (_mr *_MockmdServerLocalRecorder) CancelRegistration(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelRegistration", arg0, arg1)
}

func (_m *MockmdServerLocal) CheckForRekeys(ctx context.Context) <-chan error {
	ret := _m.ctrl.Call(_m, "CheckForRekeys", ctx)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

func (_mr *_MockmdServerLocalRecorder) CheckForRekeys(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckForRekeys", arg0)
}

func (_m *MockmdServerLocal) TruncateLock(ctx context.Context, id tlf.ID) (bool, error) {
	ret := _m.ctrl.Call(_m, "TruncateLock", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockmdServerLocalRecorder) TruncateLock(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TruncateLock", arg0, arg1)
}

func (_m *MockmdServerLocal) TruncateUnlock(ctx context.Context, id tlf.ID) (bool, error) {
	ret := _m.ctrl.Call(_m, "TruncateUnlock", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockmdServerLocalRecorder) TruncateUnlock(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TruncateUnlock", arg0, arg1)
}

func (_m *MockmdServerLocal) DisableRekeyUpdatesForTesting() {
	_m.ctrl.Call(_m, "DisableRekeyUpdatesForTesting")
}

func (_mr *_MockmdServerLocalRecorder) DisableRekeyUpdatesForTesting() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DisableRekeyUpdatesForTesting")
}

func (_m *MockmdServerLocal) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockmdServerLocalRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

func (_m *MockmdServerLocal) IsConnected() bool {
	ret := _m.ctrl.Call(_m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockmdServerLocalRecorder) IsConnected() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsConnected")
}

func (_m *MockmdServerLocal) GetLatestHandleForTLF(ctx context.Context, id tlf.ID) (tlf.Handle, error) {
	ret := _m.ctrl.Call(_m, "GetLatestHandleForTLF", ctx, id)
	ret0, _ := ret[0].(tlf.Handle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockmdServerLocalRecorder) GetLatestHandleForTLF(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLatestHandleForTLF", arg0, arg1)
}

func (_m *MockmdServerLocal) OffsetFromServerTime() (time.Duration, bool) {
	ret := _m.ctrl.Call(_m, "OffsetFromServerTime")
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

func (_mr *_MockmdServerLocalRecorder) OffsetFromServerTime() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OffsetFromServerTime")
}

func (_m *MockmdServerLocal) GetKeyBundles(ctx context.Context, tlfID tlf.ID, wkbID TLFWriterKeyBundleID, rkbID TLFReaderKeyBundleID) (*TLFWriterKeyBundleV3, *TLFReaderKeyBundleV3, error) {
	ret := _m.ctrl.Call(_m, "GetKeyBundles", ctx, tlfID, wkbID, rkbID)
	ret0, _ := ret[0].(*TLFWriterKeyBundleV3)
	ret1, _ := ret[1].(*TLFReaderKeyBundleV3)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockmdServerLocalRecorder) GetKeyBundles(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetKeyBundles", arg0, arg1, arg2, arg3)
}

func (_m *MockmdServerLocal) CheckReachability(ctx context.Context) {
	_m.ctrl.Call(_m, "CheckReachability", ctx)
}

func (_mr *_MockmdServerLocalRecorder) CheckReachability(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckReachability", arg0)
}

func (_m *MockmdServerLocal) FastForwardBackoff() {
	_m.ctrl.Call(_m, "FastForwardBackoff")
}

func (_mr *_MockmdServerLocalRecorder) FastForwardBackoff() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FastForwardBackoff")
}

func (_m *MockmdServerLocal) addNewAssertionForTest(uid keybase1.UID, newAssertion keybase1.SocialAssertion) error {
	ret := _m.ctrl.Call(_m, "addNewAssertionForTest", uid, newAssertion)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockmdServerLocalRecorder) addNewAssertionForTest(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "addNewAssertionForTest", arg0, arg1)
}

func (_m *MockmdServerLocal) getCurrentMergedHeadRevision(ctx context.Context, id tlf.ID) (kbfsmd.Revision, error) {
	ret := _m.ctrl.Call(_m, "getCurrentMergedHeadRevision", ctx, id)
	ret0, _ := ret[0].(kbfsmd.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockmdServerLocalRecorder) getCurrentMergedHeadRevision(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "getCurrentMergedHeadRevision", arg0, arg1)
}

func (_m *MockmdServerLocal) isShutdown() bool {
	ret := _m.ctrl.Call(_m, "isShutdown")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockmdServerLocalRecorder) isShutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isShutdown")
}

func (_m *MockmdServerLocal) copy(config mdServerLocalConfig) mdServerLocal {
	ret := _m.ctrl.Call(_m, "copy", config)
	ret0, _ := ret[0].(mdServerLocal)
	return ret0
}

func (_mr *_MockmdServerLocalRecorder) copy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "copy", arg0)
}

// Mock of BlockServer interface
type MockBlockServer struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockServerRecorder
}

// Recorder for MockBlockServer (not exported)
type _MockBlockServerRecorder struct {
	mock *MockBlockServer
}

func NewMockBlockServer(ctrl *gomock.Controller) *MockBlockServer {
	mock := &MockBlockServer{ctrl: ctrl}
	mock.recorder = &_MockBlockServerRecorder{mock}
	return mock
}

func (_m *MockBlockServer) EXPECT() *_MockBlockServerRecorder {
	return _m.recorder
}

func (_m *MockBlockServer) RefreshAuthToken(_param0 context.Context) {
	_m.ctrl.Call(_m, "RefreshAuthToken", _param0)
}

func (_mr *_MockBlockServerRecorder) RefreshAuthToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RefreshAuthToken", arg0)
}

func (_m *MockBlockServer) Get(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID, context kbfsblock.Context) ([]byte, kbfscrypto.BlockCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, tlfID, id, context)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(kbfscrypto.BlockCryptKeyServerHalf)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockBlockServerRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2, arg3)
}

func (_m *MockBlockServer) Put(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID, context kbfsblock.Context, buf []byte, serverHalf kbfscrypto.BlockCryptKeyServerHalf) error {
	ret := _m.ctrl.Call(_m, "Put", ctx, tlfID, id, context, buf, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockServerRecorder) Put(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockBlockServer) PutAgain(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID, context kbfsblock.Context, buf []byte, serverHalf kbfscrypto.BlockCryptKeyServerHalf) error {
	ret := _m.ctrl.Call(_m, "PutAgain", ctx, tlfID, id, context, buf, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockServerRecorder) PutAgain(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutAgain", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockBlockServer) AddBlockReference(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID, context kbfsblock.Context) error {
	ret := _m.ctrl.Call(_m, "AddBlockReference", ctx, tlfID, id, context)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockServerRecorder) AddBlockReference(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddBlockReference", arg0, arg1, arg2, arg3)
}

func (_m *MockBlockServer) RemoveBlockReferences(ctx context.Context, tlfID tlf.ID, contexts kbfsblock.ContextMap) (map[kbfsblock.ID]int, error) {
	ret := _m.ctrl.Call(_m, "RemoveBlockReferences", ctx, tlfID, contexts)
	ret0, _ := ret[0].(map[kbfsblock.ID]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockServerRecorder) RemoveBlockReferences(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveBlockReferences", arg0, arg1, arg2)
}

func (_m *MockBlockServer) ArchiveBlockReferences(ctx context.Context, tlfID tlf.ID, contexts kbfsblock.ContextMap) error {
	ret := _m.ctrl.Call(_m, "ArchiveBlockReferences", ctx, tlfID, contexts)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockServerRecorder) ArchiveBlockReferences(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ArchiveBlockReferences", arg0, arg1, arg2)
}

func (_m *MockBlockServer) IsUnflushed(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsUnflushed", ctx, tlfID, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockServerRecorder) IsUnflushed(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsUnflushed", arg0, arg1, arg2)
}

func (_m *MockBlockServer) Shutdown(ctx context.Context) {
	_m.ctrl.Call(_m, "Shutdown", ctx)
}

func (_mr *_MockBlockServerRecorder) Shutdown(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown", arg0)
}

func (_m *MockBlockServer) GetUserQuotaInfo(ctx context.Context) (*kbfsblock.QuotaInfo, error) {
	ret := _m.ctrl.Call(_m, "GetUserQuotaInfo", ctx)
	ret0, _ := ret[0].(*kbfsblock.QuotaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockServerRecorder) GetUserQuotaInfo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUserQuotaInfo", arg0)
}

func (_m *MockBlockServer) GetTeamQuotaInfo(ctx context.Context, tid keybase1.TeamID) (*kbfsblock.QuotaInfo, error) {
	ret := _m.ctrl.Call(_m, "GetTeamQuotaInfo", ctx, tid)
	ret0, _ := ret[0].(*kbfsblock.QuotaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockServerRecorder) GetTeamQuotaInfo(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTeamQuotaInfo", arg0, arg1)
}

// Mock of blockServerLocal interface
type MockblockServerLocal struct {
	ctrl     *gomock.Controller
	recorder *_MockblockServerLocalRecorder
}

// Recorder for MockblockServerLocal (not exported)
type _MockblockServerLocalRecorder struct {
	mock *MockblockServerLocal
}

func NewMockblockServerLocal(ctrl *gomock.Controller) *MockblockServerLocal {
	mock := &MockblockServerLocal{ctrl: ctrl}
	mock.recorder = &_MockblockServerLocalRecorder{mock}
	return mock
}

func (_m *MockblockServerLocal) EXPECT() *_MockblockServerLocalRecorder {
	return _m.recorder
}

func (_m *MockblockServerLocal) RefreshAuthToken(_param0 context.Context) {
	_m.ctrl.Call(_m, "RefreshAuthToken", _param0)
}

func (_mr *_MockblockServerLocalRecorder) RefreshAuthToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RefreshAuthToken", arg0)
}

func (_m *MockblockServerLocal) Get(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID, context kbfsblock.Context) ([]byte, kbfscrypto.BlockCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, tlfID, id, context)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(kbfscrypto.BlockCryptKeyServerHalf)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockblockServerLocalRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2, arg3)
}

func (_m *MockblockServerLocal) Put(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID, context kbfsblock.Context, buf []byte, serverHalf kbfscrypto.BlockCryptKeyServerHalf) error {
	ret := _m.ctrl.Call(_m, "Put", ctx, tlfID, id, context, buf, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockblockServerLocalRecorder) Put(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockblockServerLocal) PutAgain(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID, context kbfsblock.Context, buf []byte, serverHalf kbfscrypto.BlockCryptKeyServerHalf) error {
	ret := _m.ctrl.Call(_m, "PutAgain", ctx, tlfID, id, context, buf, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockblockServerLocalRecorder) PutAgain(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutAgain", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockblockServerLocal) AddBlockReference(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID, context kbfsblock.Context) error {
	ret := _m.ctrl.Call(_m, "AddBlockReference", ctx, tlfID, id, context)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockblockServerLocalRecorder) AddBlockReference(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddBlockReference", arg0, arg1, arg2, arg3)
}

func (_m *MockblockServerLocal) RemoveBlockReferences(ctx context.Context, tlfID tlf.ID, contexts kbfsblock.ContextMap) (map[kbfsblock.ID]int, error) {
	ret := _m.ctrl.Call(_m, "RemoveBlockReferences", ctx, tlfID, contexts)
	ret0, _ := ret[0].(map[kbfsblock.ID]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockblockServerLocalRecorder) RemoveBlockReferences(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveBlockReferences", arg0, arg1, arg2)
}

func (_m *MockblockServerLocal) ArchiveBlockReferences(ctx context.Context, tlfID tlf.ID, contexts kbfsblock.ContextMap) error {
	ret := _m.ctrl.Call(_m, "ArchiveBlockReferences", ctx, tlfID, contexts)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockblockServerLocalRecorder) ArchiveBlockReferences(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ArchiveBlockReferences", arg0, arg1, arg2)
}

func (_m *MockblockServerLocal) IsUnflushed(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsUnflushed", ctx, tlfID, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockblockServerLocalRecorder) IsUnflushed(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsUnflushed", arg0, arg1, arg2)
}

func (_m *MockblockServerLocal) Shutdown(ctx context.Context) {
	_m.ctrl.Call(_m, "Shutdown", ctx)
}

func (_mr *_MockblockServerLocalRecorder) Shutdown(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown", arg0)
}

func (_m *MockblockServerLocal) GetUserQuotaInfo(ctx context.Context) (*kbfsblock.QuotaInfo, error) {
	ret := _m.ctrl.Call(_m, "GetUserQuotaInfo", ctx)
	ret0, _ := ret[0].(*kbfsblock.QuotaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockblockServerLocalRecorder) GetUserQuotaInfo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUserQuotaInfo", arg0)
}

func (_m *MockblockServerLocal) GetTeamQuotaInfo(ctx context.Context, tid keybase1.TeamID) (*kbfsblock.QuotaInfo, error) {
	ret := _m.ctrl.Call(_m, "GetTeamQuotaInfo", ctx, tid)
	ret0, _ := ret[0].(*kbfsblock.QuotaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockblockServerLocalRecorder) GetTeamQuotaInfo(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTeamQuotaInfo", arg0, arg1)
}

func (_m *MockblockServerLocal) getAllRefsForTest(ctx context.Context, tlfID tlf.ID) (map[kbfsblock.ID]blockRefMap, error) {
	ret := _m.ctrl.Call(_m, "getAllRefsForTest", ctx, tlfID)
	ret0, _ := ret[0].(map[kbfsblock.ID]blockRefMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockblockServerLocalRecorder) getAllRefsForTest(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "getAllRefsForTest", arg0, arg1)
}

// Mock of BlockSplitter interface
type MockBlockSplitter struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockSplitterRecorder
}

// Recorder for MockBlockSplitter (not exported)
type _MockBlockSplitterRecorder struct {
	mock *MockBlockSplitter
}

func NewMockBlockSplitter(ctrl *gomock.Controller) *MockBlockSplitter {
	mock := &MockBlockSplitter{ctrl: ctrl}
	mock.recorder = &_MockBlockSplitterRecorder{mock}
	return mock
}

func (_m *MockBlockSplitter) EXPECT() *_MockBlockSplitterRecorder {
	return _m.recorder
}

func (_m *MockBlockSplitter) CopyUntilSplit(block *FileBlock, lastBlock bool, data []byte, off int64) int64 {
	ret := _m.ctrl.Call(_m, "CopyUntilSplit", block, lastBlock, data, off)
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockBlockSplitterRecorder) CopyUntilSplit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CopyUntilSplit", arg0, arg1, arg2, arg3)
}

func (_m *MockBlockSplitter) CheckSplit(block *FileBlock) int64 {
	ret := _m.ctrl.Call(_m, "CheckSplit", block)
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockBlockSplitterRecorder) CheckSplit(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckSplit", arg0)
}

func (_m *MockBlockSplitter) MaxPtrsPerBlock() int {
	ret := _m.ctrl.Call(_m, "MaxPtrsPerBlock")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockBlockSplitterRecorder) MaxPtrsPerBlock() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxPtrsPerBlock")
}

func (_m *MockBlockSplitter) ShouldEmbedBlockChanges(bc *BlockChanges) bool {
	ret := _m.ctrl.Call(_m, "ShouldEmbedBlockChanges", bc)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockBlockSplitterRecorder) ShouldEmbedBlockChanges(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShouldEmbedBlockChanges", arg0)
}

// Mock of KeyServer interface
type MockKeyServer struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyServerRecorder
}

// Recorder for MockKeyServer (not exported)
type _MockKeyServerRecorder struct {
	mock *MockKeyServer
}

func NewMockKeyServer(ctrl *gomock.Controller) *MockKeyServer {
	mock := &MockKeyServer{ctrl: ctrl}
	mock.recorder = &_MockKeyServerRecorder{mock}
	return mock
}

func (_m *MockKeyServer) EXPECT() *_MockKeyServerRecorder {
	return _m.recorder
}

func (_m *MockKeyServer) GetTLFCryptKeyServerHalf(ctx context.Context, serverHalfID TLFCryptKeyServerHalfID, cryptPublicKey kbfscrypto.CryptPublicKey) (kbfscrypto.TLFCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyServerHalf", ctx, serverHalfID, cryptPublicKey)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyServerRecorder) GetTLFCryptKeyServerHalf(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyServerHalf", arg0, arg1, arg2)
}

func (_m *MockKeyServer) PutTLFCryptKeyServerHalves(ctx context.Context, keyServerHalves UserDeviceKeyServerHalves) error {
	ret := _m.ctrl.Call(_m, "PutTLFCryptKeyServerHalves", ctx, keyServerHalves)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyServerRecorder) PutTLFCryptKeyServerHalves(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutTLFCryptKeyServerHalves", arg0, arg1)
}

func (_m *MockKeyServer) DeleteTLFCryptKeyServerHalf(ctx context.Context, uid keybase1.UID, key kbfscrypto.CryptPublicKey, serverHalfID TLFCryptKeyServerHalfID) error {
	ret := _m.ctrl.Call(_m, "DeleteTLFCryptKeyServerHalf", ctx, uid, key, serverHalfID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyServerRecorder) DeleteTLFCryptKeyServerHalf(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteTLFCryptKeyServerHalf", arg0, arg1, arg2, arg3)
}

func (_m *MockKeyServer) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockKeyServerRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of Observer interface
type MockObserver struct {
	ctrl     *gomock.Controller
	recorder *_MockObserverRecorder
}

// Recorder for MockObserver (not exported)
type _MockObserverRecorder struct {
	mock *MockObserver
}

func NewMockObserver(ctrl *gomock.Controller) *MockObserver {
	mock := &MockObserver{ctrl: ctrl}
	mock.recorder = &_MockObserverRecorder{mock}
	return mock
}

func (_m *MockObserver) EXPECT() *_MockObserverRecorder {
	return _m.recorder
}

func (_m *MockObserver) LocalChange(ctx context.Context, node Node, write WriteRange) {
	_m.ctrl.Call(_m, "LocalChange", ctx, node, write)
}

func (_mr *_MockObserverRecorder) LocalChange(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LocalChange", arg0, arg1, arg2)
}

func (_m *MockObserver) BatchChanges(ctx context.Context, changes []NodeChange) {
	_m.ctrl.Call(_m, "BatchChanges", ctx, changes)
}

func (_mr *_MockObserverRecorder) BatchChanges(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BatchChanges", arg0, arg1)
}

func (_m *MockObserver) TlfHandleChange(ctx context.Context, newHandle *TlfHandle) {
	_m.ctrl.Call(_m, "TlfHandleChange", ctx, newHandle)
}

func (_mr *_MockObserverRecorder) TlfHandleChange(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TlfHandleChange", arg0, arg1)
}

// Mock of Notifier interface
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *_MockNotifierRecorder
}

// Recorder for MockNotifier (not exported)
type _MockNotifierRecorder struct {
	mock *MockNotifier
}

func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &_MockNotifierRecorder{mock}
	return mock
}

func (_m *MockNotifier) EXPECT() *_MockNotifierRecorder {
	return _m.recorder
}

func (_m *MockNotifier) RegisterForChanges(folderBranches []FolderBranch, obs Observer) error {
	ret := _m.ctrl.Call(_m, "RegisterForChanges", folderBranches, obs)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNotifierRecorder) RegisterForChanges(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterForChanges", arg0, arg1)
}

func (_m *MockNotifier) UnregisterFromChanges(folderBranches []FolderBranch, obs Observer) error {
	ret := _m.ctrl.Call(_m, "UnregisterFromChanges", folderBranches, obs)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNotifierRecorder) UnregisterFromChanges(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnregisterFromChanges", arg0, arg1)
}

// Mock of Clock interface
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *_MockClockRecorder
}

// Recorder for MockClock (not exported)
type _MockClockRecorder struct {
	mock *MockClock
}

func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &_MockClockRecorder{mock}
	return mock
}

func (_m *MockClock) EXPECT() *_MockClockRecorder {
	return _m.recorder
}

func (_m *MockClock) Now() time.Time {
	ret := _m.ctrl.Call(_m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

func (_mr *_MockClockRecorder) Now() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Now")
}

// Mock of ConflictRenamer interface
type MockConflictRenamer struct {
	ctrl     *gomock.Controller
	recorder *_MockConflictRenamerRecorder
}

// Recorder for MockConflictRenamer (not exported)
type _MockConflictRenamerRecorder struct {
	mock *MockConflictRenamer
}

func NewMockConflictRenamer(ctrl *gomock.Controller) *MockConflictRenamer {
	mock := &MockConflictRenamer{ctrl: ctrl}
	mock.recorder = &_MockConflictRenamerRecorder{mock}
	return mock
}

func (_m *MockConflictRenamer) EXPECT() *_MockConflictRenamerRecorder {
	return _m.recorder
}

func (_m *MockConflictRenamer) ConflictRename(ctx context.Context, op op, original string) (string, error) {
	ret := _m.ctrl.Call(_m, "ConflictRename", ctx, op, original)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConflictRenamerRecorder) ConflictRename(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConflictRename", arg0, arg1, arg2)
}

// Mock of Tracer interface
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *_MockTracerRecorder
}

// Recorder for MockTracer (not exported)
type _MockTracerRecorder struct {
	mock *MockTracer
}

func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &_MockTracerRecorder{mock}
	return mock
}

func (_m *MockTracer) EXPECT() *_MockTracerRecorder {
	return _m.recorder
}

func (_m *MockTracer) MaybeStartTrace(ctx context.Context, family string, title string) context.Context {
	ret := _m.ctrl.Call(_m, "MaybeStartTrace", ctx, family, title)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

func (_mr *_MockTracerRecorder) MaybeStartTrace(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaybeStartTrace", arg0, arg1, arg2)
}

func (_m *MockTracer) MaybeFinishTrace(ctx context.Context, err error) {
	_m.ctrl.Call(_m, "MaybeFinishTrace", ctx, err)
}

func (_mr *_MockTracerRecorder) MaybeFinishTrace(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaybeFinishTrace", arg0, arg1)
}

// Mock of Config interface
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *_MockConfigRecorder
}

// Recorder for MockConfig (not exported)
type _MockConfigRecorder struct {
	mock *MockConfig
}

func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &_MockConfigRecorder{mock}
	return mock
}

func (_m *MockConfig) EXPECT() *_MockConfigRecorder {
	return _m.recorder
}

func (_m *MockConfig) DataVersion() DataVer {
	ret := _m.ctrl.Call(_m, "DataVersion")
	ret0, _ := ret[0].(DataVer)
	return ret0
}

func (_mr *_MockConfigRecorder) DataVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DataVersion")
}

func (_m *MockConfig) MakeLogger(module string) logger.Logger {
	ret := _m.ctrl.Call(_m, "MakeLogger", module)
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

func (_mr *_MockConfigRecorder) MakeLogger(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeLogger", arg0)
}

func (_m *MockConfig) BlockCache() BlockCache {
	ret := _m.ctrl.Call(_m, "BlockCache")
	ret0, _ := ret[0].(BlockCache)
	return ret0
}

func (_mr *_MockConfigRecorder) BlockCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockCache")
}

func (_m *MockConfig) BlockServer() BlockServer {
	ret := _m.ctrl.Call(_m, "BlockServer")
	ret0, _ := ret[0].(BlockServer)
	return ret0
}

func (_mr *_MockConfigRecorder) BlockServer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockServer")
}

func (_m *MockConfig) Codec() kbfscodec.Codec {
	ret := _m.ctrl.Call(_m, "Codec")
	ret0, _ := ret[0].(kbfscodec.Codec)
	return ret0
}

func (_mr *_MockConfigRecorder) Codec() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Codec")
}

func (_m *MockConfig) cryptoPure() cryptoPure {
	ret := _m.ctrl.Call(_m, "cryptoPure")
	ret0, _ := ret[0].(cryptoPure)
	return ret0
}

func (_mr *_MockConfigRecorder) cryptoPure() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "cryptoPure")
}

func (_m *MockConfig) keyGetter() blockKeyGetter {
	ret := _m.ctrl.Call(_m, "keyGetter")
	ret0, _ := ret[0].(blockKeyGetter)
	return ret0
}

func (_mr *_MockConfigRecorder) keyGetter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "keyGetter")
}

func (_m *MockConfig) Crypto() Crypto {
	ret := _m.ctrl.Call(_m, "Crypto")
	ret0, _ := ret[0].(Crypto)
	return ret0
}

func (_mr *_MockConfigRecorder) Crypto() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Crypto")
}

func (_m *MockConfig) Signer() kbfscrypto.Signer {
	ret := _m.ctrl.Call(_m, "Signer")
	ret0, _ := ret[0].(kbfscrypto.Signer)
	return ret0
}

func (_mr *_MockConfigRecorder) Signer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Signer")
}

func (_m *MockConfig) CurrentSessionGetter() CurrentSessionGetter {
	ret := _m.ctrl.Call(_m, "CurrentSessionGetter")
	ret0, _ := ret[0].(CurrentSessionGetter)
	return ret0
}

func (_mr *_MockConfigRecorder) CurrentSessionGetter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CurrentSessionGetter")
}

func (_m *MockConfig) DiskBlockCache() DiskBlockCache {
	ret := _m.ctrl.Call(_m, "DiskBlockCache")
	ret0, _ := ret[0].(DiskBlockCache)
	return ret0
}

func (_mr *_MockConfigRecorder) DiskBlockCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DiskBlockCache")
}

func (_m *MockConfig) SetDiskBlockCache(_param0 DiskBlockCache) {
	_m.ctrl.Call(_m, "SetDiskBlockCache", _param0)
}

func (_mr *_MockConfigRecorder) SetDiskBlockCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetDiskBlockCache", arg0)
}

func (_m *MockConfig) Clock() Clock {
	ret := _m.ctrl.Call(_m, "Clock")
	ret0, _ := ret[0].(Clock)
	return ret0
}

func (_mr *_MockConfigRecorder) Clock() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Clock")
}

func (_m *MockConfig) DiskLimiter() DiskLimiter {
	ret := _m.ctrl.Call(_m, "DiskLimiter")
	ret0, _ := ret[0].(DiskLimiter)
	return ret0
}

func (_mr *_MockConfigRecorder) DiskLimiter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DiskLimiter")
}

func (_m *MockConfig) MaybeStartTrace(ctx context.Context, family string, title string) context.Context {
	ret := _m.ctrl.Call(_m, "MaybeStartTrace", ctx, family, title)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

func (_mr *_MockConfigRecorder) MaybeStartTrace(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaybeStartTrace", arg0, arg1, arg2)
}

func (_m *MockConfig) MaybeFinishTrace(ctx context.Context, err error) {
	_m.ctrl.Call(_m, "MaybeFinishTrace", ctx, err)
}

func (_mr *_MockConfigRecorder) MaybeFinishTrace(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaybeFinishTrace", arg0, arg1)
}

func (_m *MockConfig) KBFSOps() KBFSOps {
	ret := _m.ctrl.Call(_m, "KBFSOps")
	ret0, _ := ret[0].(KBFSOps)
	return ret0
}

func (_mr *_MockConfigRecorder) KBFSOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KBFSOps")
}

func (_m *MockConfig) SetKBFSOps(_param0 KBFSOps) {
	_m.ctrl.Call(_m, "SetKBFSOps", _param0)
}

func (_mr *_MockConfigRecorder) SetKBFSOps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKBFSOps", arg0)
}

func (_m *MockConfig) KBPKI() KBPKI {
	ret := _m.ctrl.Call(_m, "KBPKI")
	ret0, _ := ret[0].(KBPKI)
	return ret0
}

func (_mr *_MockConfigRecorder) KBPKI() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KBPKI")
}

func (_m *MockConfig) SetKBPKI(_param0 KBPKI) {
	_m.ctrl.Call(_m, "SetKBPKI", _param0)
}

func (_mr *_MockConfigRecorder) SetKBPKI(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKBPKI", arg0)
}

func (_m *MockConfig) KeyManager() KeyManager {
	ret := _m.ctrl.Call(_m, "KeyManager")
	ret0, _ := ret[0].(KeyManager)
	return ret0
}

func (_mr *_MockConfigRecorder) KeyManager() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyManager")
}

func (_m *MockConfig) SetKeyManager(_param0 KeyManager) {
	_m.ctrl.Call(_m, "SetKeyManager", _param0)
}

func (_mr *_MockConfigRecorder) SetKeyManager(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyManager", arg0)
}

func (_m *MockConfig) Reporter() Reporter {
	ret := _m.ctrl.Call(_m, "Reporter")
	ret0, _ := ret[0].(Reporter)
	return ret0
}

func (_mr *_MockConfigRecorder) Reporter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reporter")
}

func (_m *MockConfig) SetReporter(_param0 Reporter) {
	_m.ctrl.Call(_m, "SetReporter", _param0)
}

func (_mr *_MockConfigRecorder) SetReporter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReporter", arg0)
}

func (_m *MockConfig) MDCache() MDCache {
	ret := _m.ctrl.Call(_m, "MDCache")
	ret0, _ := ret[0].(MDCache)
	return ret0
}

func (_mr *_MockConfigRecorder) MDCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MDCache")
}

func (_m *MockConfig) SetMDCache(_param0 MDCache) {
	_m.ctrl.Call(_m, "SetMDCache", _param0)
}

func (_mr *_MockConfigRecorder) SetMDCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMDCache", arg0)
}

func (_m *MockConfig) KeyCache() KeyCache {
	ret := _m.ctrl.Call(_m, "KeyCache")
	ret0, _ := ret[0].(KeyCache)
	return ret0
}

func (_mr *_MockConfigRecorder) KeyCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyCache")
}

func (_m *MockConfig) SetKeyBundleCache(_param0 KeyBundleCache) {
	_m.ctrl.Call(_m, "SetKeyBundleCache", _param0)
}

func (_mr *_MockConfigRecorder) SetKeyBundleCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyBundleCache", arg0)
}

func (_m *MockConfig) KeyBundleCache() KeyBundleCache {
	ret := _m.ctrl.Call(_m, "KeyBundleCache")
	ret0, _ := ret[0].(KeyBundleCache)
	return ret0
}

func (_mr *_MockConfigRecorder) KeyBundleCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyBundleCache")
}

func (_m *MockConfig) SetKeyCache(_param0 KeyCache) {
	_m.ctrl.Call(_m, "SetKeyCache", _param0)
}

func (_mr *_MockConfigRecorder) SetKeyCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyCache", arg0)
}

func (_m *MockConfig) SetBlockCache(_param0 BlockCache) {
	_m.ctrl.Call(_m, "SetBlockCache", _param0)
}

func (_mr *_MockConfigRecorder) SetBlockCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockCache", arg0)
}

func (_m *MockConfig) DirtyBlockCache() DirtyBlockCache {
	ret := _m.ctrl.Call(_m, "DirtyBlockCache")
	ret0, _ := ret[0].(DirtyBlockCache)
	return ret0
}

func (_mr *_MockConfigRecorder) DirtyBlockCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DirtyBlockCache")
}

func (_m *MockConfig) SetDirtyBlockCache(_param0 DirtyBlockCache) {
	_m.ctrl.Call(_m, "SetDirtyBlockCache", _param0)
}

func (_mr *_MockConfigRecorder) SetDirtyBlockCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetDirtyBlockCache", arg0)
}

func (_m *MockConfig) SetCrypto(_param0 Crypto) {
	_m.ctrl.Call(_m, "SetCrypto", _param0)
}

func (_mr *_MockConfigRecorder) SetCrypto(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCrypto", arg0)
}

func (_m *MockConfig) SetCodec(_param0 kbfscodec.Codec) {
	_m.ctrl.Call(_m, "SetCodec", _param0)
}

func (_mr *_MockConfigRecorder) SetCodec(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCodec", arg0)
}

func (_m *MockConfig) MDOps() MDOps {
	ret := _m.ctrl.Call(_m, "MDOps")
	ret0, _ := ret[0].(MDOps)
	return ret0
}

func (_mr *_MockConfigRecorder) MDOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MDOps")
}

func (_m *MockConfig) SetMDOps(_param0 MDOps) {
	_m.ctrl.Call(_m, "SetMDOps", _param0)
}

func (_mr *_MockConfigRecorder) SetMDOps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMDOps", arg0)
}

func (_m *MockConfig) KeyOps() KeyOps {
	ret := _m.ctrl.Call(_m, "KeyOps")
	ret0, _ := ret[0].(KeyOps)
	return ret0
}

func (_mr *_MockConfigRecorder) KeyOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyOps")
}

func (_m *MockConfig) SetKeyOps(_param0 KeyOps) {
	_m.ctrl.Call(_m, "SetKeyOps", _param0)
}

func (_mr *_MockConfigRecorder) SetKeyOps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyOps", arg0)
}

func (_m *MockConfig) BlockOps() BlockOps {
	ret := _m.ctrl.Call(_m, "BlockOps")
	ret0, _ := ret[0].(BlockOps)
	return ret0
}

func (_mr *_MockConfigRecorder) BlockOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockOps")
}

func (_m *MockConfig) SetBlockOps(_param0 BlockOps) {
	_m.ctrl.Call(_m, "SetBlockOps", _param0)
}

func (_mr *_MockConfigRecorder) SetBlockOps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockOps", arg0)
}

func (_m *MockConfig) MDServer() MDServer {
	ret := _m.ctrl.Call(_m, "MDServer")
	ret0, _ := ret[0].(MDServer)
	return ret0
}

func (_mr *_MockConfigRecorder) MDServer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MDServer")
}

func (_m *MockConfig) SetMDServer(_param0 MDServer) {
	_m.ctrl.Call(_m, "SetMDServer", _param0)
}

func (_mr *_MockConfigRecorder) SetMDServer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMDServer", arg0)
}

func (_m *MockConfig) SetBlockServer(_param0 BlockServer) {
	_m.ctrl.Call(_m, "SetBlockServer", _param0)
}

func (_mr *_MockConfigRecorder) SetBlockServer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockServer", arg0)
}

func (_m *MockConfig) KeyServer() KeyServer {
	ret := _m.ctrl.Call(_m, "KeyServer")
	ret0, _ := ret[0].(KeyServer)
	return ret0
}

func (_mr *_MockConfigRecorder) KeyServer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyServer")
}

func (_m *MockConfig) SetKeyServer(_param0 KeyServer) {
	_m.ctrl.Call(_m, "SetKeyServer", _param0)
}

func (_mr *_MockConfigRecorder) SetKeyServer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyServer", arg0)
}

func (_m *MockConfig) KeybaseService() KeybaseService {
	ret := _m.ctrl.Call(_m, "KeybaseService")
	ret0, _ := ret[0].(KeybaseService)
	return ret0
}

func (_mr *_MockConfigRecorder) KeybaseService() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeybaseService")
}

func (_m *MockConfig) SetKeybaseService(_param0 KeybaseService) {
	_m.ctrl.Call(_m, "SetKeybaseService", _param0)
}

func (_mr *_MockConfigRecorder) SetKeybaseService(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeybaseService", arg0)
}

func (_m *MockConfig) BlockSplitter() BlockSplitter {
	ret := _m.ctrl.Call(_m, "BlockSplitter")
	ret0, _ := ret[0].(BlockSplitter)
	return ret0
}

func (_mr *_MockConfigRecorder) BlockSplitter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockSplitter")
}

func (_m *MockConfig) SetBlockSplitter(_param0 BlockSplitter) {
	_m.ctrl.Call(_m, "SetBlockSplitter", _param0)
}

func (_mr *_MockConfigRecorder) SetBlockSplitter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockSplitter", arg0)
}

func (_m *MockConfig) Notifier() Notifier {
	ret := _m.ctrl.Call(_m, "Notifier")
	ret0, _ := ret[0].(Notifier)
	return ret0
}

func (_mr *_MockConfigRecorder) Notifier() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Notifier")
}

func (_m *MockConfig) SetNotifier(_param0 Notifier) {
	_m.ctrl.Call(_m, "SetNotifier", _param0)
}

func (_mr *_MockConfigRecorder) SetNotifier(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetNotifier", arg0)
}

func (_m *MockConfig) SetClock(_param0 Clock) {
	_m.ctrl.Call(_m, "SetClock", _param0)
}

func (_mr *_MockConfigRecorder) SetClock(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetClock", arg0)
}

func (_m *MockConfig) ConflictRenamer() ConflictRenamer {
	ret := _m.ctrl.Call(_m, "ConflictRenamer")
	ret0, _ := ret[0].(ConflictRenamer)
	return ret0
}

func (_mr *_MockConfigRecorder) ConflictRenamer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConflictRenamer")
}

func (_m *MockConfig) SetConflictRenamer(_param0 ConflictRenamer) {
	_m.ctrl.Call(_m, "SetConflictRenamer", _param0)
}

func (_mr *_MockConfigRecorder) SetConflictRenamer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetConflictRenamer", arg0)
}

func (_m *MockConfig) MetadataVersion() MetadataVer {
	ret := _m.ctrl.Call(_m, "MetadataVersion")
	ret0, _ := ret[0].(MetadataVer)
	return ret0
}

func (_mr *_MockConfigRecorder) MetadataVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MetadataVersion")
}

func (_m *MockConfig) SetMetadataVersion(_param0 MetadataVer) {
	_m.ctrl.Call(_m, "SetMetadataVersion", _param0)
}

func (_mr *_MockConfigRecorder) SetMetadataVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMetadataVersion", arg0)
}

func (_m *MockConfig) RekeyQueue() RekeyQueue {
	ret := _m.ctrl.Call(_m, "RekeyQueue")
	ret0, _ := ret[0].(RekeyQueue)
	return ret0
}

func (_mr *_MockConfigRecorder) RekeyQueue() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RekeyQueue")
}

func (_m *MockConfig) SetRekeyQueue(_param0 RekeyQueue) {
	_m.ctrl.Call(_m, "SetRekeyQueue", _param0)
}

func (_mr *_MockConfigRecorder) SetRekeyQueue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRekeyQueue", arg0)
}

func (_m *MockConfig) ReqsBufSize() int {
	ret := _m.ctrl.Call(_m, "ReqsBufSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockConfigRecorder) ReqsBufSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReqsBufSize")
}

func (_m *MockConfig) MaxNameBytes() uint32 {
	ret := _m.ctrl.Call(_m, "MaxNameBytes")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockConfigRecorder) MaxNameBytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxNameBytes")
}

func (_m *MockConfig) MaxDirBytes() uint64 {
	ret := _m.ctrl.Call(_m, "MaxDirBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockConfigRecorder) MaxDirBytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxDirBytes")
}

func (_m *MockConfig) DoBackgroundFlushes() bool {
	ret := _m.ctrl.Call(_m, "DoBackgroundFlushes")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockConfigRecorder) DoBackgroundFlushes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DoBackgroundFlushes")
}

func (_m *MockConfig) SetDoBackgroundFlushes(_param0 bool) {
	_m.ctrl.Call(_m, "SetDoBackgroundFlushes", _param0)
}

func (_mr *_MockConfigRecorder) SetDoBackgroundFlushes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetDoBackgroundFlushes", arg0)
}

func (_m *MockConfig) RekeyWithPromptWaitTime() time.Duration {
	ret := _m.ctrl.Call(_m, "RekeyWithPromptWaitTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockConfigRecorder) RekeyWithPromptWaitTime() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RekeyWithPromptWaitTime")
}

func (_m *MockConfig) SetRekeyWithPromptWaitTime(_param0 time.Duration) {
	_m.ctrl.Call(_m, "SetRekeyWithPromptWaitTime", _param0)
}

func (_mr *_MockConfigRecorder) SetRekeyWithPromptWaitTime(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRekeyWithPromptWaitTime", arg0)
}

func (_m *MockConfig) Mode() InitMode {
	ret := _m.ctrl.Call(_m, "Mode")
	ret0, _ := ret[0].(InitMode)
	return ret0
}

func (_mr *_MockConfigRecorder) Mode() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Mode")
}

func (_m *MockConfig) DelayedCancellationGracePeriod() time.Duration {
	ret := _m.ctrl.Call(_m, "DelayedCancellationGracePeriod")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockConfigRecorder) DelayedCancellationGracePeriod() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DelayedCancellationGracePeriod")
}

func (_m *MockConfig) SetDelayedCancellationGracePeriod(_param0 time.Duration) {
	_m.ctrl.Call(_m, "SetDelayedCancellationGracePeriod", _param0)
}

func (_mr *_MockConfigRecorder) SetDelayedCancellationGracePeriod(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetDelayedCancellationGracePeriod", arg0)
}

func (_m *MockConfig) QuotaReclamationPeriod() time.Duration {
	ret := _m.ctrl.Call(_m, "QuotaReclamationPeriod")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockConfigRecorder) QuotaReclamationPeriod() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QuotaReclamationPeriod")
}

func (_m *MockConfig) QuotaReclamationMinUnrefAge() time.Duration {
	ret := _m.ctrl.Call(_m, "QuotaReclamationMinUnrefAge")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockConfigRecorder) QuotaReclamationMinUnrefAge() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QuotaReclamationMinUnrefAge")
}

func (_m *MockConfig) QuotaReclamationMinHeadAge() time.Duration {
	ret := _m.ctrl.Call(_m, "QuotaReclamationMinHeadAge")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockConfigRecorder) QuotaReclamationMinHeadAge() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QuotaReclamationMinHeadAge")
}

func (_m *MockConfig) ResetCaches() {
	_m.ctrl.Call(_m, "ResetCaches")
}

func (_mr *_MockConfigRecorder) ResetCaches() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResetCaches")
}

func (_m *MockConfig) StorageRoot() string {
	ret := _m.ctrl.Call(_m, "StorageRoot")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockConfigRecorder) StorageRoot() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StorageRoot")
}

func (_m *MockConfig) MetricsRegistry() go_metrics.Registry {
	ret := _m.ctrl.Call(_m, "MetricsRegistry")
	ret0, _ := ret[0].(go_metrics.Registry)
	return ret0
}

func (_mr *_MockConfigRecorder) MetricsRegistry() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MetricsRegistry")
}

func (_m *MockConfig) SetMetricsRegistry(_param0 go_metrics.Registry) {
	_m.ctrl.Call(_m, "SetMetricsRegistry", _param0)
}

func (_mr *_MockConfigRecorder) SetMetricsRegistry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMetricsRegistry", arg0)
}

func (_m *MockConfig) SetTraceOptions(enabled bool) {
	_m.ctrl.Call(_m, "SetTraceOptions", enabled)
}

func (_mr *_MockConfigRecorder) SetTraceOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTraceOptions", arg0)
}

func (_m *MockConfig) TLFValidDuration() time.Duration {
	ret := _m.ctrl.Call(_m, "TLFValidDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockConfigRecorder) TLFValidDuration() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TLFValidDuration")
}

func (_m *MockConfig) SetTLFValidDuration(_param0 time.Duration) {
	_m.ctrl.Call(_m, "SetTLFValidDuration", _param0)
}

func (_mr *_MockConfigRecorder) SetTLFValidDuration(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTLFValidDuration", arg0)
}

func (_m *MockConfig) BGFlushDirOpBatchSize() int {
	ret := _m.ctrl.Call(_m, "BGFlushDirOpBatchSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockConfigRecorder) BGFlushDirOpBatchSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BGFlushDirOpBatchSize")
}

func (_m *MockConfig) SetBGFlushDirOpBatchSize(s int) {
	_m.ctrl.Call(_m, "SetBGFlushDirOpBatchSize", s)
}

func (_mr *_MockConfigRecorder) SetBGFlushDirOpBatchSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBGFlushDirOpBatchSize", arg0)
}

func (_m *MockConfig) BGFlushPeriod() time.Duration {
	ret := _m.ctrl.Call(_m, "BGFlushPeriod")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockConfigRecorder) BGFlushPeriod() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BGFlushPeriod")
}

func (_m *MockConfig) SetBGFlushPeriod(p time.Duration) {
	_m.ctrl.Call(_m, "SetBGFlushPeriod", p)
}

func (_mr *_MockConfigRecorder) SetBGFlushPeriod(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBGFlushPeriod", arg0)
}

func (_m *MockConfig) Shutdown(_param0 context.Context) error {
	ret := _m.ctrl.Call(_m, "Shutdown", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConfigRecorder) Shutdown(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown", arg0)
}

func (_m *MockConfig) CheckStateOnShutdown() bool {
	ret := _m.ctrl.Call(_m, "CheckStateOnShutdown")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockConfigRecorder) CheckStateOnShutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckStateOnShutdown")
}

// Mock of NodeCache interface
type MockNodeCache struct {
	ctrl     *gomock.Controller
	recorder *_MockNodeCacheRecorder
}

// Recorder for MockNodeCache (not exported)
type _MockNodeCacheRecorder struct {
	mock *MockNodeCache
}

func NewMockNodeCache(ctrl *gomock.Controller) *MockNodeCache {
	mock := &MockNodeCache{ctrl: ctrl}
	mock.recorder = &_MockNodeCacheRecorder{mock}
	return mock
}

func (_m *MockNodeCache) EXPECT() *_MockNodeCacheRecorder {
	return _m.recorder
}

func (_m *MockNodeCache) GetOrCreate(ptr BlockPointer, name string, parent Node) (Node, error) {
	ret := _m.ctrl.Call(_m, "GetOrCreate", ptr, name, parent)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeCacheRecorder) GetOrCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOrCreate", arg0, arg1, arg2)
}

func (_m *MockNodeCache) Get(ref BlockRef) Node {
	ret := _m.ctrl.Call(_m, "Get", ref)
	ret0, _ := ret[0].(Node)
	return ret0
}

func (_mr *_MockNodeCacheRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockNodeCache) UpdatePointer(oldRef BlockRef, newPtr BlockPointer) bool {
	ret := _m.ctrl.Call(_m, "UpdatePointer", oldRef, newPtr)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockNodeCacheRecorder) UpdatePointer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdatePointer", arg0, arg1)
}

func (_m *MockNodeCache) Move(ref BlockRef, newParent Node, newName string) (func(), error) {
	ret := _m.ctrl.Call(_m, "Move", ref, newParent, newName)
	ret0, _ := ret[0].(func())
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeCacheRecorder) Move(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Move", arg0, arg1, arg2)
}

func (_m *MockNodeCache) Unlink(ref BlockRef, oldPath path, oldDe DirEntry) func() {
	ret := _m.ctrl.Call(_m, "Unlink", ref, oldPath, oldDe)
	ret0, _ := ret[0].(func())
	return ret0
}

func (_mr *_MockNodeCacheRecorder) Unlink(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unlink", arg0, arg1, arg2)
}

func (_m *MockNodeCache) IsUnlinked(node Node) bool {
	ret := _m.ctrl.Call(_m, "IsUnlinked", node)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockNodeCacheRecorder) IsUnlinked(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsUnlinked", arg0)
}

func (_m *MockNodeCache) UnlinkedDirEntry(node Node) DirEntry {
	ret := _m.ctrl.Call(_m, "UnlinkedDirEntry", node)
	ret0, _ := ret[0].(DirEntry)
	return ret0
}

func (_mr *_MockNodeCacheRecorder) UnlinkedDirEntry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnlinkedDirEntry", arg0)
}

func (_m *MockNodeCache) PathFromNode(node Node) path {
	ret := _m.ctrl.Call(_m, "PathFromNode", node)
	ret0, _ := ret[0].(path)
	return ret0
}

func (_mr *_MockNodeCacheRecorder) PathFromNode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PathFromNode", arg0)
}

func (_m *MockNodeCache) AllNodes() []Node {
	ret := _m.ctrl.Call(_m, "AllNodes")
	ret0, _ := ret[0].([]Node)
	return ret0
}

func (_mr *_MockNodeCacheRecorder) AllNodes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllNodes")
}

// Mock of crAction interface
type MockcrAction struct {
	ctrl     *gomock.Controller
	recorder *_MockcrActionRecorder
}

// Recorder for MockcrAction (not exported)
type _MockcrActionRecorder struct {
	mock *MockcrAction
}

func NewMockcrAction(ctrl *gomock.Controller) *MockcrAction {
	mock := &MockcrAction{ctrl: ctrl}
	mock.recorder = &_MockcrActionRecorder{mock}
	return mock
}

func (_m *MockcrAction) EXPECT() *_MockcrActionRecorder {
	return _m.recorder
}

func (_m *MockcrAction) swapUnmergedBlock(unmergedChains *crChains, mergedChains *crChains, unmergedBlock *DirBlock) (bool, BlockPointer, error) {
	ret := _m.ctrl.Call(_m, "swapUnmergedBlock", unmergedChains, mergedChains, unmergedBlock)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(BlockPointer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockcrActionRecorder) swapUnmergedBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "swapUnmergedBlock", arg0, arg1, arg2)
}

func (_m *MockcrAction) do(ctx context.Context, unmergedCopier fileBlockDeepCopier, mergedCopier fileBlockDeepCopier, unmergedBlock *DirBlock, mergedBlock *DirBlock) error {
	ret := _m.ctrl.Call(_m, "do", ctx, unmergedCopier, mergedCopier, unmergedBlock, mergedBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockcrActionRecorder) do(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "do", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockcrAction) updateOps(unmergedMostRecent BlockPointer, mergedMostRecent BlockPointer, unmergedBlock *DirBlock, mergedBlock *DirBlock, unmergedChains *crChains, mergedChains *crChains) error {
	ret := _m.ctrl.Call(_m, "updateOps", unmergedMostRecent, mergedMostRecent, unmergedBlock, mergedBlock, unmergedChains, mergedChains)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockcrActionRecorder) updateOps(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "updateOps", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockcrAction) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockcrActionRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "String")
}

// Mock of RekeyQueue interface
type MockRekeyQueue struct {
	ctrl     *gomock.Controller
	recorder *_MockRekeyQueueRecorder
}

// Recorder for MockRekeyQueue (not exported)
type _MockRekeyQueueRecorder struct {
	mock *MockRekeyQueue
}

func NewMockRekeyQueue(ctrl *gomock.Controller) *MockRekeyQueue {
	mock := &MockRekeyQueue{ctrl: ctrl}
	mock.recorder = &_MockRekeyQueueRecorder{mock}
	return mock
}

func (_m *MockRekeyQueue) EXPECT() *_MockRekeyQueueRecorder {
	return _m.recorder
}

func (_m *MockRekeyQueue) Enqueue(_param0 tlf.ID) {
	_m.ctrl.Call(_m, "Enqueue", _param0)
}

func (_mr *_MockRekeyQueueRecorder) Enqueue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Enqueue", arg0)
}

func (_m *MockRekeyQueue) IsRekeyPending(_param0 tlf.ID) bool {
	ret := _m.ctrl.Call(_m, "IsRekeyPending", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockRekeyQueueRecorder) IsRekeyPending(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsRekeyPending", arg0)
}

func (_m *MockRekeyQueue) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockRekeyQueueRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of BareRootMetadata interface
type MockBareRootMetadata struct {
	ctrl     *gomock.Controller
	recorder *_MockBareRootMetadataRecorder
}

// Recorder for MockBareRootMetadata (not exported)
type _MockBareRootMetadataRecorder struct {
	mock *MockBareRootMetadata
}

func NewMockBareRootMetadata(ctrl *gomock.Controller) *MockBareRootMetadata {
	mock := &MockBareRootMetadata{ctrl: ctrl}
	mock.recorder = &_MockBareRootMetadataRecorder{mock}
	return mock
}

func (_m *MockBareRootMetadata) EXPECT() *_MockBareRootMetadataRecorder {
	return _m.recorder
}

func (_m *MockBareRootMetadata) TlfID() tlf.ID {
	ret := _m.ctrl.Call(_m, "TlfID")
	ret0, _ := ret[0].(tlf.ID)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) TlfID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TlfID")
}

func (_m *MockBareRootMetadata) KeyGenerationsToUpdate() (KeyGen, KeyGen) {
	ret := _m.ctrl.Call(_m, "KeyGenerationsToUpdate")
	ret0, _ := ret[0].(KeyGen)
	ret1, _ := ret[1].(KeyGen)
	return ret0, ret1
}

func (_mr *_MockBareRootMetadataRecorder) KeyGenerationsToUpdate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyGenerationsToUpdate")
}

func (_m *MockBareRootMetadata) LatestKeyGeneration() KeyGen {
	ret := _m.ctrl.Call(_m, "LatestKeyGeneration")
	ret0, _ := ret[0].(KeyGen)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) LatestKeyGeneration() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LatestKeyGeneration")
}

func (_m *MockBareRootMetadata) IsValidRekeyRequest(codec kbfscodec.Codec, prevMd BareRootMetadata, user keybase1.UID, prevExtra ExtraMetadata, extra ExtraMetadata) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsValidRekeyRequest", codec, prevMd, user, prevExtra, extra)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBareRootMetadataRecorder) IsValidRekeyRequest(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsValidRekeyRequest", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockBareRootMetadata) MergedStatus() MergeStatus {
	ret := _m.ctrl.Call(_m, "MergedStatus")
	ret0, _ := ret[0].(MergeStatus)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) MergedStatus() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MergedStatus")
}

func (_m *MockBareRootMetadata) IsRekeySet() bool {
	ret := _m.ctrl.Call(_m, "IsRekeySet")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) IsRekeySet() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsRekeySet")
}

func (_m *MockBareRootMetadata) IsWriterMetadataCopiedSet() bool {
	ret := _m.ctrl.Call(_m, "IsWriterMetadataCopiedSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) IsWriterMetadataCopiedSet() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsWriterMetadataCopiedSet")
}

func (_m *MockBareRootMetadata) IsFinal() bool {
	ret := _m.ctrl.Call(_m, "IsFinal")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) IsFinal() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsFinal")
}

func (_m *MockBareRootMetadata) IsWriter(ctx context.Context, user keybase1.UID, deviceKey kbfscrypto.CryptPublicKey, teamMemChecker TeamMembershipChecker, extra ExtraMetadata) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsWriter", ctx, user, deviceKey, teamMemChecker, extra)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBareRootMetadataRecorder) IsWriter(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsWriter", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockBareRootMetadata) IsReader(ctx context.Context, user keybase1.UID, deviceKey kbfscrypto.CryptPublicKey, teamMemChecker TeamMembershipChecker, extra ExtraMetadata) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsReader", ctx, user, deviceKey, teamMemChecker, extra)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBareRootMetadataRecorder) IsReader(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsReader", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockBareRootMetadata) DeepCopy(codec kbfscodec.Codec) (MutableBareRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "DeepCopy", codec)
	ret0, _ := ret[0].(MutableBareRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBareRootMetadataRecorder) DeepCopy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeepCopy", arg0)
}

func (_m *MockBareRootMetadata) MakeSuccessorCopy(codec kbfscodec.Codec, crypto cryptoPure, extra ExtraMetadata, latestMDVer MetadataVer, tlfCryptKeyGetter func() ([]kbfscrypto.TLFCryptKey, error), isReadableAndWriter bool) (MutableBareRootMetadata, ExtraMetadata, error) {
	ret := _m.ctrl.Call(_m, "MakeSuccessorCopy", codec, crypto, extra, latestMDVer, tlfCryptKeyGetter, isReadableAndWriter)
	ret0, _ := ret[0].(MutableBareRootMetadata)
	ret1, _ := ret[1].(ExtraMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockBareRootMetadataRecorder) MakeSuccessorCopy(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeSuccessorCopy", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockBareRootMetadata) CheckValidSuccessor(currID kbfsmd.ID, nextMd BareRootMetadata) error {
	ret := _m.ctrl.Call(_m, "CheckValidSuccessor", currID, nextMd)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) CheckValidSuccessor(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckValidSuccessor", arg0, arg1)
}

func (_m *MockBareRootMetadata) CheckValidSuccessorForServer(currID kbfsmd.ID, nextMd BareRootMetadata) error {
	ret := _m.ctrl.Call(_m, "CheckValidSuccessorForServer", currID, nextMd)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) CheckValidSuccessorForServer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckValidSuccessorForServer", arg0, arg1)
}

func (_m *MockBareRootMetadata) MakeBareTlfHandle(extra ExtraMetadata) (tlf.Handle, error) {
	ret := _m.ctrl.Call(_m, "MakeBareTlfHandle", extra)
	ret0, _ := ret[0].(tlf.Handle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBareRootMetadataRecorder) MakeBareTlfHandle(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeBareTlfHandle", arg0)
}

func (_m *MockBareRootMetadata) TlfHandleExtensions() []tlf.HandleExtension {
	ret := _m.ctrl.Call(_m, "TlfHandleExtensions")
	ret0, _ := ret[0].([]tlf.HandleExtension)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) TlfHandleExtensions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TlfHandleExtensions")
}

func (_m *MockBareRootMetadata) GetUserDevicePublicKeys(extra ExtraMetadata) (UserDevicePublicKeys, UserDevicePublicKeys, error) {
	ret := _m.ctrl.Call(_m, "GetUserDevicePublicKeys", extra)
	ret0, _ := ret[0].(UserDevicePublicKeys)
	ret1, _ := ret[1].(UserDevicePublicKeys)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockBareRootMetadataRecorder) GetUserDevicePublicKeys(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUserDevicePublicKeys", arg0)
}

func (_m *MockBareRootMetadata) GetTLFCryptKeyParams(keyGen KeyGen, user keybase1.UID, key kbfscrypto.CryptPublicKey, extra ExtraMetadata) (kbfscrypto.TLFEphemeralPublicKey, EncryptedTLFCryptKeyClientHalf, TLFCryptKeyServerHalfID, bool, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyParams", keyGen, user, key, extra)
	ret0, _ := ret[0].(kbfscrypto.TLFEphemeralPublicKey)
	ret1, _ := ret[1].(EncryptedTLFCryptKeyClientHalf)
	ret2, _ := ret[2].(TLFCryptKeyServerHalfID)
	ret3, _ := ret[3].(bool)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

func (_mr *_MockBareRootMetadataRecorder) GetTLFCryptKeyParams(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyParams", arg0, arg1, arg2, arg3)
}

func (_m *MockBareRootMetadata) IsValidAndSigned(ctx context.Context, codec kbfscodec.Codec, crypto cryptoPure, teamMemChecker TeamMembershipChecker, extra ExtraMetadata) error {
	ret := _m.ctrl.Call(_m, "IsValidAndSigned", ctx, codec, crypto, teamMemChecker, extra)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) IsValidAndSigned(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsValidAndSigned", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockBareRootMetadata) IsLastModifiedBy(uid keybase1.UID, key kbfscrypto.VerifyingKey) error {
	ret := _m.ctrl.Call(_m, "IsLastModifiedBy", uid, key)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) IsLastModifiedBy(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsLastModifiedBy", arg0, arg1)
}

func (_m *MockBareRootMetadata) LastModifyingWriter() keybase1.UID {
	ret := _m.ctrl.Call(_m, "LastModifyingWriter")
	ret0, _ := ret[0].(keybase1.UID)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) LastModifyingWriter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LastModifyingWriter")
}

func (_m *MockBareRootMetadata) GetLastModifyingUser() keybase1.UID {
	ret := _m.ctrl.Call(_m, "GetLastModifyingUser")
	ret0, _ := ret[0].(keybase1.UID)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) GetLastModifyingUser() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLastModifyingUser")
}

func (_m *MockBareRootMetadata) RefBytes() uint64 {
	ret := _m.ctrl.Call(_m, "RefBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) RefBytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RefBytes")
}

func (_m *MockBareRootMetadata) UnrefBytes() uint64 {
	ret := _m.ctrl.Call(_m, "UnrefBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) UnrefBytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnrefBytes")
}

func (_m *MockBareRootMetadata) MDRefBytes() uint64 {
	ret := _m.ctrl.Call(_m, "MDRefBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) MDRefBytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MDRefBytes")
}

func (_m *MockBareRootMetadata) DiskUsage() uint64 {
	ret := _m.ctrl.Call(_m, "DiskUsage")
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) DiskUsage() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DiskUsage")
}

func (_m *MockBareRootMetadata) MDDiskUsage() uint64 {
	ret := _m.ctrl.Call(_m, "MDDiskUsage")
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) MDDiskUsage() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MDDiskUsage")
}

func (_m *MockBareRootMetadata) RevisionNumber() kbfsmd.Revision {
	ret := _m.ctrl.Call(_m, "RevisionNumber")
	ret0, _ := ret[0].(kbfsmd.Revision)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) RevisionNumber() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RevisionNumber")
}

func (_m *MockBareRootMetadata) MerkleSeqNo() MerkleSeqNo {
	ret := _m.ctrl.Call(_m, "MerkleSeqNo")
	ret0, _ := ret[0].(MerkleSeqNo)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) MerkleSeqNo() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MerkleSeqNo")
}

func (_m *MockBareRootMetadata) BID() BranchID {
	ret := _m.ctrl.Call(_m, "BID")
	ret0, _ := ret[0].(BranchID)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) BID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BID")
}

func (_m *MockBareRootMetadata) GetPrevRoot() kbfsmd.ID {
	ret := _m.ctrl.Call(_m, "GetPrevRoot")
	ret0, _ := ret[0].(kbfsmd.ID)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) GetPrevRoot() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPrevRoot")
}

func (_m *MockBareRootMetadata) IsUnmergedSet() bool {
	ret := _m.ctrl.Call(_m, "IsUnmergedSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) IsUnmergedSet() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsUnmergedSet")
}

func (_m *MockBareRootMetadata) GetSerializedPrivateMetadata() []byte {
	ret := _m.ctrl.Call(_m, "GetSerializedPrivateMetadata")
	ret0, _ := ret[0].([]byte)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) GetSerializedPrivateMetadata() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSerializedPrivateMetadata")
}

func (_m *MockBareRootMetadata) GetSerializedWriterMetadata(codec kbfscodec.Codec) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "GetSerializedWriterMetadata", codec)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBareRootMetadataRecorder) GetSerializedWriterMetadata(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSerializedWriterMetadata", arg0)
}

func (_m *MockBareRootMetadata) Version() MetadataVer {
	ret := _m.ctrl.Call(_m, "Version")
	ret0, _ := ret[0].(MetadataVer)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) Version() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Version")
}

func (_m *MockBareRootMetadata) GetCurrentTLFPublicKey(_param0 ExtraMetadata) (kbfscrypto.TLFPublicKey, error) {
	ret := _m.ctrl.Call(_m, "GetCurrentTLFPublicKey", _param0)
	ret0, _ := ret[0].(kbfscrypto.TLFPublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBareRootMetadataRecorder) GetCurrentTLFPublicKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCurrentTLFPublicKey", arg0)
}

func (_m *MockBareRootMetadata) GetUnresolvedParticipants() []keybase1.SocialAssertion {
	ret := _m.ctrl.Call(_m, "GetUnresolvedParticipants")
	ret0, _ := ret[0].([]keybase1.SocialAssertion)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) GetUnresolvedParticipants() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUnresolvedParticipants")
}

func (_m *MockBareRootMetadata) GetTLFWriterKeyBundleID() TLFWriterKeyBundleID {
	ret := _m.ctrl.Call(_m, "GetTLFWriterKeyBundleID")
	ret0, _ := ret[0].(TLFWriterKeyBundleID)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) GetTLFWriterKeyBundleID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFWriterKeyBundleID")
}

func (_m *MockBareRootMetadata) GetTLFReaderKeyBundleID() TLFReaderKeyBundleID {
	ret := _m.ctrl.Call(_m, "GetTLFReaderKeyBundleID")
	ret0, _ := ret[0].(TLFReaderKeyBundleID)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) GetTLFReaderKeyBundleID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFReaderKeyBundleID")
}

func (_m *MockBareRootMetadata) StoresHistoricTLFCryptKeys() bool {
	ret := _m.ctrl.Call(_m, "StoresHistoricTLFCryptKeys")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockBareRootMetadataRecorder) StoresHistoricTLFCryptKeys() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StoresHistoricTLFCryptKeys")
}

func (_m *MockBareRootMetadata) GetHistoricTLFCryptKey(c cryptoPure, keyGen KeyGen, currentKey kbfscrypto.TLFCryptKey, extra ExtraMetadata) (kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetHistoricTLFCryptKey", c, keyGen, currentKey, extra)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBareRootMetadataRecorder) GetHistoricTLFCryptKey(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetHistoricTLFCryptKey", arg0, arg1, arg2, arg3)
}

// Mock of MutableBareRootMetadata interface
type MockMutableBareRootMetadata struct {
	ctrl     *gomock.Controller
	recorder *_MockMutableBareRootMetadataRecorder
}

// Recorder for MockMutableBareRootMetadata (not exported)
type _MockMutableBareRootMetadataRecorder struct {
	mock *MockMutableBareRootMetadata
}

func NewMockMutableBareRootMetadata(ctrl *gomock.Controller) *MockMutableBareRootMetadata {
	mock := &MockMutableBareRootMetadata{ctrl: ctrl}
	mock.recorder = &_MockMutableBareRootMetadataRecorder{mock}
	return mock
}

func (_m *MockMutableBareRootMetadata) EXPECT() *_MockMutableBareRootMetadataRecorder {
	return _m.recorder
}

func (_m *MockMutableBareRootMetadata) TlfID() tlf.ID {
	ret := _m.ctrl.Call(_m, "TlfID")
	ret0, _ := ret[0].(tlf.ID)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) TlfID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TlfID")
}

func (_m *MockMutableBareRootMetadata) KeyGenerationsToUpdate() (KeyGen, KeyGen) {
	ret := _m.ctrl.Call(_m, "KeyGenerationsToUpdate")
	ret0, _ := ret[0].(KeyGen)
	ret1, _ := ret[1].(KeyGen)
	return ret0, ret1
}

func (_mr *_MockMutableBareRootMetadataRecorder) KeyGenerationsToUpdate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyGenerationsToUpdate")
}

func (_m *MockMutableBareRootMetadata) LatestKeyGeneration() KeyGen {
	ret := _m.ctrl.Call(_m, "LatestKeyGeneration")
	ret0, _ := ret[0].(KeyGen)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) LatestKeyGeneration() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LatestKeyGeneration")
}

func (_m *MockMutableBareRootMetadata) IsValidRekeyRequest(codec kbfscodec.Codec, prevMd BareRootMetadata, user keybase1.UID, prevExtra ExtraMetadata, extra ExtraMetadata) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsValidRekeyRequest", codec, prevMd, user, prevExtra, extra)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMutableBareRootMetadataRecorder) IsValidRekeyRequest(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsValidRekeyRequest", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockMutableBareRootMetadata) MergedStatus() MergeStatus {
	ret := _m.ctrl.Call(_m, "MergedStatus")
	ret0, _ := ret[0].(MergeStatus)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) MergedStatus() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MergedStatus")
}

func (_m *MockMutableBareRootMetadata) IsRekeySet() bool {
	ret := _m.ctrl.Call(_m, "IsRekeySet")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) IsRekeySet() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsRekeySet")
}

func (_m *MockMutableBareRootMetadata) IsWriterMetadataCopiedSet() bool {
	ret := _m.ctrl.Call(_m, "IsWriterMetadataCopiedSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) IsWriterMetadataCopiedSet() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsWriterMetadataCopiedSet")
}

func (_m *MockMutableBareRootMetadata) IsFinal() bool {
	ret := _m.ctrl.Call(_m, "IsFinal")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) IsFinal() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsFinal")
}

func (_m *MockMutableBareRootMetadata) IsWriter(ctx context.Context, user keybase1.UID, deviceKey kbfscrypto.CryptPublicKey, teamMemChecker TeamMembershipChecker, extra ExtraMetadata) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsWriter", ctx, user, deviceKey, teamMemChecker, extra)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMutableBareRootMetadataRecorder) IsWriter(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsWriter", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockMutableBareRootMetadata) IsReader(ctx context.Context, user keybase1.UID, deviceKey kbfscrypto.CryptPublicKey, teamMemChecker TeamMembershipChecker, extra ExtraMetadata) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsReader", ctx, user, deviceKey, teamMemChecker, extra)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMutableBareRootMetadataRecorder) IsReader(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsReader", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockMutableBareRootMetadata) DeepCopy(codec kbfscodec.Codec) (MutableBareRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "DeepCopy", codec)
	ret0, _ := ret[0].(MutableBareRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMutableBareRootMetadataRecorder) DeepCopy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeepCopy", arg0)
}

func (_m *MockMutableBareRootMetadata) MakeSuccessorCopy(codec kbfscodec.Codec, crypto cryptoPure, extra ExtraMetadata, latestMDVer MetadataVer, tlfCryptKeyGetter func() ([]kbfscrypto.TLFCryptKey, error), isReadableAndWriter bool) (MutableBareRootMetadata, ExtraMetadata, error) {
	ret := _m.ctrl.Call(_m, "MakeSuccessorCopy", codec, crypto, extra, latestMDVer, tlfCryptKeyGetter, isReadableAndWriter)
	ret0, _ := ret[0].(MutableBareRootMetadata)
	ret1, _ := ret[1].(ExtraMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockMutableBareRootMetadataRecorder) MakeSuccessorCopy(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeSuccessorCopy", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockMutableBareRootMetadata) CheckValidSuccessor(currID kbfsmd.ID, nextMd BareRootMetadata) error {
	ret := _m.ctrl.Call(_m, "CheckValidSuccessor", currID, nextMd)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) CheckValidSuccessor(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckValidSuccessor", arg0, arg1)
}

func (_m *MockMutableBareRootMetadata) CheckValidSuccessorForServer(currID kbfsmd.ID, nextMd BareRootMetadata) error {
	ret := _m.ctrl.Call(_m, "CheckValidSuccessorForServer", currID, nextMd)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) CheckValidSuccessorForServer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckValidSuccessorForServer", arg0, arg1)
}

func (_m *MockMutableBareRootMetadata) MakeBareTlfHandle(extra ExtraMetadata) (tlf.Handle, error) {
	ret := _m.ctrl.Call(_m, "MakeBareTlfHandle", extra)
	ret0, _ := ret[0].(tlf.Handle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMutableBareRootMetadataRecorder) MakeBareTlfHandle(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeBareTlfHandle", arg0)
}

func (_m *MockMutableBareRootMetadata) TlfHandleExtensions() []tlf.HandleExtension {
	ret := _m.ctrl.Call(_m, "TlfHandleExtensions")
	ret0, _ := ret[0].([]tlf.HandleExtension)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) TlfHandleExtensions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TlfHandleExtensions")
}

func (_m *MockMutableBareRootMetadata) GetUserDevicePublicKeys(extra ExtraMetadata) (UserDevicePublicKeys, UserDevicePublicKeys, error) {
	ret := _m.ctrl.Call(_m, "GetUserDevicePublicKeys", extra)
	ret0, _ := ret[0].(UserDevicePublicKeys)
	ret1, _ := ret[1].(UserDevicePublicKeys)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockMutableBareRootMetadataRecorder) GetUserDevicePublicKeys(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUserDevicePublicKeys", arg0)
}

func (_m *MockMutableBareRootMetadata) GetTLFCryptKeyParams(keyGen KeyGen, user keybase1.UID, key kbfscrypto.CryptPublicKey, extra ExtraMetadata) (kbfscrypto.TLFEphemeralPublicKey, EncryptedTLFCryptKeyClientHalf, TLFCryptKeyServerHalfID, bool, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyParams", keyGen, user, key, extra)
	ret0, _ := ret[0].(kbfscrypto.TLFEphemeralPublicKey)
	ret1, _ := ret[1].(EncryptedTLFCryptKeyClientHalf)
	ret2, _ := ret[2].(TLFCryptKeyServerHalfID)
	ret3, _ := ret[3].(bool)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

func (_mr *_MockMutableBareRootMetadataRecorder) GetTLFCryptKeyParams(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyParams", arg0, arg1, arg2, arg3)
}

func (_m *MockMutableBareRootMetadata) IsValidAndSigned(ctx context.Context, codec kbfscodec.Codec, crypto cryptoPure, teamMemChecker TeamMembershipChecker, extra ExtraMetadata) error {
	ret := _m.ctrl.Call(_m, "IsValidAndSigned", ctx, codec, crypto, teamMemChecker, extra)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) IsValidAndSigned(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsValidAndSigned", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockMutableBareRootMetadata) IsLastModifiedBy(uid keybase1.UID, key kbfscrypto.VerifyingKey) error {
	ret := _m.ctrl.Call(_m, "IsLastModifiedBy", uid, key)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) IsLastModifiedBy(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsLastModifiedBy", arg0, arg1)
}

func (_m *MockMutableBareRootMetadata) LastModifyingWriter() keybase1.UID {
	ret := _m.ctrl.Call(_m, "LastModifyingWriter")
	ret0, _ := ret[0].(keybase1.UID)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) LastModifyingWriter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LastModifyingWriter")
}

func (_m *MockMutableBareRootMetadata) GetLastModifyingUser() keybase1.UID {
	ret := _m.ctrl.Call(_m, "GetLastModifyingUser")
	ret0, _ := ret[0].(keybase1.UID)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) GetLastModifyingUser() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLastModifyingUser")
}

func (_m *MockMutableBareRootMetadata) RefBytes() uint64 {
	ret := _m.ctrl.Call(_m, "RefBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) RefBytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RefBytes")
}

func (_m *MockMutableBareRootMetadata) UnrefBytes() uint64 {
	ret := _m.ctrl.Call(_m, "UnrefBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) UnrefBytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnrefBytes")
}

func (_m *MockMutableBareRootMetadata) MDRefBytes() uint64 {
	ret := _m.ctrl.Call(_m, "MDRefBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) MDRefBytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MDRefBytes")
}

func (_m *MockMutableBareRootMetadata) DiskUsage() uint64 {
	ret := _m.ctrl.Call(_m, "DiskUsage")
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) DiskUsage() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DiskUsage")
}

func (_m *MockMutableBareRootMetadata) MDDiskUsage() uint64 {
	ret := _m.ctrl.Call(_m, "MDDiskUsage")
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) MDDiskUsage() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MDDiskUsage")
}

func (_m *MockMutableBareRootMetadata) RevisionNumber() kbfsmd.Revision {
	ret := _m.ctrl.Call(_m, "RevisionNumber")
	ret0, _ := ret[0].(kbfsmd.Revision)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) RevisionNumber() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RevisionNumber")
}

func (_m *MockMutableBareRootMetadata) MerkleSeqNo() MerkleSeqNo {
	ret := _m.ctrl.Call(_m, "MerkleSeqNo")
	ret0, _ := ret[0].(MerkleSeqNo)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) MerkleSeqNo() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MerkleSeqNo")
}

func (_m *MockMutableBareRootMetadata) BID() BranchID {
	ret := _m.ctrl.Call(_m, "BID")
	ret0, _ := ret[0].(BranchID)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) BID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BID")
}

func (_m *MockMutableBareRootMetadata) GetPrevRoot() kbfsmd.ID {
	ret := _m.ctrl.Call(_m, "GetPrevRoot")
	ret0, _ := ret[0].(kbfsmd.ID)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) GetPrevRoot() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPrevRoot")
}

func (_m *MockMutableBareRootMetadata) IsUnmergedSet() bool {
	ret := _m.ctrl.Call(_m, "IsUnmergedSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) IsUnmergedSet() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsUnmergedSet")
}

func (_m *MockMutableBareRootMetadata) GetSerializedPrivateMetadata() []byte {
	ret := _m.ctrl.Call(_m, "GetSerializedPrivateMetadata")
	ret0, _ := ret[0].([]byte)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) GetSerializedPrivateMetadata() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSerializedPrivateMetadata")
}

func (_m *MockMutableBareRootMetadata) GetSerializedWriterMetadata(codec kbfscodec.Codec) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "GetSerializedWriterMetadata", codec)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMutableBareRootMetadataRecorder) GetSerializedWriterMetadata(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSerializedWriterMetadata", arg0)
}

func (_m *MockMutableBareRootMetadata) Version() MetadataVer {
	ret := _m.ctrl.Call(_m, "Version")
	ret0, _ := ret[0].(MetadataVer)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) Version() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Version")
}

func (_m *MockMutableBareRootMetadata) GetCurrentTLFPublicKey(_param0 ExtraMetadata) (kbfscrypto.TLFPublicKey, error) {
	ret := _m.ctrl.Call(_m, "GetCurrentTLFPublicKey", _param0)
	ret0, _ := ret[0].(kbfscrypto.TLFPublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMutableBareRootMetadataRecorder) GetCurrentTLFPublicKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCurrentTLFPublicKey", arg0)
}

func (_m *MockMutableBareRootMetadata) GetUnresolvedParticipants() []keybase1.SocialAssertion {
	ret := _m.ctrl.Call(_m, "GetUnresolvedParticipants")
	ret0, _ := ret[0].([]keybase1.SocialAssertion)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) GetUnresolvedParticipants() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUnresolvedParticipants")
}

func (_m *MockMutableBareRootMetadata) GetTLFWriterKeyBundleID() TLFWriterKeyBundleID {
	ret := _m.ctrl.Call(_m, "GetTLFWriterKeyBundleID")
	ret0, _ := ret[0].(TLFWriterKeyBundleID)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) GetTLFWriterKeyBundleID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFWriterKeyBundleID")
}

func (_m *MockMutableBareRootMetadata) GetTLFReaderKeyBundleID() TLFReaderKeyBundleID {
	ret := _m.ctrl.Call(_m, "GetTLFReaderKeyBundleID")
	ret0, _ := ret[0].(TLFReaderKeyBundleID)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) GetTLFReaderKeyBundleID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFReaderKeyBundleID")
}

func (_m *MockMutableBareRootMetadata) StoresHistoricTLFCryptKeys() bool {
	ret := _m.ctrl.Call(_m, "StoresHistoricTLFCryptKeys")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) StoresHistoricTLFCryptKeys() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StoresHistoricTLFCryptKeys")
}

func (_m *MockMutableBareRootMetadata) GetHistoricTLFCryptKey(c cryptoPure, keyGen KeyGen, currentKey kbfscrypto.TLFCryptKey, extra ExtraMetadata) (kbfscrypto.TLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetHistoricTLFCryptKey", c, keyGen, currentKey, extra)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMutableBareRootMetadataRecorder) GetHistoricTLFCryptKey(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetHistoricTLFCryptKey", arg0, arg1, arg2, arg3)
}

func (_m *MockMutableBareRootMetadata) SetRefBytes(refBytes uint64) {
	_m.ctrl.Call(_m, "SetRefBytes", refBytes)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetRefBytes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRefBytes", arg0)
}

func (_m *MockMutableBareRootMetadata) SetUnrefBytes(unrefBytes uint64) {
	_m.ctrl.Call(_m, "SetUnrefBytes", unrefBytes)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetUnrefBytes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetUnrefBytes", arg0)
}

func (_m *MockMutableBareRootMetadata) SetMDRefBytes(mdRefBytes uint64) {
	_m.ctrl.Call(_m, "SetMDRefBytes", mdRefBytes)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetMDRefBytes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMDRefBytes", arg0)
}

func (_m *MockMutableBareRootMetadata) SetDiskUsage(diskUsage uint64) {
	_m.ctrl.Call(_m, "SetDiskUsage", diskUsage)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetDiskUsage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetDiskUsage", arg0)
}

func (_m *MockMutableBareRootMetadata) SetMDDiskUsage(mdDiskUsage uint64) {
	_m.ctrl.Call(_m, "SetMDDiskUsage", mdDiskUsage)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetMDDiskUsage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMDDiskUsage", arg0)
}

func (_m *MockMutableBareRootMetadata) AddRefBytes(refBytes uint64) {
	_m.ctrl.Call(_m, "AddRefBytes", refBytes)
}

func (_mr *_MockMutableBareRootMetadataRecorder) AddRefBytes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddRefBytes", arg0)
}

func (_m *MockMutableBareRootMetadata) AddUnrefBytes(unrefBytes uint64) {
	_m.ctrl.Call(_m, "AddUnrefBytes", unrefBytes)
}

func (_mr *_MockMutableBareRootMetadataRecorder) AddUnrefBytes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddUnrefBytes", arg0)
}

func (_m *MockMutableBareRootMetadata) AddMDRefBytes(mdRefBytes uint64) {
	_m.ctrl.Call(_m, "AddMDRefBytes", mdRefBytes)
}

func (_mr *_MockMutableBareRootMetadataRecorder) AddMDRefBytes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddMDRefBytes", arg0)
}

func (_m *MockMutableBareRootMetadata) AddDiskUsage(diskUsage uint64) {
	_m.ctrl.Call(_m, "AddDiskUsage", diskUsage)
}

func (_mr *_MockMutableBareRootMetadataRecorder) AddDiskUsage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddDiskUsage", arg0)
}

func (_m *MockMutableBareRootMetadata) AddMDDiskUsage(mdDiskUsage uint64) {
	_m.ctrl.Call(_m, "AddMDDiskUsage", mdDiskUsage)
}

func (_mr *_MockMutableBareRootMetadataRecorder) AddMDDiskUsage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddMDDiskUsage", arg0)
}

func (_m *MockMutableBareRootMetadata) ClearRekeyBit() {
	_m.ctrl.Call(_m, "ClearRekeyBit")
}

func (_mr *_MockMutableBareRootMetadataRecorder) ClearRekeyBit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClearRekeyBit")
}

func (_m *MockMutableBareRootMetadata) ClearWriterMetadataCopiedBit() {
	_m.ctrl.Call(_m, "ClearWriterMetadataCopiedBit")
}

func (_mr *_MockMutableBareRootMetadataRecorder) ClearWriterMetadataCopiedBit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClearWriterMetadataCopiedBit")
}

func (_m *MockMutableBareRootMetadata) ClearFinalBit() {
	_m.ctrl.Call(_m, "ClearFinalBit")
}

func (_mr *_MockMutableBareRootMetadataRecorder) ClearFinalBit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClearFinalBit")
}

func (_m *MockMutableBareRootMetadata) SetUnmerged() {
	_m.ctrl.Call(_m, "SetUnmerged")
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetUnmerged() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetUnmerged")
}

func (_m *MockMutableBareRootMetadata) SetBranchID(bid BranchID) {
	_m.ctrl.Call(_m, "SetBranchID", bid)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetBranchID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBranchID", arg0)
}

func (_m *MockMutableBareRootMetadata) SetPrevRoot(mdID kbfsmd.ID) {
	_m.ctrl.Call(_m, "SetPrevRoot", mdID)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetPrevRoot(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetPrevRoot", arg0)
}

func (_m *MockMutableBareRootMetadata) SetSerializedPrivateMetadata(spmd []byte) {
	_m.ctrl.Call(_m, "SetSerializedPrivateMetadata", spmd)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetSerializedPrivateMetadata(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetSerializedPrivateMetadata", arg0)
}

func (_m *MockMutableBareRootMetadata) SignWriterMetadataInternally(ctx context.Context, codec kbfscodec.Codec, signer kbfscrypto.Signer) error {
	ret := _m.ctrl.Call(_m, "SignWriterMetadataInternally", ctx, codec, signer)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) SignWriterMetadataInternally(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SignWriterMetadataInternally", arg0, arg1, arg2)
}

func (_m *MockMutableBareRootMetadata) SetLastModifyingWriter(user keybase1.UID) {
	_m.ctrl.Call(_m, "SetLastModifyingWriter", user)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetLastModifyingWriter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLastModifyingWriter", arg0)
}

func (_m *MockMutableBareRootMetadata) SetLastModifyingUser(user keybase1.UID) {
	_m.ctrl.Call(_m, "SetLastModifyingUser", user)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetLastModifyingUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLastModifyingUser", arg0)
}

func (_m *MockMutableBareRootMetadata) SetRekeyBit() {
	_m.ctrl.Call(_m, "SetRekeyBit")
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetRekeyBit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRekeyBit")
}

func (_m *MockMutableBareRootMetadata) SetFinalBit() {
	_m.ctrl.Call(_m, "SetFinalBit")
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetFinalBit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFinalBit")
}

func (_m *MockMutableBareRootMetadata) SetWriterMetadataCopiedBit() {
	_m.ctrl.Call(_m, "SetWriterMetadataCopiedBit")
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetWriterMetadataCopiedBit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWriterMetadataCopiedBit")
}

func (_m *MockMutableBareRootMetadata) SetRevision(revision kbfsmd.Revision) {
	_m.ctrl.Call(_m, "SetRevision", revision)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetRevision(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRevision", arg0)
}

func (_m *MockMutableBareRootMetadata) SetMerkleSeqNo(seqNo MerkleSeqNo) {
	_m.ctrl.Call(_m, "SetMerkleSeqNo", seqNo)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetMerkleSeqNo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMerkleSeqNo", arg0)
}

func (_m *MockMutableBareRootMetadata) SetUnresolvedReaders(readers []keybase1.SocialAssertion) {
	_m.ctrl.Call(_m, "SetUnresolvedReaders", readers)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetUnresolvedReaders(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetUnresolvedReaders", arg0)
}

func (_m *MockMutableBareRootMetadata) SetUnresolvedWriters(writers []keybase1.SocialAssertion) {
	_m.ctrl.Call(_m, "SetUnresolvedWriters", writers)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetUnresolvedWriters(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetUnresolvedWriters", arg0)
}

func (_m *MockMutableBareRootMetadata) SetConflictInfo(ci *tlf.HandleExtension) {
	_m.ctrl.Call(_m, "SetConflictInfo", ci)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetConflictInfo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetConflictInfo", arg0)
}

func (_m *MockMutableBareRootMetadata) SetFinalizedInfo(fi *tlf.HandleExtension) {
	_m.ctrl.Call(_m, "SetFinalizedInfo", fi)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetFinalizedInfo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFinalizedInfo", arg0)
}

func (_m *MockMutableBareRootMetadata) SetWriters(writers []keybase1.UserOrTeamID) {
	_m.ctrl.Call(_m, "SetWriters", writers)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetWriters(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWriters", arg0)
}

func (_m *MockMutableBareRootMetadata) SetTlfID(tlf tlf.ID) {
	_m.ctrl.Call(_m, "SetTlfID", tlf)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetTlfID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTlfID", arg0)
}

func (_m *MockMutableBareRootMetadata) AddKeyGeneration(codec kbfscodec.Codec, crypto cryptoPure, currExtra ExtraMetadata, updatedWriterKeys UserDevicePublicKeys, updatedReaderKeys UserDevicePublicKeys, ePubKey kbfscrypto.TLFEphemeralPublicKey, ePrivKey kbfscrypto.TLFEphemeralPrivateKey, pubKey kbfscrypto.TLFPublicKey, currCryptKey kbfscrypto.TLFCryptKey, nextCryptKey kbfscrypto.TLFCryptKey) (ExtraMetadata, UserDeviceKeyServerHalves, error) {
	ret := _m.ctrl.Call(_m, "AddKeyGeneration", codec, crypto, currExtra, updatedWriterKeys, updatedReaderKeys, ePubKey, ePrivKey, pubKey, currCryptKey, nextCryptKey)
	ret0, _ := ret[0].(ExtraMetadata)
	ret1, _ := ret[1].(UserDeviceKeyServerHalves)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockMutableBareRootMetadataRecorder) AddKeyGeneration(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddKeyGeneration", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

func (_m *MockMutableBareRootMetadata) SetLatestKeyGenerationForTeamTLF(keyGen KeyGen) {
	_m.ctrl.Call(_m, "SetLatestKeyGenerationForTeamTLF", keyGen)
}

func (_mr *_MockMutableBareRootMetadataRecorder) SetLatestKeyGenerationForTeamTLF(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLatestKeyGenerationForTeamTLF", arg0)
}

func (_m *MockMutableBareRootMetadata) UpdateKeyBundles(crypto cryptoPure, extra ExtraMetadata, updatedWriterKeys UserDevicePublicKeys, updatedReaderKeys UserDevicePublicKeys, ePubKey kbfscrypto.TLFEphemeralPublicKey, ePrivKey kbfscrypto.TLFEphemeralPrivateKey, tlfCryptKeys []kbfscrypto.TLFCryptKey) ([]UserDeviceKeyServerHalves, error) {
	ret := _m.ctrl.Call(_m, "UpdateKeyBundles", crypto, extra, updatedWriterKeys, updatedReaderKeys, ePubKey, ePrivKey, tlfCryptKeys)
	ret0, _ := ret[0].([]UserDeviceKeyServerHalves)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMutableBareRootMetadataRecorder) UpdateKeyBundles(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateKeyBundles", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func (_m *MockMutableBareRootMetadata) PromoteReaders(readersToPromote map[keybase1.UID]bool, extra ExtraMetadata) error {
	ret := _m.ctrl.Call(_m, "PromoteReaders", readersToPromote, extra)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) PromoteReaders(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PromoteReaders", arg0, arg1)
}

func (_m *MockMutableBareRootMetadata) RevokeRemovedDevices(updatedWriterKeys UserDevicePublicKeys, updatedReaderKeys UserDevicePublicKeys, extra ExtraMetadata) (ServerHalfRemovalInfo, error) {
	ret := _m.ctrl.Call(_m, "RevokeRemovedDevices", updatedWriterKeys, updatedReaderKeys, extra)
	ret0, _ := ret[0].(ServerHalfRemovalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMutableBareRootMetadataRecorder) RevokeRemovedDevices(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RevokeRemovedDevices", arg0, arg1, arg2)
}

func (_m *MockMutableBareRootMetadata) FinalizeRekey(c cryptoPure, extra ExtraMetadata) error {
	ret := _m.ctrl.Call(_m, "FinalizeRekey", c, extra)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMutableBareRootMetadataRecorder) FinalizeRekey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FinalizeRekey", arg0, arg1)
}

// Mock of KeyBundleCache interface
type MockKeyBundleCache struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyBundleCacheRecorder
}

// Recorder for MockKeyBundleCache (not exported)
type _MockKeyBundleCacheRecorder struct {
	mock *MockKeyBundleCache
}

func NewMockKeyBundleCache(ctrl *gomock.Controller) *MockKeyBundleCache {
	mock := &MockKeyBundleCache{ctrl: ctrl}
	mock.recorder = &_MockKeyBundleCacheRecorder{mock}
	return mock
}

func (_m *MockKeyBundleCache) EXPECT() *_MockKeyBundleCacheRecorder {
	return _m.recorder
}

func (_m *MockKeyBundleCache) GetTLFReaderKeyBundle(_param0 tlf.ID, _param1 TLFReaderKeyBundleID) (*TLFReaderKeyBundleV3, error) {
	ret := _m.ctrl.Call(_m, "GetTLFReaderKeyBundle", _param0, _param1)
	ret0, _ := ret[0].(*TLFReaderKeyBundleV3)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyBundleCacheRecorder) GetTLFReaderKeyBundle(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFReaderKeyBundle", arg0, arg1)
}

func (_m *MockKeyBundleCache) GetTLFWriterKeyBundle(_param0 tlf.ID, _param1 TLFWriterKeyBundleID) (*TLFWriterKeyBundleV3, error) {
	ret := _m.ctrl.Call(_m, "GetTLFWriterKeyBundle", _param0, _param1)
	ret0, _ := ret[0].(*TLFWriterKeyBundleV3)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyBundleCacheRecorder) GetTLFWriterKeyBundle(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFWriterKeyBundle", arg0, arg1)
}

func (_m *MockKeyBundleCache) PutTLFReaderKeyBundle(_param0 tlf.ID, _param1 TLFReaderKeyBundleID, _param2 TLFReaderKeyBundleV3) {
	_m.ctrl.Call(_m, "PutTLFReaderKeyBundle", _param0, _param1, _param2)
}

func (_mr *_MockKeyBundleCacheRecorder) PutTLFReaderKeyBundle(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutTLFReaderKeyBundle", arg0, arg1, arg2)
}

func (_m *MockKeyBundleCache) PutTLFWriterKeyBundle(_param0 tlf.ID, _param1 TLFWriterKeyBundleID, _param2 TLFWriterKeyBundleV3) {
	_m.ctrl.Call(_m, "PutTLFWriterKeyBundle", _param0, _param1, _param2)
}

func (_mr *_MockKeyBundleCacheRecorder) PutTLFWriterKeyBundle(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutTLFWriterKeyBundle", arg0, arg1, arg2)
}

// Mock of RekeyFSM interface
type MockRekeyFSM struct {
	ctrl     *gomock.Controller
	recorder *_MockRekeyFSMRecorder
}

// Recorder for MockRekeyFSM (not exported)
type _MockRekeyFSMRecorder struct {
	mock *MockRekeyFSM
}

func NewMockRekeyFSM(ctrl *gomock.Controller) *MockRekeyFSM {
	mock := &MockRekeyFSM{ctrl: ctrl}
	mock.recorder = &_MockRekeyFSMRecorder{mock}
	return mock
}

func (_m *MockRekeyFSM) EXPECT() *_MockRekeyFSMRecorder {
	return _m.recorder
}

func (_m *MockRekeyFSM) Event(event RekeyEvent) {
	_m.ctrl.Call(_m, "Event", event)
}

func (_mr *_MockRekeyFSMRecorder) Event(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Event", arg0)
}

func (_m *MockRekeyFSM) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockRekeyFSMRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

func (_m *MockRekeyFSM) listenOnEvent(event rekeyEventType, callback func(RekeyEvent), repeatedly bool) {
	_m.ctrl.Call(_m, "listenOnEvent", event, callback, repeatedly)
}

func (_mr *_MockRekeyFSMRecorder) listenOnEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "listenOnEvent", arg0, arg1, arg2)
}

// Mock of BlockRetriever interface
type MockBlockRetriever struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockRetrieverRecorder
}

// Recorder for MockBlockRetriever (not exported)
type _MockBlockRetrieverRecorder struct {
	mock *MockBlockRetriever
}

func NewMockBlockRetriever(ctrl *gomock.Controller) *MockBlockRetriever {
	mock := &MockBlockRetriever{ctrl: ctrl}
	mock.recorder = &_MockBlockRetrieverRecorder{mock}
	return mock
}

func (_m *MockBlockRetriever) EXPECT() *_MockBlockRetrieverRecorder {
	return _m.recorder
}

func (_m *MockBlockRetriever) Request(ctx context.Context, priority int, kmd KeyMetadata, ptr BlockPointer, block Block, lifetime BlockCacheLifetime) <-chan error {
	ret := _m.ctrl.Call(_m, "Request", ctx, priority, kmd, ptr, block, lifetime)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

func (_mr *_MockBlockRetrieverRecorder) Request(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Request", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockBlockRetriever) CacheAndPrefetch(ctx context.Context, ptr BlockPointer, block Block, kmd KeyMetadata, priority int, lifetime BlockCacheLifetime, hasPrefetched bool) error {
	ret := _m.ctrl.Call(_m, "CacheAndPrefetch", ctx, ptr, block, kmd, priority, lifetime, hasPrefetched)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockRetrieverRecorder) CacheAndPrefetch(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CacheAndPrefetch", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}
