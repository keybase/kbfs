// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package libkbfs is a generated GoMock package.
package libkbfs

import (
	gomock "github.com/golang/mock/gomock"
	libkb "github.com/keybase/client/go/libkb"
	logger "github.com/keybase/client/go/logger"
	keybase1 "github.com/keybase/client/go/protocol/keybase1"
	kbfsblock "github.com/keybase/kbfs/kbfsblock"
	kbfscodec "github.com/keybase/kbfs/kbfscodec"
	kbfscrypto "github.com/keybase/kbfs/kbfscrypto"
	kbfsmd "github.com/keybase/kbfs/kbfsmd"
	tlf "github.com/keybase/kbfs/tlf"
	go_metrics "github.com/rcrowley/go-metrics"
	context "golang.org/x/net/context"
	reflect "reflect"
	time "time"
)

// MockdataVersioner is a mock of dataVersioner interface
type MockdataVersioner struct {
	ctrl     *gomock.Controller
	recorder *MockdataVersionerMockRecorder
}

// MockdataVersionerMockRecorder is the mock recorder for MockdataVersioner
type MockdataVersionerMockRecorder struct {
	mock *MockdataVersioner
}

// NewMockdataVersioner creates a new mock instance
func NewMockdataVersioner(ctrl *gomock.Controller) *MockdataVersioner {
	mock := &MockdataVersioner{ctrl: ctrl}
	mock.recorder = &MockdataVersionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdataVersioner) EXPECT() *MockdataVersionerMockRecorder {
	return m.recorder
}

// DataVersion mocks base method
func (m *MockdataVersioner) DataVersion() DataVer {
	ret := m.ctrl.Call(m, "DataVersion")
	ret0, _ := ret[0].(DataVer)
	return ret0
}

// DataVersion indicates an expected call of DataVersion
func (mr *MockdataVersionerMockRecorder) DataVersion() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataVersion", reflect.TypeOf((*MockdataVersioner)(nil).DataVersion))
}

// MocklogMaker is a mock of logMaker interface
type MocklogMaker struct {
	ctrl     *gomock.Controller
	recorder *MocklogMakerMockRecorder
}

// MocklogMakerMockRecorder is the mock recorder for MocklogMaker
type MocklogMakerMockRecorder struct {
	mock *MocklogMaker
}

// NewMocklogMaker creates a new mock instance
func NewMocklogMaker(ctrl *gomock.Controller) *MocklogMaker {
	mock := &MocklogMaker{ctrl: ctrl}
	mock.recorder = &MocklogMakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocklogMaker) EXPECT() *MocklogMakerMockRecorder {
	return m.recorder
}

// MakeLogger mocks base method
func (m *MocklogMaker) MakeLogger(module string) logger.Logger {
	ret := m.ctrl.Call(m, "MakeLogger", module)
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

// MakeLogger indicates an expected call of MakeLogger
func (mr *MocklogMakerMockRecorder) MakeLogger(module interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeLogger", reflect.TypeOf((*MocklogMaker)(nil).MakeLogger), module)
}

// MockblockCacher is a mock of blockCacher interface
type MockblockCacher struct {
	ctrl     *gomock.Controller
	recorder *MockblockCacherMockRecorder
}

// MockblockCacherMockRecorder is the mock recorder for MockblockCacher
type MockblockCacherMockRecorder struct {
	mock *MockblockCacher
}

// NewMockblockCacher creates a new mock instance
func NewMockblockCacher(ctrl *gomock.Controller) *MockblockCacher {
	mock := &MockblockCacher{ctrl: ctrl}
	mock.recorder = &MockblockCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockblockCacher) EXPECT() *MockblockCacherMockRecorder {
	return m.recorder
}

// BlockCache mocks base method
func (m *MockblockCacher) BlockCache() BlockCache {
	ret := m.ctrl.Call(m, "BlockCache")
	ret0, _ := ret[0].(BlockCache)
	return ret0
}

// BlockCache indicates an expected call of BlockCache
func (mr *MockblockCacherMockRecorder) BlockCache() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockCache", reflect.TypeOf((*MockblockCacher)(nil).BlockCache))
}

// MockkeyGetterGetter is a mock of keyGetterGetter interface
type MockkeyGetterGetter struct {
	ctrl     *gomock.Controller
	recorder *MockkeyGetterGetterMockRecorder
}

// MockkeyGetterGetterMockRecorder is the mock recorder for MockkeyGetterGetter
type MockkeyGetterGetterMockRecorder struct {
	mock *MockkeyGetterGetter
}

// NewMockkeyGetterGetter creates a new mock instance
func NewMockkeyGetterGetter(ctrl *gomock.Controller) *MockkeyGetterGetter {
	mock := &MockkeyGetterGetter{ctrl: ctrl}
	mock.recorder = &MockkeyGetterGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockkeyGetterGetter) EXPECT() *MockkeyGetterGetterMockRecorder {
	return m.recorder
}

// keyGetter mocks base method
func (m *MockkeyGetterGetter) keyGetter() blockKeyGetter {
	ret := m.ctrl.Call(m, "keyGetter")
	ret0, _ := ret[0].(blockKeyGetter)
	return ret0
}

// keyGetter indicates an expected call of keyGetter
func (mr *MockkeyGetterGetterMockRecorder) keyGetter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "keyGetter", reflect.TypeOf((*MockkeyGetterGetter)(nil).keyGetter))
}

// MockcodecGetter is a mock of codecGetter interface
type MockcodecGetter struct {
	ctrl     *gomock.Controller
	recorder *MockcodecGetterMockRecorder
}

// MockcodecGetterMockRecorder is the mock recorder for MockcodecGetter
type MockcodecGetterMockRecorder struct {
	mock *MockcodecGetter
}

// NewMockcodecGetter creates a new mock instance
func NewMockcodecGetter(ctrl *gomock.Controller) *MockcodecGetter {
	mock := &MockcodecGetter{ctrl: ctrl}
	mock.recorder = &MockcodecGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcodecGetter) EXPECT() *MockcodecGetterMockRecorder {
	return m.recorder
}

// Codec mocks base method
func (m *MockcodecGetter) Codec() kbfscodec.Codec {
	ret := m.ctrl.Call(m, "Codec")
	ret0, _ := ret[0].(kbfscodec.Codec)
	return ret0
}

// Codec indicates an expected call of Codec
func (mr *MockcodecGetterMockRecorder) Codec() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Codec", reflect.TypeOf((*MockcodecGetter)(nil).Codec))
}

// MockblockServerGetter is a mock of blockServerGetter interface
type MockblockServerGetter struct {
	ctrl     *gomock.Controller
	recorder *MockblockServerGetterMockRecorder
}

// MockblockServerGetterMockRecorder is the mock recorder for MockblockServerGetter
type MockblockServerGetterMockRecorder struct {
	mock *MockblockServerGetter
}

// NewMockblockServerGetter creates a new mock instance
func NewMockblockServerGetter(ctrl *gomock.Controller) *MockblockServerGetter {
	mock := &MockblockServerGetter{ctrl: ctrl}
	mock.recorder = &MockblockServerGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockblockServerGetter) EXPECT() *MockblockServerGetterMockRecorder {
	return m.recorder
}

// BlockServer mocks base method
func (m *MockblockServerGetter) BlockServer() BlockServer {
	ret := m.ctrl.Call(m, "BlockServer")
	ret0, _ := ret[0].(BlockServer)
	return ret0
}

// BlockServer indicates an expected call of BlockServer
func (mr *MockblockServerGetterMockRecorder) BlockServer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockServer", reflect.TypeOf((*MockblockServerGetter)(nil).BlockServer))
}

// MockcryptoPureGetter is a mock of cryptoPureGetter interface
type MockcryptoPureGetter struct {
	ctrl     *gomock.Controller
	recorder *MockcryptoPureGetterMockRecorder
}

// MockcryptoPureGetterMockRecorder is the mock recorder for MockcryptoPureGetter
type MockcryptoPureGetterMockRecorder struct {
	mock *MockcryptoPureGetter
}

// NewMockcryptoPureGetter creates a new mock instance
func NewMockcryptoPureGetter(ctrl *gomock.Controller) *MockcryptoPureGetter {
	mock := &MockcryptoPureGetter{ctrl: ctrl}
	mock.recorder = &MockcryptoPureGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcryptoPureGetter) EXPECT() *MockcryptoPureGetterMockRecorder {
	return m.recorder
}

// cryptoPure mocks base method
func (m *MockcryptoPureGetter) cryptoPure() cryptoPure {
	ret := m.ctrl.Call(m, "cryptoPure")
	ret0, _ := ret[0].(cryptoPure)
	return ret0
}

// cryptoPure indicates an expected call of cryptoPure
func (mr *MockcryptoPureGetterMockRecorder) cryptoPure() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cryptoPure", reflect.TypeOf((*MockcryptoPureGetter)(nil).cryptoPure))
}

// MockcryptoGetter is a mock of cryptoGetter interface
type MockcryptoGetter struct {
	ctrl     *gomock.Controller
	recorder *MockcryptoGetterMockRecorder
}

// MockcryptoGetterMockRecorder is the mock recorder for MockcryptoGetter
type MockcryptoGetterMockRecorder struct {
	mock *MockcryptoGetter
}

// NewMockcryptoGetter creates a new mock instance
func NewMockcryptoGetter(ctrl *gomock.Controller) *MockcryptoGetter {
	mock := &MockcryptoGetter{ctrl: ctrl}
	mock.recorder = &MockcryptoGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcryptoGetter) EXPECT() *MockcryptoGetterMockRecorder {
	return m.recorder
}

// Crypto mocks base method
func (m *MockcryptoGetter) Crypto() Crypto {
	ret := m.ctrl.Call(m, "Crypto")
	ret0, _ := ret[0].(Crypto)
	return ret0
}

// Crypto indicates an expected call of Crypto
func (mr *MockcryptoGetterMockRecorder) Crypto() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Crypto", reflect.TypeOf((*MockcryptoGetter)(nil).Crypto))
}

// MockcurrentSessionGetterGetter is a mock of currentSessionGetterGetter interface
type MockcurrentSessionGetterGetter struct {
	ctrl     *gomock.Controller
	recorder *MockcurrentSessionGetterGetterMockRecorder
}

// MockcurrentSessionGetterGetterMockRecorder is the mock recorder for MockcurrentSessionGetterGetter
type MockcurrentSessionGetterGetterMockRecorder struct {
	mock *MockcurrentSessionGetterGetter
}

// NewMockcurrentSessionGetterGetter creates a new mock instance
func NewMockcurrentSessionGetterGetter(ctrl *gomock.Controller) *MockcurrentSessionGetterGetter {
	mock := &MockcurrentSessionGetterGetter{ctrl: ctrl}
	mock.recorder = &MockcurrentSessionGetterGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcurrentSessionGetterGetter) EXPECT() *MockcurrentSessionGetterGetterMockRecorder {
	return m.recorder
}

// CurrentSessionGetter mocks base method
func (m *MockcurrentSessionGetterGetter) CurrentSessionGetter() CurrentSessionGetter {
	ret := m.ctrl.Call(m, "CurrentSessionGetter")
	ret0, _ := ret[0].(CurrentSessionGetter)
	return ret0
}

// CurrentSessionGetter indicates an expected call of CurrentSessionGetter
func (mr *MockcurrentSessionGetterGetterMockRecorder) CurrentSessionGetter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentSessionGetter", reflect.TypeOf((*MockcurrentSessionGetterGetter)(nil).CurrentSessionGetter))
}

// MocksignerGetter is a mock of signerGetter interface
type MocksignerGetter struct {
	ctrl     *gomock.Controller
	recorder *MocksignerGetterMockRecorder
}

// MocksignerGetterMockRecorder is the mock recorder for MocksignerGetter
type MocksignerGetterMockRecorder struct {
	mock *MocksignerGetter
}

// NewMocksignerGetter creates a new mock instance
func NewMocksignerGetter(ctrl *gomock.Controller) *MocksignerGetter {
	mock := &MocksignerGetter{ctrl: ctrl}
	mock.recorder = &MocksignerGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksignerGetter) EXPECT() *MocksignerGetterMockRecorder {
	return m.recorder
}

// Signer mocks base method
func (m *MocksignerGetter) Signer() kbfscrypto.Signer {
	ret := m.ctrl.Call(m, "Signer")
	ret0, _ := ret[0].(kbfscrypto.Signer)
	return ret0
}

// Signer indicates an expected call of Signer
func (mr *MocksignerGetterMockRecorder) Signer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signer", reflect.TypeOf((*MocksignerGetter)(nil).Signer))
}

// MockdiskBlockCacheGetter is a mock of diskBlockCacheGetter interface
type MockdiskBlockCacheGetter struct {
	ctrl     *gomock.Controller
	recorder *MockdiskBlockCacheGetterMockRecorder
}

// MockdiskBlockCacheGetterMockRecorder is the mock recorder for MockdiskBlockCacheGetter
type MockdiskBlockCacheGetterMockRecorder struct {
	mock *MockdiskBlockCacheGetter
}

// NewMockdiskBlockCacheGetter creates a new mock instance
func NewMockdiskBlockCacheGetter(ctrl *gomock.Controller) *MockdiskBlockCacheGetter {
	mock := &MockdiskBlockCacheGetter{ctrl: ctrl}
	mock.recorder = &MockdiskBlockCacheGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdiskBlockCacheGetter) EXPECT() *MockdiskBlockCacheGetterMockRecorder {
	return m.recorder
}

// DiskBlockCache mocks base method
func (m *MockdiskBlockCacheGetter) DiskBlockCache() DiskBlockCache {
	ret := m.ctrl.Call(m, "DiskBlockCache")
	ret0, _ := ret[0].(DiskBlockCache)
	return ret0
}

// DiskBlockCache indicates an expected call of DiskBlockCache
func (mr *MockdiskBlockCacheGetterMockRecorder) DiskBlockCache() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskBlockCache", reflect.TypeOf((*MockdiskBlockCacheGetter)(nil).DiskBlockCache))
}

// MockdiskBlockCacheSetter is a mock of diskBlockCacheSetter interface
type MockdiskBlockCacheSetter struct {
	ctrl     *gomock.Controller
	recorder *MockdiskBlockCacheSetterMockRecorder
}

// MockdiskBlockCacheSetterMockRecorder is the mock recorder for MockdiskBlockCacheSetter
type MockdiskBlockCacheSetterMockRecorder struct {
	mock *MockdiskBlockCacheSetter
}

// NewMockdiskBlockCacheSetter creates a new mock instance
func NewMockdiskBlockCacheSetter(ctrl *gomock.Controller) *MockdiskBlockCacheSetter {
	mock := &MockdiskBlockCacheSetter{ctrl: ctrl}
	mock.recorder = &MockdiskBlockCacheSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdiskBlockCacheSetter) EXPECT() *MockdiskBlockCacheSetterMockRecorder {
	return m.recorder
}

// MakeDiskBlockCacheIfNotExists mocks base method
func (m *MockdiskBlockCacheSetter) MakeDiskBlockCacheIfNotExists() error {
	ret := m.ctrl.Call(m, "MakeDiskBlockCacheIfNotExists")
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeDiskBlockCacheIfNotExists indicates an expected call of MakeDiskBlockCacheIfNotExists
func (mr *MockdiskBlockCacheSetterMockRecorder) MakeDiskBlockCacheIfNotExists() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDiskBlockCacheIfNotExists", reflect.TypeOf((*MockdiskBlockCacheSetter)(nil).MakeDiskBlockCacheIfNotExists))
}

// MockclockGetter is a mock of clockGetter interface
type MockclockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockclockGetterMockRecorder
}

// MockclockGetterMockRecorder is the mock recorder for MockclockGetter
type MockclockGetterMockRecorder struct {
	mock *MockclockGetter
}

// NewMockclockGetter creates a new mock instance
func NewMockclockGetter(ctrl *gomock.Controller) *MockclockGetter {
	mock := &MockclockGetter{ctrl: ctrl}
	mock.recorder = &MockclockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockclockGetter) EXPECT() *MockclockGetterMockRecorder {
	return m.recorder
}

// Clock mocks base method
func (m *MockclockGetter) Clock() Clock {
	ret := m.ctrl.Call(m, "Clock")
	ret0, _ := ret[0].(Clock)
	return ret0
}

// Clock indicates an expected call of Clock
func (mr *MockclockGetterMockRecorder) Clock() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clock", reflect.TypeOf((*MockclockGetter)(nil).Clock))
}

// MockdiskLimiterGetter is a mock of diskLimiterGetter interface
type MockdiskLimiterGetter struct {
	ctrl     *gomock.Controller
	recorder *MockdiskLimiterGetterMockRecorder
}

// MockdiskLimiterGetterMockRecorder is the mock recorder for MockdiskLimiterGetter
type MockdiskLimiterGetterMockRecorder struct {
	mock *MockdiskLimiterGetter
}

// NewMockdiskLimiterGetter creates a new mock instance
func NewMockdiskLimiterGetter(ctrl *gomock.Controller) *MockdiskLimiterGetter {
	mock := &MockdiskLimiterGetter{ctrl: ctrl}
	mock.recorder = &MockdiskLimiterGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdiskLimiterGetter) EXPECT() *MockdiskLimiterGetterMockRecorder {
	return m.recorder
}

// DiskLimiter mocks base method
func (m *MockdiskLimiterGetter) DiskLimiter() DiskLimiter {
	ret := m.ctrl.Call(m, "DiskLimiter")
	ret0, _ := ret[0].(DiskLimiter)
	return ret0
}

// DiskLimiter indicates an expected call of DiskLimiter
func (mr *MockdiskLimiterGetterMockRecorder) DiskLimiter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskLimiter", reflect.TypeOf((*MockdiskLimiterGetter)(nil).DiskLimiter))
}

// MocksyncedTlfGetterSetter is a mock of syncedTlfGetterSetter interface
type MocksyncedTlfGetterSetter struct {
	ctrl     *gomock.Controller
	recorder *MocksyncedTlfGetterSetterMockRecorder
}

// MocksyncedTlfGetterSetterMockRecorder is the mock recorder for MocksyncedTlfGetterSetter
type MocksyncedTlfGetterSetterMockRecorder struct {
	mock *MocksyncedTlfGetterSetter
}

// NewMocksyncedTlfGetterSetter creates a new mock instance
func NewMocksyncedTlfGetterSetter(ctrl *gomock.Controller) *MocksyncedTlfGetterSetter {
	mock := &MocksyncedTlfGetterSetter{ctrl: ctrl}
	mock.recorder = &MocksyncedTlfGetterSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksyncedTlfGetterSetter) EXPECT() *MocksyncedTlfGetterSetterMockRecorder {
	return m.recorder
}

// IsSyncedTlf mocks base method
func (m *MocksyncedTlfGetterSetter) IsSyncedTlf(tlfID tlf.ID) bool {
	ret := m.ctrl.Call(m, "IsSyncedTlf", tlfID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSyncedTlf indicates an expected call of IsSyncedTlf
func (mr *MocksyncedTlfGetterSetterMockRecorder) IsSyncedTlf(tlfID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSyncedTlf", reflect.TypeOf((*MocksyncedTlfGetterSetter)(nil).IsSyncedTlf), tlfID)
}

// SetTlfSyncState mocks base method
func (m *MocksyncedTlfGetterSetter) SetTlfSyncState(tlfID tlf.ID, isSynced bool) error {
	ret := m.ctrl.Call(m, "SetTlfSyncState", tlfID, isSynced)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTlfSyncState indicates an expected call of SetTlfSyncState
func (mr *MocksyncedTlfGetterSetterMockRecorder) SetTlfSyncState(tlfID, isSynced interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTlfSyncState", reflect.TypeOf((*MocksyncedTlfGetterSetter)(nil).SetTlfSyncState), tlfID, isSynced)
}

// MockBlock is a mock of Block interface
type MockBlock struct {
	ctrl     *gomock.Controller
	recorder *MockBlockMockRecorder
}

// MockBlockMockRecorder is the mock recorder for MockBlock
type MockBlockMockRecorder struct {
	mock *MockBlock
}

// NewMockBlock creates a new mock instance
func NewMockBlock(ctrl *gomock.Controller) *MockBlock {
	mock := &MockBlock{ctrl: ctrl}
	mock.recorder = &MockBlockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlock) EXPECT() *MockBlockMockRecorder {
	return m.recorder
}

// DataVersion mocks base method
func (m *MockBlock) DataVersion() DataVer {
	ret := m.ctrl.Call(m, "DataVersion")
	ret0, _ := ret[0].(DataVer)
	return ret0
}

// DataVersion indicates an expected call of DataVersion
func (mr *MockBlockMockRecorder) DataVersion() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataVersion", reflect.TypeOf((*MockBlock)(nil).DataVersion))
}

// GetEncodedSize mocks base method
func (m *MockBlock) GetEncodedSize() uint32 {
	ret := m.ctrl.Call(m, "GetEncodedSize")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetEncodedSize indicates an expected call of GetEncodedSize
func (mr *MockBlockMockRecorder) GetEncodedSize() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncodedSize", reflect.TypeOf((*MockBlock)(nil).GetEncodedSize))
}

// SetEncodedSize mocks base method
func (m *MockBlock) SetEncodedSize(size uint32) {
	m.ctrl.Call(m, "SetEncodedSize", size)
}

// SetEncodedSize indicates an expected call of SetEncodedSize
func (mr *MockBlockMockRecorder) SetEncodedSize(size interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEncodedSize", reflect.TypeOf((*MockBlock)(nil).SetEncodedSize), size)
}

// NewEmpty mocks base method
func (m *MockBlock) NewEmpty() Block {
	ret := m.ctrl.Call(m, "NewEmpty")
	ret0, _ := ret[0].(Block)
	return ret0
}

// NewEmpty indicates an expected call of NewEmpty
func (mr *MockBlockMockRecorder) NewEmpty() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEmpty", reflect.TypeOf((*MockBlock)(nil).NewEmpty))
}

// Set mocks base method
func (m *MockBlock) Set(other Block) {
	m.ctrl.Call(m, "Set", other)
}

// Set indicates an expected call of Set
func (mr *MockBlockMockRecorder) Set(other interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockBlock)(nil).Set), other)
}

// ToCommonBlock mocks base method
func (m *MockBlock) ToCommonBlock() *CommonBlock {
	ret := m.ctrl.Call(m, "ToCommonBlock")
	ret0, _ := ret[0].(*CommonBlock)
	return ret0
}

// ToCommonBlock indicates an expected call of ToCommonBlock
func (mr *MockBlockMockRecorder) ToCommonBlock() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCommonBlock", reflect.TypeOf((*MockBlock)(nil).ToCommonBlock))
}

// MockNodeID is a mock of NodeID interface
type MockNodeID struct {
	ctrl     *gomock.Controller
	recorder *MockNodeIDMockRecorder
}

// MockNodeIDMockRecorder is the mock recorder for MockNodeID
type MockNodeIDMockRecorder struct {
	mock *MockNodeID
}

// NewMockNodeID creates a new mock instance
func NewMockNodeID(ctrl *gomock.Controller) *MockNodeID {
	mock := &MockNodeID{ctrl: ctrl}
	mock.recorder = &MockNodeIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeID) EXPECT() *MockNodeIDMockRecorder {
	return m.recorder
}

// ParentID mocks base method
func (m *MockNodeID) ParentID() NodeID {
	ret := m.ctrl.Call(m, "ParentID")
	ret0, _ := ret[0].(NodeID)
	return ret0
}

// ParentID indicates an expected call of ParentID
func (mr *MockNodeIDMockRecorder) ParentID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParentID", reflect.TypeOf((*MockNodeID)(nil).ParentID))
}

// MockNode is a mock of Node interface
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// GetID mocks base method
func (m *MockNode) GetID() NodeID {
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(NodeID)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockNodeMockRecorder) GetID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockNode)(nil).GetID))
}

// GetFolderBranch mocks base method
func (m *MockNode) GetFolderBranch() FolderBranch {
	ret := m.ctrl.Call(m, "GetFolderBranch")
	ret0, _ := ret[0].(FolderBranch)
	return ret0
}

// GetFolderBranch indicates an expected call of GetFolderBranch
func (mr *MockNodeMockRecorder) GetFolderBranch() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderBranch", reflect.TypeOf((*MockNode)(nil).GetFolderBranch))
}

// GetBasename mocks base method
func (m *MockNode) GetBasename() string {
	ret := m.ctrl.Call(m, "GetBasename")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBasename indicates an expected call of GetBasename
func (mr *MockNodeMockRecorder) GetBasename() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasename", reflect.TypeOf((*MockNode)(nil).GetBasename))
}

// MockKBFSOps is a mock of KBFSOps interface
type MockKBFSOps struct {
	ctrl     *gomock.Controller
	recorder *MockKBFSOpsMockRecorder
}

// MockKBFSOpsMockRecorder is the mock recorder for MockKBFSOps
type MockKBFSOpsMockRecorder struct {
	mock *MockKBFSOps
}

// NewMockKBFSOps creates a new mock instance
func NewMockKBFSOps(ctrl *gomock.Controller) *MockKBFSOps {
	mock := &MockKBFSOps{ctrl: ctrl}
	mock.recorder = &MockKBFSOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKBFSOps) EXPECT() *MockKBFSOpsMockRecorder {
	return m.recorder
}

// GetFavorites mocks base method
func (m *MockKBFSOps) GetFavorites(ctx context.Context) ([]Favorite, error) {
	ret := m.ctrl.Call(m, "GetFavorites", ctx)
	ret0, _ := ret[0].([]Favorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavorites indicates an expected call of GetFavorites
func (mr *MockKBFSOpsMockRecorder) GetFavorites(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavorites", reflect.TypeOf((*MockKBFSOps)(nil).GetFavorites), ctx)
}

// RefreshCachedFavorites mocks base method
func (m *MockKBFSOps) RefreshCachedFavorites(ctx context.Context) {
	m.ctrl.Call(m, "RefreshCachedFavorites", ctx)
}

// RefreshCachedFavorites indicates an expected call of RefreshCachedFavorites
func (mr *MockKBFSOpsMockRecorder) RefreshCachedFavorites(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshCachedFavorites", reflect.TypeOf((*MockKBFSOps)(nil).RefreshCachedFavorites), ctx)
}

// AddFavorite mocks base method
func (m *MockKBFSOps) AddFavorite(ctx context.Context, fav Favorite) error {
	ret := m.ctrl.Call(m, "AddFavorite", ctx, fav)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFavorite indicates an expected call of AddFavorite
func (mr *MockKBFSOpsMockRecorder) AddFavorite(ctx, fav interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFavorite", reflect.TypeOf((*MockKBFSOps)(nil).AddFavorite), ctx, fav)
}

// DeleteFavorite mocks base method
func (m *MockKBFSOps) DeleteFavorite(ctx context.Context, fav Favorite) error {
	ret := m.ctrl.Call(m, "DeleteFavorite", ctx, fav)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFavorite indicates an expected call of DeleteFavorite
func (mr *MockKBFSOpsMockRecorder) DeleteFavorite(ctx, fav interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFavorite", reflect.TypeOf((*MockKBFSOps)(nil).DeleteFavorite), ctx, fav)
}

// GetTLFCryptKeys mocks base method
func (m *MockKBFSOps) GetTLFCryptKeys(ctx context.Context, tlfHandle *TlfHandle) ([]kbfscrypto.TLFCryptKey, tlf.ID, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKeys", ctx, tlfHandle)
	ret0, _ := ret[0].([]kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(tlf.ID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTLFCryptKeys indicates an expected call of GetTLFCryptKeys
func (mr *MockKBFSOpsMockRecorder) GetTLFCryptKeys(ctx, tlfHandle interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKeys", reflect.TypeOf((*MockKBFSOps)(nil).GetTLFCryptKeys), ctx, tlfHandle)
}

// GetTLFID mocks base method
func (m *MockKBFSOps) GetTLFID(ctx context.Context, tlfHandle *TlfHandle) (tlf.ID, error) {
	ret := m.ctrl.Call(m, "GetTLFID", ctx, tlfHandle)
	ret0, _ := ret[0].(tlf.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLFID indicates an expected call of GetTLFID
func (mr *MockKBFSOpsMockRecorder) GetTLFID(ctx, tlfHandle interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFID", reflect.TypeOf((*MockKBFSOps)(nil).GetTLFID), ctx, tlfHandle)
}

// GetOrCreateRootNode mocks base method
func (m *MockKBFSOps) GetOrCreateRootNode(ctx context.Context, h *TlfHandle, branch BranchName) (Node, EntryInfo, error) {
	ret := m.ctrl.Call(m, "GetOrCreateRootNode", ctx, h, branch)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(EntryInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrCreateRootNode indicates an expected call of GetOrCreateRootNode
func (mr *MockKBFSOpsMockRecorder) GetOrCreateRootNode(ctx, h, branch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateRootNode", reflect.TypeOf((*MockKBFSOps)(nil).GetOrCreateRootNode), ctx, h, branch)
}

// GetRootNode mocks base method
func (m *MockKBFSOps) GetRootNode(ctx context.Context, h *TlfHandle, branch BranchName) (Node, EntryInfo, error) {
	ret := m.ctrl.Call(m, "GetRootNode", ctx, h, branch)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(EntryInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRootNode indicates an expected call of GetRootNode
func (mr *MockKBFSOpsMockRecorder) GetRootNode(ctx, h, branch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootNode", reflect.TypeOf((*MockKBFSOps)(nil).GetRootNode), ctx, h, branch)
}

// GetDirChildren mocks base method
func (m *MockKBFSOps) GetDirChildren(ctx context.Context, dir Node) (map[string]EntryInfo, error) {
	ret := m.ctrl.Call(m, "GetDirChildren", ctx, dir)
	ret0, _ := ret[0].(map[string]EntryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirChildren indicates an expected call of GetDirChildren
func (mr *MockKBFSOpsMockRecorder) GetDirChildren(ctx, dir interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirChildren", reflect.TypeOf((*MockKBFSOps)(nil).GetDirChildren), ctx, dir)
}

// Lookup mocks base method
func (m *MockKBFSOps) Lookup(ctx context.Context, dir Node, name string) (Node, EntryInfo, error) {
	ret := m.ctrl.Call(m, "Lookup", ctx, dir, name)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(EntryInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Lookup indicates an expected call of Lookup
func (mr *MockKBFSOpsMockRecorder) Lookup(ctx, dir, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockKBFSOps)(nil).Lookup), ctx, dir, name)
}

// Stat mocks base method
func (m *MockKBFSOps) Stat(ctx context.Context, node Node) (EntryInfo, error) {
	ret := m.ctrl.Call(m, "Stat", ctx, node)
	ret0, _ := ret[0].(EntryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat
func (mr *MockKBFSOpsMockRecorder) Stat(ctx, node interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockKBFSOps)(nil).Stat), ctx, node)
}

// CreateDir mocks base method
func (m *MockKBFSOps) CreateDir(ctx context.Context, dir Node, name string) (Node, EntryInfo, error) {
	ret := m.ctrl.Call(m, "CreateDir", ctx, dir, name)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(EntryInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDir indicates an expected call of CreateDir
func (mr *MockKBFSOpsMockRecorder) CreateDir(ctx, dir, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDir", reflect.TypeOf((*MockKBFSOps)(nil).CreateDir), ctx, dir, name)
}

// CreateFile mocks base method
func (m *MockKBFSOps) CreateFile(ctx context.Context, dir Node, name string, isExec bool, excl Excl) (Node, EntryInfo, error) {
	ret := m.ctrl.Call(m, "CreateFile", ctx, dir, name, isExec, excl)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(EntryInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFile indicates an expected call of CreateFile
func (mr *MockKBFSOpsMockRecorder) CreateFile(ctx, dir, name, isExec, excl interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockKBFSOps)(nil).CreateFile), ctx, dir, name, isExec, excl)
}

// CreateLink mocks base method
func (m *MockKBFSOps) CreateLink(ctx context.Context, dir Node, fromName, toPath string) (EntryInfo, error) {
	ret := m.ctrl.Call(m, "CreateLink", ctx, dir, fromName, toPath)
	ret0, _ := ret[0].(EntryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLink indicates an expected call of CreateLink
func (mr *MockKBFSOpsMockRecorder) CreateLink(ctx, dir, fromName, toPath interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLink", reflect.TypeOf((*MockKBFSOps)(nil).CreateLink), ctx, dir, fromName, toPath)
}

// RemoveDir mocks base method
func (m *MockKBFSOps) RemoveDir(ctx context.Context, dir Node, dirName string) error {
	ret := m.ctrl.Call(m, "RemoveDir", ctx, dir, dirName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDir indicates an expected call of RemoveDir
func (mr *MockKBFSOpsMockRecorder) RemoveDir(ctx, dir, dirName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDir", reflect.TypeOf((*MockKBFSOps)(nil).RemoveDir), ctx, dir, dirName)
}

// RemoveEntry mocks base method
func (m *MockKBFSOps) RemoveEntry(ctx context.Context, dir Node, name string) error {
	ret := m.ctrl.Call(m, "RemoveEntry", ctx, dir, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEntry indicates an expected call of RemoveEntry
func (mr *MockKBFSOpsMockRecorder) RemoveEntry(ctx, dir, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEntry", reflect.TypeOf((*MockKBFSOps)(nil).RemoveEntry), ctx, dir, name)
}

// Rename mocks base method
func (m *MockKBFSOps) Rename(ctx context.Context, oldParent Node, oldName string, newParent Node, newName string) error {
	ret := m.ctrl.Call(m, "Rename", ctx, oldParent, oldName, newParent, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename
func (mr *MockKBFSOpsMockRecorder) Rename(ctx, oldParent, oldName, newParent, newName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockKBFSOps)(nil).Rename), ctx, oldParent, oldName, newParent, newName)
}

// Read mocks base method
func (m *MockKBFSOps) Read(ctx context.Context, file Node, dest []byte, off int64) (int64, error) {
	ret := m.ctrl.Call(m, "Read", ctx, file, dest, off)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockKBFSOpsMockRecorder) Read(ctx, file, dest, off interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockKBFSOps)(nil).Read), ctx, file, dest, off)
}

// Write mocks base method
func (m *MockKBFSOps) Write(ctx context.Context, file Node, data []byte, off int64) error {
	ret := m.ctrl.Call(m, "Write", ctx, file, data, off)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockKBFSOpsMockRecorder) Write(ctx, file, data, off interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockKBFSOps)(nil).Write), ctx, file, data, off)
}

// Truncate mocks base method
func (m *MockKBFSOps) Truncate(ctx context.Context, file Node, size uint64) error {
	ret := m.ctrl.Call(m, "Truncate", ctx, file, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// Truncate indicates an expected call of Truncate
func (mr *MockKBFSOpsMockRecorder) Truncate(ctx, file, size interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockKBFSOps)(nil).Truncate), ctx, file, size)
}

// SetEx mocks base method
func (m *MockKBFSOps) SetEx(ctx context.Context, file Node, ex bool) error {
	ret := m.ctrl.Call(m, "SetEx", ctx, file, ex)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEx indicates an expected call of SetEx
func (mr *MockKBFSOpsMockRecorder) SetEx(ctx, file, ex interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEx", reflect.TypeOf((*MockKBFSOps)(nil).SetEx), ctx, file, ex)
}

// SetMtime mocks base method
func (m *MockKBFSOps) SetMtime(ctx context.Context, file Node, mtime *time.Time) error {
	ret := m.ctrl.Call(m, "SetMtime", ctx, file, mtime)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMtime indicates an expected call of SetMtime
func (mr *MockKBFSOpsMockRecorder) SetMtime(ctx, file, mtime interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMtime", reflect.TypeOf((*MockKBFSOps)(nil).SetMtime), ctx, file, mtime)
}

// SyncAll mocks base method
func (m *MockKBFSOps) SyncAll(ctx context.Context, folderBranch FolderBranch) error {
	ret := m.ctrl.Call(m, "SyncAll", ctx, folderBranch)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncAll indicates an expected call of SyncAll
func (mr *MockKBFSOpsMockRecorder) SyncAll(ctx, folderBranch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAll", reflect.TypeOf((*MockKBFSOps)(nil).SyncAll), ctx, folderBranch)
}

// FolderStatus mocks base method
func (m *MockKBFSOps) FolderStatus(ctx context.Context, folderBranch FolderBranch) (FolderBranchStatus, <-chan StatusUpdate, error) {
	ret := m.ctrl.Call(m, "FolderStatus", ctx, folderBranch)
	ret0, _ := ret[0].(FolderBranchStatus)
	ret1, _ := ret[1].(<-chan StatusUpdate)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FolderStatus indicates an expected call of FolderStatus
func (mr *MockKBFSOpsMockRecorder) FolderStatus(ctx, folderBranch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FolderStatus", reflect.TypeOf((*MockKBFSOps)(nil).FolderStatus), ctx, folderBranch)
}

// Status mocks base method
func (m *MockKBFSOps) Status(ctx context.Context) (KBFSStatus, <-chan StatusUpdate, error) {
	ret := m.ctrl.Call(m, "Status", ctx)
	ret0, _ := ret[0].(KBFSStatus)
	ret1, _ := ret[1].(<-chan StatusUpdate)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Status indicates an expected call of Status
func (mr *MockKBFSOpsMockRecorder) Status(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockKBFSOps)(nil).Status), ctx)
}

// UnstageForTesting mocks base method
func (m *MockKBFSOps) UnstageForTesting(ctx context.Context, folderBranch FolderBranch) error {
	ret := m.ctrl.Call(m, "UnstageForTesting", ctx, folderBranch)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnstageForTesting indicates an expected call of UnstageForTesting
func (mr *MockKBFSOpsMockRecorder) UnstageForTesting(ctx, folderBranch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnstageForTesting", reflect.TypeOf((*MockKBFSOps)(nil).UnstageForTesting), ctx, folderBranch)
}

// RequestRekey mocks base method
func (m *MockKBFSOps) RequestRekey(ctx context.Context, id tlf.ID) {
	m.ctrl.Call(m, "RequestRekey", ctx, id)
}

// RequestRekey indicates an expected call of RequestRekey
func (mr *MockKBFSOpsMockRecorder) RequestRekey(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestRekey", reflect.TypeOf((*MockKBFSOps)(nil).RequestRekey), ctx, id)
}

// SyncFromServerForTesting mocks base method
func (m *MockKBFSOps) SyncFromServerForTesting(ctx context.Context, folderBranch FolderBranch) error {
	ret := m.ctrl.Call(m, "SyncFromServerForTesting", ctx, folderBranch)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncFromServerForTesting indicates an expected call of SyncFromServerForTesting
func (mr *MockKBFSOpsMockRecorder) SyncFromServerForTesting(ctx, folderBranch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncFromServerForTesting", reflect.TypeOf((*MockKBFSOps)(nil).SyncFromServerForTesting), ctx, folderBranch)
}

// GetUpdateHistory mocks base method
func (m *MockKBFSOps) GetUpdateHistory(ctx context.Context, folderBranch FolderBranch) (TLFUpdateHistory, error) {
	ret := m.ctrl.Call(m, "GetUpdateHistory", ctx, folderBranch)
	ret0, _ := ret[0].(TLFUpdateHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdateHistory indicates an expected call of GetUpdateHistory
func (mr *MockKBFSOpsMockRecorder) GetUpdateHistory(ctx, folderBranch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateHistory", reflect.TypeOf((*MockKBFSOps)(nil).GetUpdateHistory), ctx, folderBranch)
}

// GetEditHistory mocks base method
func (m *MockKBFSOps) GetEditHistory(ctx context.Context, folderBranch FolderBranch) (TlfWriterEdits, error) {
	ret := m.ctrl.Call(m, "GetEditHistory", ctx, folderBranch)
	ret0, _ := ret[0].(TlfWriterEdits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditHistory indicates an expected call of GetEditHistory
func (mr *MockKBFSOpsMockRecorder) GetEditHistory(ctx, folderBranch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditHistory", reflect.TypeOf((*MockKBFSOps)(nil).GetEditHistory), ctx, folderBranch)
}

// GetNodeMetadata mocks base method
func (m *MockKBFSOps) GetNodeMetadata(ctx context.Context, node Node) (NodeMetadata, error) {
	ret := m.ctrl.Call(m, "GetNodeMetadata", ctx, node)
	ret0, _ := ret[0].(NodeMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeMetadata indicates an expected call of GetNodeMetadata
func (mr *MockKBFSOpsMockRecorder) GetNodeMetadata(ctx, node interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeMetadata", reflect.TypeOf((*MockKBFSOps)(nil).GetNodeMetadata), ctx, node)
}

// Shutdown mocks base method
func (m *MockKBFSOps) Shutdown(ctx context.Context) error {
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockKBFSOpsMockRecorder) Shutdown(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockKBFSOps)(nil).Shutdown), ctx)
}

// PushConnectionStatusChange mocks base method
func (m *MockKBFSOps) PushConnectionStatusChange(service string, newStatus error) {
	m.ctrl.Call(m, "PushConnectionStatusChange", service, newStatus)
}

// PushConnectionStatusChange indicates an expected call of PushConnectionStatusChange
func (mr *MockKBFSOpsMockRecorder) PushConnectionStatusChange(service, newStatus interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushConnectionStatusChange", reflect.TypeOf((*MockKBFSOps)(nil).PushConnectionStatusChange), service, newStatus)
}

// PushStatusChange mocks base method
func (m *MockKBFSOps) PushStatusChange() {
	m.ctrl.Call(m, "PushStatusChange")
}

// PushStatusChange indicates an expected call of PushStatusChange
func (mr *MockKBFSOpsMockRecorder) PushStatusChange() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushStatusChange", reflect.TypeOf((*MockKBFSOps)(nil).PushStatusChange))
}

// ClearPrivateFolderMD mocks base method
func (m *MockKBFSOps) ClearPrivateFolderMD(ctx context.Context) {
	m.ctrl.Call(m, "ClearPrivateFolderMD", ctx)
}

// ClearPrivateFolderMD indicates an expected call of ClearPrivateFolderMD
func (mr *MockKBFSOpsMockRecorder) ClearPrivateFolderMD(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearPrivateFolderMD", reflect.TypeOf((*MockKBFSOps)(nil).ClearPrivateFolderMD), ctx)
}

// ForceFastForward mocks base method
func (m *MockKBFSOps) ForceFastForward(ctx context.Context) {
	m.ctrl.Call(m, "ForceFastForward", ctx)
}

// ForceFastForward indicates an expected call of ForceFastForward
func (mr *MockKBFSOpsMockRecorder) ForceFastForward(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceFastForward", reflect.TypeOf((*MockKBFSOps)(nil).ForceFastForward), ctx)
}

// TeamNameChanged mocks base method
func (m *MockKBFSOps) TeamNameChanged(ctx context.Context, tid keybase1.TeamID) {
	m.ctrl.Call(m, "TeamNameChanged", ctx, tid)
}

// TeamNameChanged indicates an expected call of TeamNameChanged
func (mr *MockKBFSOpsMockRecorder) TeamNameChanged(ctx, tid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamNameChanged", reflect.TypeOf((*MockKBFSOps)(nil).TeamNameChanged), ctx, tid)
}

// MockmerkleRootGetter is a mock of merkleRootGetter interface
type MockmerkleRootGetter struct {
	ctrl     *gomock.Controller
	recorder *MockmerkleRootGetterMockRecorder
}

// MockmerkleRootGetterMockRecorder is the mock recorder for MockmerkleRootGetter
type MockmerkleRootGetterMockRecorder struct {
	mock *MockmerkleRootGetter
}

// NewMockmerkleRootGetter creates a new mock instance
func NewMockmerkleRootGetter(ctrl *gomock.Controller) *MockmerkleRootGetter {
	mock := &MockmerkleRootGetter{ctrl: ctrl}
	mock.recorder = &MockmerkleRootGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmerkleRootGetter) EXPECT() *MockmerkleRootGetterMockRecorder {
	return m.recorder
}

// GetCurrentMerkleRoot mocks base method
func (m *MockmerkleRootGetter) GetCurrentMerkleRoot(ctx context.Context) (keybase1.MerkleRootV2, error) {
	ret := m.ctrl.Call(m, "GetCurrentMerkleRoot", ctx)
	ret0, _ := ret[0].(keybase1.MerkleRootV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentMerkleRoot indicates an expected call of GetCurrentMerkleRoot
func (mr *MockmerkleRootGetterMockRecorder) GetCurrentMerkleRoot(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMerkleRoot", reflect.TypeOf((*MockmerkleRootGetter)(nil).GetCurrentMerkleRoot), ctx)
}

// MockKeybaseService is a mock of KeybaseService interface
type MockKeybaseService struct {
	ctrl     *gomock.Controller
	recorder *MockKeybaseServiceMockRecorder
}

// MockKeybaseServiceMockRecorder is the mock recorder for MockKeybaseService
type MockKeybaseServiceMockRecorder struct {
	mock *MockKeybaseService
}

// NewMockKeybaseService creates a new mock instance
func NewMockKeybaseService(ctrl *gomock.Controller) *MockKeybaseService {
	mock := &MockKeybaseService{ctrl: ctrl}
	mock.recorder = &MockKeybaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeybaseService) EXPECT() *MockKeybaseServiceMockRecorder {
	return m.recorder
}

// GetCurrentMerkleRoot mocks base method
func (m *MockKeybaseService) GetCurrentMerkleRoot(ctx context.Context) (keybase1.MerkleRootV2, error) {
	ret := m.ctrl.Call(m, "GetCurrentMerkleRoot", ctx)
	ret0, _ := ret[0].(keybase1.MerkleRootV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentMerkleRoot indicates an expected call of GetCurrentMerkleRoot
func (mr *MockKeybaseServiceMockRecorder) GetCurrentMerkleRoot(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMerkleRoot", reflect.TypeOf((*MockKeybaseService)(nil).GetCurrentMerkleRoot), ctx)
}

// Resolve mocks base method
func (m *MockKeybaseService) Resolve(ctx context.Context, assertion string) (libkb.NormalizedUsername, keybase1.UserOrTeamID, error) {
	ret := m.ctrl.Call(m, "Resolve", ctx, assertion)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(keybase1.UserOrTeamID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Resolve indicates an expected call of Resolve
func (mr *MockKeybaseServiceMockRecorder) Resolve(ctx, assertion interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockKeybaseService)(nil).Resolve), ctx, assertion)
}

// Identify mocks base method
func (m *MockKeybaseService) Identify(ctx context.Context, assertion, reason string) (libkb.NormalizedUsername, keybase1.UserOrTeamID, error) {
	ret := m.ctrl.Call(m, "Identify", ctx, assertion, reason)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(keybase1.UserOrTeamID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Identify indicates an expected call of Identify
func (mr *MockKeybaseServiceMockRecorder) Identify(ctx, assertion, reason interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identify", reflect.TypeOf((*MockKeybaseService)(nil).Identify), ctx, assertion, reason)
}

// LoadUserPlusKeys mocks base method
func (m *MockKeybaseService) LoadUserPlusKeys(ctx context.Context, uid keybase1.UID, pollForKID keybase1.KID) (UserInfo, error) {
	ret := m.ctrl.Call(m, "LoadUserPlusKeys", ctx, uid, pollForKID)
	ret0, _ := ret[0].(UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadUserPlusKeys indicates an expected call of LoadUserPlusKeys
func (mr *MockKeybaseServiceMockRecorder) LoadUserPlusKeys(ctx, uid, pollForKID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUserPlusKeys", reflect.TypeOf((*MockKeybaseService)(nil).LoadUserPlusKeys), ctx, uid, pollForKID)
}

// LoadUnverifiedKeys mocks base method
func (m *MockKeybaseService) LoadUnverifiedKeys(ctx context.Context, uid keybase1.UID) ([]keybase1.PublicKey, error) {
	ret := m.ctrl.Call(m, "LoadUnverifiedKeys", ctx, uid)
	ret0, _ := ret[0].([]keybase1.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadUnverifiedKeys indicates an expected call of LoadUnverifiedKeys
func (mr *MockKeybaseServiceMockRecorder) LoadUnverifiedKeys(ctx, uid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUnverifiedKeys", reflect.TypeOf((*MockKeybaseService)(nil).LoadUnverifiedKeys), ctx, uid)
}

// LoadTeamPlusKeys mocks base method
func (m *MockKeybaseService) LoadTeamPlusKeys(ctx context.Context, tid keybase1.TeamID, desiredKeyGen KeyGen, desiredUser keybase1.UserVersion, desiredRole keybase1.TeamRole) (TeamInfo, error) {
	ret := m.ctrl.Call(m, "LoadTeamPlusKeys", ctx, tid, desiredKeyGen, desiredUser, desiredRole)
	ret0, _ := ret[0].(TeamInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTeamPlusKeys indicates an expected call of LoadTeamPlusKeys
func (mr *MockKeybaseServiceMockRecorder) LoadTeamPlusKeys(ctx, tid, desiredKeyGen, desiredUser, desiredRole interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTeamPlusKeys", reflect.TypeOf((*MockKeybaseService)(nil).LoadTeamPlusKeys), ctx, tid, desiredKeyGen, desiredUser, desiredRole)
}

// CurrentSession mocks base method
func (m *MockKeybaseService) CurrentSession(ctx context.Context, sessionID int) (SessionInfo, error) {
	ret := m.ctrl.Call(m, "CurrentSession", ctx, sessionID)
	ret0, _ := ret[0].(SessionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentSession indicates an expected call of CurrentSession
func (mr *MockKeybaseServiceMockRecorder) CurrentSession(ctx, sessionID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentSession", reflect.TypeOf((*MockKeybaseService)(nil).CurrentSession), ctx, sessionID)
}

// FavoriteAdd mocks base method
func (m *MockKeybaseService) FavoriteAdd(ctx context.Context, folder keybase1.Folder) error {
	ret := m.ctrl.Call(m, "FavoriteAdd", ctx, folder)
	ret0, _ := ret[0].(error)
	return ret0
}

// FavoriteAdd indicates an expected call of FavoriteAdd
func (mr *MockKeybaseServiceMockRecorder) FavoriteAdd(ctx, folder interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavoriteAdd", reflect.TypeOf((*MockKeybaseService)(nil).FavoriteAdd), ctx, folder)
}

// FavoriteDelete mocks base method
func (m *MockKeybaseService) FavoriteDelete(ctx context.Context, folder keybase1.Folder) error {
	ret := m.ctrl.Call(m, "FavoriteDelete", ctx, folder)
	ret0, _ := ret[0].(error)
	return ret0
}

// FavoriteDelete indicates an expected call of FavoriteDelete
func (mr *MockKeybaseServiceMockRecorder) FavoriteDelete(ctx, folder interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavoriteDelete", reflect.TypeOf((*MockKeybaseService)(nil).FavoriteDelete), ctx, folder)
}

// FavoriteList mocks base method
func (m *MockKeybaseService) FavoriteList(ctx context.Context, sessionID int) ([]keybase1.Folder, error) {
	ret := m.ctrl.Call(m, "FavoriteList", ctx, sessionID)
	ret0, _ := ret[0].([]keybase1.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FavoriteList indicates an expected call of FavoriteList
func (mr *MockKeybaseServiceMockRecorder) FavoriteList(ctx, sessionID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavoriteList", reflect.TypeOf((*MockKeybaseService)(nil).FavoriteList), ctx, sessionID)
}

// Notify mocks base method
func (m *MockKeybaseService) Notify(ctx context.Context, notification *keybase1.FSNotification) error {
	ret := m.ctrl.Call(m, "Notify", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify
func (mr *MockKeybaseServiceMockRecorder) Notify(ctx, notification interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockKeybaseService)(nil).Notify), ctx, notification)
}

// NotifySyncStatus mocks base method
func (m *MockKeybaseService) NotifySyncStatus(ctx context.Context, status *keybase1.FSPathSyncStatus) error {
	ret := m.ctrl.Call(m, "NotifySyncStatus", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifySyncStatus indicates an expected call of NotifySyncStatus
func (mr *MockKeybaseServiceMockRecorder) NotifySyncStatus(ctx, status interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifySyncStatus", reflect.TypeOf((*MockKeybaseService)(nil).NotifySyncStatus), ctx, status)
}

// FlushUserFromLocalCache mocks base method
func (m *MockKeybaseService) FlushUserFromLocalCache(ctx context.Context, uid keybase1.UID) {
	m.ctrl.Call(m, "FlushUserFromLocalCache", ctx, uid)
}

// FlushUserFromLocalCache indicates an expected call of FlushUserFromLocalCache
func (mr *MockKeybaseServiceMockRecorder) FlushUserFromLocalCache(ctx, uid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushUserFromLocalCache", reflect.TypeOf((*MockKeybaseService)(nil).FlushUserFromLocalCache), ctx, uid)
}

// FlushUserUnverifiedKeysFromLocalCache mocks base method
func (m *MockKeybaseService) FlushUserUnverifiedKeysFromLocalCache(ctx context.Context, uid keybase1.UID) {
	m.ctrl.Call(m, "FlushUserUnverifiedKeysFromLocalCache", ctx, uid)
}

// FlushUserUnverifiedKeysFromLocalCache indicates an expected call of FlushUserUnverifiedKeysFromLocalCache
func (mr *MockKeybaseServiceMockRecorder) FlushUserUnverifiedKeysFromLocalCache(ctx, uid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushUserUnverifiedKeysFromLocalCache", reflect.TypeOf((*MockKeybaseService)(nil).FlushUserUnverifiedKeysFromLocalCache), ctx, uid)
}

// EstablishMountDir mocks base method
func (m *MockKeybaseService) EstablishMountDir(ctx context.Context) (string, error) {
	ret := m.ctrl.Call(m, "EstablishMountDir", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstablishMountDir indicates an expected call of EstablishMountDir
func (mr *MockKeybaseServiceMockRecorder) EstablishMountDir(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstablishMountDir", reflect.TypeOf((*MockKeybaseService)(nil).EstablishMountDir), ctx)
}

// Shutdown mocks base method
func (m *MockKeybaseService) Shutdown() {
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockKeybaseServiceMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockKeybaseService)(nil).Shutdown))
}

// MockKeybaseServiceCn is a mock of KeybaseServiceCn interface
type MockKeybaseServiceCn struct {
	ctrl     *gomock.Controller
	recorder *MockKeybaseServiceCnMockRecorder
}

// MockKeybaseServiceCnMockRecorder is the mock recorder for MockKeybaseServiceCn
type MockKeybaseServiceCnMockRecorder struct {
	mock *MockKeybaseServiceCn
}

// NewMockKeybaseServiceCn creates a new mock instance
func NewMockKeybaseServiceCn(ctrl *gomock.Controller) *MockKeybaseServiceCn {
	mock := &MockKeybaseServiceCn{ctrl: ctrl}
	mock.recorder = &MockKeybaseServiceCnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeybaseServiceCn) EXPECT() *MockKeybaseServiceCnMockRecorder {
	return m.recorder
}

// NewKeybaseService mocks base method
func (m *MockKeybaseServiceCn) NewKeybaseService(config Config, params InitParams, ctx Context, log logger.Logger) (KeybaseService, error) {
	ret := m.ctrl.Call(m, "NewKeybaseService", config, params, ctx, log)
	ret0, _ := ret[0].(KeybaseService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewKeybaseService indicates an expected call of NewKeybaseService
func (mr *MockKeybaseServiceCnMockRecorder) NewKeybaseService(config, params, ctx, log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewKeybaseService", reflect.TypeOf((*MockKeybaseServiceCn)(nil).NewKeybaseService), config, params, ctx, log)
}

// NewCrypto mocks base method
func (m *MockKeybaseServiceCn) NewCrypto(config Config, params InitParams, ctx Context, log logger.Logger) (Crypto, error) {
	ret := m.ctrl.Call(m, "NewCrypto", config, params, ctx, log)
	ret0, _ := ret[0].(Crypto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewCrypto indicates an expected call of NewCrypto
func (mr *MockKeybaseServiceCnMockRecorder) NewCrypto(config, params, ctx, log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCrypto", reflect.TypeOf((*MockKeybaseServiceCn)(nil).NewCrypto), config, params, ctx, log)
}

// Mockresolver is a mock of resolver interface
type Mockresolver struct {
	ctrl     *gomock.Controller
	recorder *MockresolverMockRecorder
}

// MockresolverMockRecorder is the mock recorder for Mockresolver
type MockresolverMockRecorder struct {
	mock *Mockresolver
}

// NewMockresolver creates a new mock instance
func NewMockresolver(ctrl *gomock.Controller) *Mockresolver {
	mock := &Mockresolver{ctrl: ctrl}
	mock.recorder = &MockresolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockresolver) EXPECT() *MockresolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method
func (m *Mockresolver) Resolve(ctx context.Context, assertion string) (libkb.NormalizedUsername, keybase1.UserOrTeamID, error) {
	ret := m.ctrl.Call(m, "Resolve", ctx, assertion)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(keybase1.UserOrTeamID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Resolve indicates an expected call of Resolve
func (mr *MockresolverMockRecorder) Resolve(ctx, assertion interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*Mockresolver)(nil).Resolve), ctx, assertion)
}

// Mockidentifier is a mock of identifier interface
type Mockidentifier struct {
	ctrl     *gomock.Controller
	recorder *MockidentifierMockRecorder
}

// MockidentifierMockRecorder is the mock recorder for Mockidentifier
type MockidentifierMockRecorder struct {
	mock *Mockidentifier
}

// NewMockidentifier creates a new mock instance
func NewMockidentifier(ctrl *gomock.Controller) *Mockidentifier {
	mock := &Mockidentifier{ctrl: ctrl}
	mock.recorder = &MockidentifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockidentifier) EXPECT() *MockidentifierMockRecorder {
	return m.recorder
}

// Identify mocks base method
func (m *Mockidentifier) Identify(ctx context.Context, assertion, reason string) (libkb.NormalizedUsername, keybase1.UserOrTeamID, error) {
	ret := m.ctrl.Call(m, "Identify", ctx, assertion, reason)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(keybase1.UserOrTeamID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Identify indicates an expected call of Identify
func (mr *MockidentifierMockRecorder) Identify(ctx, assertion, reason interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identify", reflect.TypeOf((*Mockidentifier)(nil).Identify), ctx, assertion, reason)
}

// MocknormalizedUsernameGetter is a mock of normalizedUsernameGetter interface
type MocknormalizedUsernameGetter struct {
	ctrl     *gomock.Controller
	recorder *MocknormalizedUsernameGetterMockRecorder
}

// MocknormalizedUsernameGetterMockRecorder is the mock recorder for MocknormalizedUsernameGetter
type MocknormalizedUsernameGetterMockRecorder struct {
	mock *MocknormalizedUsernameGetter
}

// NewMocknormalizedUsernameGetter creates a new mock instance
func NewMocknormalizedUsernameGetter(ctrl *gomock.Controller) *MocknormalizedUsernameGetter {
	mock := &MocknormalizedUsernameGetter{ctrl: ctrl}
	mock.recorder = &MocknormalizedUsernameGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocknormalizedUsernameGetter) EXPECT() *MocknormalizedUsernameGetterMockRecorder {
	return m.recorder
}

// GetNormalizedUsername mocks base method
func (m *MocknormalizedUsernameGetter) GetNormalizedUsername(ctx context.Context, id keybase1.UserOrTeamID) (libkb.NormalizedUsername, error) {
	ret := m.ctrl.Call(m, "GetNormalizedUsername", ctx, id)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNormalizedUsername indicates an expected call of GetNormalizedUsername
func (mr *MocknormalizedUsernameGetterMockRecorder) GetNormalizedUsername(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNormalizedUsername", reflect.TypeOf((*MocknormalizedUsernameGetter)(nil).GetNormalizedUsername), ctx, id)
}

// MockCurrentSessionGetter is a mock of CurrentSessionGetter interface
type MockCurrentSessionGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCurrentSessionGetterMockRecorder
}

// MockCurrentSessionGetterMockRecorder is the mock recorder for MockCurrentSessionGetter
type MockCurrentSessionGetterMockRecorder struct {
	mock *MockCurrentSessionGetter
}

// NewMockCurrentSessionGetter creates a new mock instance
func NewMockCurrentSessionGetter(ctrl *gomock.Controller) *MockCurrentSessionGetter {
	mock := &MockCurrentSessionGetter{ctrl: ctrl}
	mock.recorder = &MockCurrentSessionGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCurrentSessionGetter) EXPECT() *MockCurrentSessionGetterMockRecorder {
	return m.recorder
}

// GetCurrentSession mocks base method
func (m *MockCurrentSessionGetter) GetCurrentSession(ctx context.Context) (SessionInfo, error) {
	ret := m.ctrl.Call(m, "GetCurrentSession", ctx)
	ret0, _ := ret[0].(SessionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentSession indicates an expected call of GetCurrentSession
func (mr *MockCurrentSessionGetterMockRecorder) GetCurrentSession(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSession", reflect.TypeOf((*MockCurrentSessionGetter)(nil).GetCurrentSession), ctx)
}

// MockTeamMembershipChecker is a mock of TeamMembershipChecker interface
type MockTeamMembershipChecker struct {
	ctrl     *gomock.Controller
	recorder *MockTeamMembershipCheckerMockRecorder
}

// MockTeamMembershipCheckerMockRecorder is the mock recorder for MockTeamMembershipChecker
type MockTeamMembershipCheckerMockRecorder struct {
	mock *MockTeamMembershipChecker
}

// NewMockTeamMembershipChecker creates a new mock instance
func NewMockTeamMembershipChecker(ctrl *gomock.Controller) *MockTeamMembershipChecker {
	mock := &MockTeamMembershipChecker{ctrl: ctrl}
	mock.recorder = &MockTeamMembershipCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTeamMembershipChecker) EXPECT() *MockTeamMembershipCheckerMockRecorder {
	return m.recorder
}

// IsTeamWriter mocks base method
func (m *MockTeamMembershipChecker) IsTeamWriter(ctx context.Context, tid keybase1.TeamID, uid keybase1.UID, verifyingKey kbfscrypto.VerifyingKey) (bool, error) {
	ret := m.ctrl.Call(m, "IsTeamWriter", ctx, tid, uid, verifyingKey)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTeamWriter indicates an expected call of IsTeamWriter
func (mr *MockTeamMembershipCheckerMockRecorder) IsTeamWriter(ctx, tid, uid, verifyingKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTeamWriter", reflect.TypeOf((*MockTeamMembershipChecker)(nil).IsTeamWriter), ctx, tid, uid, verifyingKey)
}

// IsTeamReader mocks base method
func (m *MockTeamMembershipChecker) IsTeamReader(ctx context.Context, tid keybase1.TeamID, uid keybase1.UID) (bool, error) {
	ret := m.ctrl.Call(m, "IsTeamReader", ctx, tid, uid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTeamReader indicates an expected call of IsTeamReader
func (mr *MockTeamMembershipCheckerMockRecorder) IsTeamReader(ctx, tid, uid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTeamReader", reflect.TypeOf((*MockTeamMembershipChecker)(nil).IsTeamReader), ctx, tid, uid)
}

// MockteamKeysGetter is a mock of teamKeysGetter interface
type MockteamKeysGetter struct {
	ctrl     *gomock.Controller
	recorder *MockteamKeysGetterMockRecorder
}

// MockteamKeysGetterMockRecorder is the mock recorder for MockteamKeysGetter
type MockteamKeysGetterMockRecorder struct {
	mock *MockteamKeysGetter
}

// NewMockteamKeysGetter creates a new mock instance
func NewMockteamKeysGetter(ctrl *gomock.Controller) *MockteamKeysGetter {
	mock := &MockteamKeysGetter{ctrl: ctrl}
	mock.recorder = &MockteamKeysGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockteamKeysGetter) EXPECT() *MockteamKeysGetterMockRecorder {
	return m.recorder
}

// GetTeamTLFCryptKeys mocks base method
func (m *MockteamKeysGetter) GetTeamTLFCryptKeys(ctx context.Context, tid keybase1.TeamID, desiredKeyGen KeyGen) (map[KeyGen]kbfscrypto.TLFCryptKey, KeyGen, error) {
	ret := m.ctrl.Call(m, "GetTeamTLFCryptKeys", ctx, tid, desiredKeyGen)
	ret0, _ := ret[0].(map[KeyGen]kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(KeyGen)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTeamTLFCryptKeys indicates an expected call of GetTeamTLFCryptKeys
func (mr *MockteamKeysGetterMockRecorder) GetTeamTLFCryptKeys(ctx, tid, desiredKeyGen interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamTLFCryptKeys", reflect.TypeOf((*MockteamKeysGetter)(nil).GetTeamTLFCryptKeys), ctx, tid, desiredKeyGen)
}

// MockteamRootIDGetter is a mock of teamRootIDGetter interface
type MockteamRootIDGetter struct {
	ctrl     *gomock.Controller
	recorder *MockteamRootIDGetterMockRecorder
}

// MockteamRootIDGetterMockRecorder is the mock recorder for MockteamRootIDGetter
type MockteamRootIDGetterMockRecorder struct {
	mock *MockteamRootIDGetter
}

// NewMockteamRootIDGetter creates a new mock instance
func NewMockteamRootIDGetter(ctrl *gomock.Controller) *MockteamRootIDGetter {
	mock := &MockteamRootIDGetter{ctrl: ctrl}
	mock.recorder = &MockteamRootIDGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockteamRootIDGetter) EXPECT() *MockteamRootIDGetterMockRecorder {
	return m.recorder
}

// GetTeamRootID mocks base method
func (m *MockteamRootIDGetter) GetTeamRootID(ctx context.Context, tid keybase1.TeamID) (keybase1.TeamID, error) {
	ret := m.ctrl.Call(m, "GetTeamRootID", ctx, tid)
	ret0, _ := ret[0].(keybase1.TeamID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamRootID indicates an expected call of GetTeamRootID
func (mr *MockteamRootIDGetterMockRecorder) GetTeamRootID(ctx, tid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamRootID", reflect.TypeOf((*MockteamRootIDGetter)(nil).GetTeamRootID), ctx, tid)
}

// MockKBPKI is a mock of KBPKI interface
type MockKBPKI struct {
	ctrl     *gomock.Controller
	recorder *MockKBPKIMockRecorder
}

// MockKBPKIMockRecorder is the mock recorder for MockKBPKI
type MockKBPKIMockRecorder struct {
	mock *MockKBPKI
}

// NewMockKBPKI creates a new mock instance
func NewMockKBPKI(ctrl *gomock.Controller) *MockKBPKI {
	mock := &MockKBPKI{ctrl: ctrl}
	mock.recorder = &MockKBPKIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKBPKI) EXPECT() *MockKBPKIMockRecorder {
	return m.recorder
}

// GetCurrentSession mocks base method
func (m *MockKBPKI) GetCurrentSession(ctx context.Context) (SessionInfo, error) {
	ret := m.ctrl.Call(m, "GetCurrentSession", ctx)
	ret0, _ := ret[0].(SessionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentSession indicates an expected call of GetCurrentSession
func (mr *MockKBPKIMockRecorder) GetCurrentSession(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSession", reflect.TypeOf((*MockKBPKI)(nil).GetCurrentSession), ctx)
}

// Resolve mocks base method
func (m *MockKBPKI) Resolve(ctx context.Context, assertion string) (libkb.NormalizedUsername, keybase1.UserOrTeamID, error) {
	ret := m.ctrl.Call(m, "Resolve", ctx, assertion)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(keybase1.UserOrTeamID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Resolve indicates an expected call of Resolve
func (mr *MockKBPKIMockRecorder) Resolve(ctx, assertion interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockKBPKI)(nil).Resolve), ctx, assertion)
}

// Identify mocks base method
func (m *MockKBPKI) Identify(ctx context.Context, assertion, reason string) (libkb.NormalizedUsername, keybase1.UserOrTeamID, error) {
	ret := m.ctrl.Call(m, "Identify", ctx, assertion, reason)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(keybase1.UserOrTeamID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Identify indicates an expected call of Identify
func (mr *MockKBPKIMockRecorder) Identify(ctx, assertion, reason interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identify", reflect.TypeOf((*MockKBPKI)(nil).Identify), ctx, assertion, reason)
}

// GetNormalizedUsername mocks base method
func (m *MockKBPKI) GetNormalizedUsername(ctx context.Context, id keybase1.UserOrTeamID) (libkb.NormalizedUsername, error) {
	ret := m.ctrl.Call(m, "GetNormalizedUsername", ctx, id)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNormalizedUsername indicates an expected call of GetNormalizedUsername
func (mr *MockKBPKIMockRecorder) GetNormalizedUsername(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNormalizedUsername", reflect.TypeOf((*MockKBPKI)(nil).GetNormalizedUsername), ctx, id)
}

// GetCurrentMerkleRoot mocks base method
func (m *MockKBPKI) GetCurrentMerkleRoot(ctx context.Context) (keybase1.MerkleRootV2, error) {
	ret := m.ctrl.Call(m, "GetCurrentMerkleRoot", ctx)
	ret0, _ := ret[0].(keybase1.MerkleRootV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentMerkleRoot indicates an expected call of GetCurrentMerkleRoot
func (mr *MockKBPKIMockRecorder) GetCurrentMerkleRoot(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMerkleRoot", reflect.TypeOf((*MockKBPKI)(nil).GetCurrentMerkleRoot), ctx)
}

// IsTeamWriter mocks base method
func (m *MockKBPKI) IsTeamWriter(ctx context.Context, tid keybase1.TeamID, uid keybase1.UID, verifyingKey kbfscrypto.VerifyingKey) (bool, error) {
	ret := m.ctrl.Call(m, "IsTeamWriter", ctx, tid, uid, verifyingKey)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTeamWriter indicates an expected call of IsTeamWriter
func (mr *MockKBPKIMockRecorder) IsTeamWriter(ctx, tid, uid, verifyingKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTeamWriter", reflect.TypeOf((*MockKBPKI)(nil).IsTeamWriter), ctx, tid, uid, verifyingKey)
}

// IsTeamReader mocks base method
func (m *MockKBPKI) IsTeamReader(ctx context.Context, tid keybase1.TeamID, uid keybase1.UID) (bool, error) {
	ret := m.ctrl.Call(m, "IsTeamReader", ctx, tid, uid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTeamReader indicates an expected call of IsTeamReader
func (mr *MockKBPKIMockRecorder) IsTeamReader(ctx, tid, uid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTeamReader", reflect.TypeOf((*MockKBPKI)(nil).IsTeamReader), ctx, tid, uid)
}

// GetTeamTLFCryptKeys mocks base method
func (m *MockKBPKI) GetTeamTLFCryptKeys(ctx context.Context, tid keybase1.TeamID, desiredKeyGen KeyGen) (map[KeyGen]kbfscrypto.TLFCryptKey, KeyGen, error) {
	ret := m.ctrl.Call(m, "GetTeamTLFCryptKeys", ctx, tid, desiredKeyGen)
	ret0, _ := ret[0].(map[KeyGen]kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(KeyGen)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTeamTLFCryptKeys indicates an expected call of GetTeamTLFCryptKeys
func (mr *MockKBPKIMockRecorder) GetTeamTLFCryptKeys(ctx, tid, desiredKeyGen interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamTLFCryptKeys", reflect.TypeOf((*MockKBPKI)(nil).GetTeamTLFCryptKeys), ctx, tid, desiredKeyGen)
}

// GetTeamRootID mocks base method
func (m *MockKBPKI) GetTeamRootID(ctx context.Context, tid keybase1.TeamID) (keybase1.TeamID, error) {
	ret := m.ctrl.Call(m, "GetTeamRootID", ctx, tid)
	ret0, _ := ret[0].(keybase1.TeamID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamRootID indicates an expected call of GetTeamRootID
func (mr *MockKBPKIMockRecorder) GetTeamRootID(ctx, tid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamRootID", reflect.TypeOf((*MockKBPKI)(nil).GetTeamRootID), ctx, tid)
}

// HasVerifyingKey mocks base method
func (m *MockKBPKI) HasVerifyingKey(ctx context.Context, uid keybase1.UID, verifyingKey kbfscrypto.VerifyingKey, atServerTime time.Time) error {
	ret := m.ctrl.Call(m, "HasVerifyingKey", ctx, uid, verifyingKey, atServerTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasVerifyingKey indicates an expected call of HasVerifyingKey
func (mr *MockKBPKIMockRecorder) HasVerifyingKey(ctx, uid, verifyingKey, atServerTime interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasVerifyingKey", reflect.TypeOf((*MockKBPKI)(nil).HasVerifyingKey), ctx, uid, verifyingKey, atServerTime)
}

// HasUnverifiedVerifyingKey mocks base method
func (m *MockKBPKI) HasUnverifiedVerifyingKey(ctx context.Context, uid keybase1.UID, verifyingKey kbfscrypto.VerifyingKey) error {
	ret := m.ctrl.Call(m, "HasUnverifiedVerifyingKey", ctx, uid, verifyingKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasUnverifiedVerifyingKey indicates an expected call of HasUnverifiedVerifyingKey
func (mr *MockKBPKIMockRecorder) HasUnverifiedVerifyingKey(ctx, uid, verifyingKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUnverifiedVerifyingKey", reflect.TypeOf((*MockKBPKI)(nil).HasUnverifiedVerifyingKey), ctx, uid, verifyingKey)
}

// GetCryptPublicKeys mocks base method
func (m *MockKBPKI) GetCryptPublicKeys(ctx context.Context, uid keybase1.UID) ([]kbfscrypto.CryptPublicKey, error) {
	ret := m.ctrl.Call(m, "GetCryptPublicKeys", ctx, uid)
	ret0, _ := ret[0].([]kbfscrypto.CryptPublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCryptPublicKeys indicates an expected call of GetCryptPublicKeys
func (mr *MockKBPKIMockRecorder) GetCryptPublicKeys(ctx, uid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCryptPublicKeys", reflect.TypeOf((*MockKBPKI)(nil).GetCryptPublicKeys), ctx, uid)
}

// FavoriteAdd mocks base method
func (m *MockKBPKI) FavoriteAdd(ctx context.Context, folder keybase1.Folder) error {
	ret := m.ctrl.Call(m, "FavoriteAdd", ctx, folder)
	ret0, _ := ret[0].(error)
	return ret0
}

// FavoriteAdd indicates an expected call of FavoriteAdd
func (mr *MockKBPKIMockRecorder) FavoriteAdd(ctx, folder interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavoriteAdd", reflect.TypeOf((*MockKBPKI)(nil).FavoriteAdd), ctx, folder)
}

// FavoriteDelete mocks base method
func (m *MockKBPKI) FavoriteDelete(ctx context.Context, folder keybase1.Folder) error {
	ret := m.ctrl.Call(m, "FavoriteDelete", ctx, folder)
	ret0, _ := ret[0].(error)
	return ret0
}

// FavoriteDelete indicates an expected call of FavoriteDelete
func (mr *MockKBPKIMockRecorder) FavoriteDelete(ctx, folder interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavoriteDelete", reflect.TypeOf((*MockKBPKI)(nil).FavoriteDelete), ctx, folder)
}

// FavoriteList mocks base method
func (m *MockKBPKI) FavoriteList(ctx context.Context) ([]keybase1.Folder, error) {
	ret := m.ctrl.Call(m, "FavoriteList", ctx)
	ret0, _ := ret[0].([]keybase1.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FavoriteList indicates an expected call of FavoriteList
func (mr *MockKBPKIMockRecorder) FavoriteList(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavoriteList", reflect.TypeOf((*MockKBPKI)(nil).FavoriteList), ctx)
}

// Notify mocks base method
func (m *MockKBPKI) Notify(ctx context.Context, notification *keybase1.FSNotification) error {
	ret := m.ctrl.Call(m, "Notify", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify
func (mr *MockKBPKIMockRecorder) Notify(ctx, notification interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockKBPKI)(nil).Notify), ctx, notification)
}

// MockKeyMetadata is a mock of KeyMetadata interface
type MockKeyMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockKeyMetadataMockRecorder
}

// MockKeyMetadataMockRecorder is the mock recorder for MockKeyMetadata
type MockKeyMetadataMockRecorder struct {
	mock *MockKeyMetadata
}

// NewMockKeyMetadata creates a new mock instance
func NewMockKeyMetadata(ctrl *gomock.Controller) *MockKeyMetadata {
	mock := &MockKeyMetadata{ctrl: ctrl}
	mock.recorder = &MockKeyMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyMetadata) EXPECT() *MockKeyMetadataMockRecorder {
	return m.recorder
}

// TlfID mocks base method
func (m *MockKeyMetadata) TlfID() tlf.ID {
	ret := m.ctrl.Call(m, "TlfID")
	ret0, _ := ret[0].(tlf.ID)
	return ret0
}

// TlfID indicates an expected call of TlfID
func (mr *MockKeyMetadataMockRecorder) TlfID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlfID", reflect.TypeOf((*MockKeyMetadata)(nil).TlfID))
}

// LatestKeyGeneration mocks base method
func (m *MockKeyMetadata) LatestKeyGeneration() KeyGen {
	ret := m.ctrl.Call(m, "LatestKeyGeneration")
	ret0, _ := ret[0].(KeyGen)
	return ret0
}

// LatestKeyGeneration indicates an expected call of LatestKeyGeneration
func (mr *MockKeyMetadataMockRecorder) LatestKeyGeneration() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestKeyGeneration", reflect.TypeOf((*MockKeyMetadata)(nil).LatestKeyGeneration))
}

// GetTlfHandle mocks base method
func (m *MockKeyMetadata) GetTlfHandle() *TlfHandle {
	ret := m.ctrl.Call(m, "GetTlfHandle")
	ret0, _ := ret[0].(*TlfHandle)
	return ret0
}

// GetTlfHandle indicates an expected call of GetTlfHandle
func (mr *MockKeyMetadataMockRecorder) GetTlfHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTlfHandle", reflect.TypeOf((*MockKeyMetadata)(nil).GetTlfHandle))
}

// IsWriter mocks base method
func (m *MockKeyMetadata) IsWriter(ctx context.Context, checker TeamMembershipChecker, uid keybase1.UID, verifyingKey kbfscrypto.VerifyingKey) (bool, error) {
	ret := m.ctrl.Call(m, "IsWriter", ctx, checker, uid, verifyingKey)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsWriter indicates an expected call of IsWriter
func (mr *MockKeyMetadataMockRecorder) IsWriter(ctx, checker, uid, verifyingKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWriter", reflect.TypeOf((*MockKeyMetadata)(nil).IsWriter), ctx, checker, uid, verifyingKey)
}

// HasKeyForUser mocks base method
func (m *MockKeyMetadata) HasKeyForUser(user keybase1.UID) (bool, error) {
	ret := m.ctrl.Call(m, "HasKeyForUser", user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasKeyForUser indicates an expected call of HasKeyForUser
func (mr *MockKeyMetadataMockRecorder) HasKeyForUser(user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasKeyForUser", reflect.TypeOf((*MockKeyMetadata)(nil).HasKeyForUser), user)
}

// GetTLFCryptKeyParams mocks base method
func (m *MockKeyMetadata) GetTLFCryptKeyParams(keyGen KeyGen, user keybase1.UID, key kbfscrypto.CryptPublicKey) (kbfscrypto.TLFEphemeralPublicKey, EncryptedTLFCryptKeyClientHalf, TLFCryptKeyServerHalfID, bool, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKeyParams", keyGen, user, key)
	ret0, _ := ret[0].(kbfscrypto.TLFEphemeralPublicKey)
	ret1, _ := ret[1].(EncryptedTLFCryptKeyClientHalf)
	ret2, _ := ret[2].(TLFCryptKeyServerHalfID)
	ret3, _ := ret[3].(bool)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetTLFCryptKeyParams indicates an expected call of GetTLFCryptKeyParams
func (mr *MockKeyMetadataMockRecorder) GetTLFCryptKeyParams(keyGen, user, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKeyParams", reflect.TypeOf((*MockKeyMetadata)(nil).GetTLFCryptKeyParams), keyGen, user, key)
}

// StoresHistoricTLFCryptKeys mocks base method
func (m *MockKeyMetadata) StoresHistoricTLFCryptKeys() bool {
	ret := m.ctrl.Call(m, "StoresHistoricTLFCryptKeys")
	ret0, _ := ret[0].(bool)
	return ret0
}

// StoresHistoricTLFCryptKeys indicates an expected call of StoresHistoricTLFCryptKeys
func (mr *MockKeyMetadataMockRecorder) StoresHistoricTLFCryptKeys() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoresHistoricTLFCryptKeys", reflect.TypeOf((*MockKeyMetadata)(nil).StoresHistoricTLFCryptKeys))
}

// GetHistoricTLFCryptKey mocks base method
func (m *MockKeyMetadata) GetHistoricTLFCryptKey(c cryptoPure, keyGen KeyGen, currentKey kbfscrypto.TLFCryptKey) (kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "GetHistoricTLFCryptKey", c, keyGen, currentKey)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoricTLFCryptKey indicates an expected call of GetHistoricTLFCryptKey
func (mr *MockKeyMetadataMockRecorder) GetHistoricTLFCryptKey(c, keyGen, currentKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoricTLFCryptKey", reflect.TypeOf((*MockKeyMetadata)(nil).GetHistoricTLFCryptKey), c, keyGen, currentKey)
}

// MockencryptionKeyGetter is a mock of encryptionKeyGetter interface
type MockencryptionKeyGetter struct {
	ctrl     *gomock.Controller
	recorder *MockencryptionKeyGetterMockRecorder
}

// MockencryptionKeyGetterMockRecorder is the mock recorder for MockencryptionKeyGetter
type MockencryptionKeyGetterMockRecorder struct {
	mock *MockencryptionKeyGetter
}

// NewMockencryptionKeyGetter creates a new mock instance
func NewMockencryptionKeyGetter(ctrl *gomock.Controller) *MockencryptionKeyGetter {
	mock := &MockencryptionKeyGetter{ctrl: ctrl}
	mock.recorder = &MockencryptionKeyGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockencryptionKeyGetter) EXPECT() *MockencryptionKeyGetterMockRecorder {
	return m.recorder
}

// GetTLFCryptKeyForEncryption mocks base method
func (m *MockencryptionKeyGetter) GetTLFCryptKeyForEncryption(ctx context.Context, kmd KeyMetadata) (kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKeyForEncryption", ctx, kmd)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLFCryptKeyForEncryption indicates an expected call of GetTLFCryptKeyForEncryption
func (mr *MockencryptionKeyGetterMockRecorder) GetTLFCryptKeyForEncryption(ctx, kmd interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKeyForEncryption", reflect.TypeOf((*MockencryptionKeyGetter)(nil).GetTLFCryptKeyForEncryption), ctx, kmd)
}

// MockmdDecryptionKeyGetter is a mock of mdDecryptionKeyGetter interface
type MockmdDecryptionKeyGetter struct {
	ctrl     *gomock.Controller
	recorder *MockmdDecryptionKeyGetterMockRecorder
}

// MockmdDecryptionKeyGetterMockRecorder is the mock recorder for MockmdDecryptionKeyGetter
type MockmdDecryptionKeyGetterMockRecorder struct {
	mock *MockmdDecryptionKeyGetter
}

// NewMockmdDecryptionKeyGetter creates a new mock instance
func NewMockmdDecryptionKeyGetter(ctrl *gomock.Controller) *MockmdDecryptionKeyGetter {
	mock := &MockmdDecryptionKeyGetter{ctrl: ctrl}
	mock.recorder = &MockmdDecryptionKeyGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmdDecryptionKeyGetter) EXPECT() *MockmdDecryptionKeyGetterMockRecorder {
	return m.recorder
}

// GetTLFCryptKeyForMDDecryption mocks base method
func (m *MockmdDecryptionKeyGetter) GetTLFCryptKeyForMDDecryption(ctx context.Context, kmdToDecrypt, kmdWithKeys KeyMetadata) (kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKeyForMDDecryption", ctx, kmdToDecrypt, kmdWithKeys)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLFCryptKeyForMDDecryption indicates an expected call of GetTLFCryptKeyForMDDecryption
func (mr *MockmdDecryptionKeyGetterMockRecorder) GetTLFCryptKeyForMDDecryption(ctx, kmdToDecrypt, kmdWithKeys interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKeyForMDDecryption", reflect.TypeOf((*MockmdDecryptionKeyGetter)(nil).GetTLFCryptKeyForMDDecryption), ctx, kmdToDecrypt, kmdWithKeys)
}

// MockblockDecryptionKeyGetter is a mock of blockDecryptionKeyGetter interface
type MockblockDecryptionKeyGetter struct {
	ctrl     *gomock.Controller
	recorder *MockblockDecryptionKeyGetterMockRecorder
}

// MockblockDecryptionKeyGetterMockRecorder is the mock recorder for MockblockDecryptionKeyGetter
type MockblockDecryptionKeyGetterMockRecorder struct {
	mock *MockblockDecryptionKeyGetter
}

// NewMockblockDecryptionKeyGetter creates a new mock instance
func NewMockblockDecryptionKeyGetter(ctrl *gomock.Controller) *MockblockDecryptionKeyGetter {
	mock := &MockblockDecryptionKeyGetter{ctrl: ctrl}
	mock.recorder = &MockblockDecryptionKeyGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockblockDecryptionKeyGetter) EXPECT() *MockblockDecryptionKeyGetterMockRecorder {
	return m.recorder
}

// GetTLFCryptKeyForBlockDecryption mocks base method
func (m *MockblockDecryptionKeyGetter) GetTLFCryptKeyForBlockDecryption(ctx context.Context, kmd KeyMetadata, blockPtr BlockPointer) (kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKeyForBlockDecryption", ctx, kmd, blockPtr)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLFCryptKeyForBlockDecryption indicates an expected call of GetTLFCryptKeyForBlockDecryption
func (mr *MockblockDecryptionKeyGetterMockRecorder) GetTLFCryptKeyForBlockDecryption(ctx, kmd, blockPtr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKeyForBlockDecryption", reflect.TypeOf((*MockblockDecryptionKeyGetter)(nil).GetTLFCryptKeyForBlockDecryption), ctx, kmd, blockPtr)
}

// MockblockKeyGetter is a mock of blockKeyGetter interface
type MockblockKeyGetter struct {
	ctrl     *gomock.Controller
	recorder *MockblockKeyGetterMockRecorder
}

// MockblockKeyGetterMockRecorder is the mock recorder for MockblockKeyGetter
type MockblockKeyGetterMockRecorder struct {
	mock *MockblockKeyGetter
}

// NewMockblockKeyGetter creates a new mock instance
func NewMockblockKeyGetter(ctrl *gomock.Controller) *MockblockKeyGetter {
	mock := &MockblockKeyGetter{ctrl: ctrl}
	mock.recorder = &MockblockKeyGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockblockKeyGetter) EXPECT() *MockblockKeyGetterMockRecorder {
	return m.recorder
}

// GetTLFCryptKeyForEncryption mocks base method
func (m *MockblockKeyGetter) GetTLFCryptKeyForEncryption(ctx context.Context, kmd KeyMetadata) (kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKeyForEncryption", ctx, kmd)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLFCryptKeyForEncryption indicates an expected call of GetTLFCryptKeyForEncryption
func (mr *MockblockKeyGetterMockRecorder) GetTLFCryptKeyForEncryption(ctx, kmd interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKeyForEncryption", reflect.TypeOf((*MockblockKeyGetter)(nil).GetTLFCryptKeyForEncryption), ctx, kmd)
}

// GetTLFCryptKeyForBlockDecryption mocks base method
func (m *MockblockKeyGetter) GetTLFCryptKeyForBlockDecryption(ctx context.Context, kmd KeyMetadata, blockPtr BlockPointer) (kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKeyForBlockDecryption", ctx, kmd, blockPtr)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLFCryptKeyForBlockDecryption indicates an expected call of GetTLFCryptKeyForBlockDecryption
func (mr *MockblockKeyGetterMockRecorder) GetTLFCryptKeyForBlockDecryption(ctx, kmd, blockPtr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKeyForBlockDecryption", reflect.TypeOf((*MockblockKeyGetter)(nil).GetTLFCryptKeyForBlockDecryption), ctx, kmd, blockPtr)
}

// MockKeyManager is a mock of KeyManager interface
type MockKeyManager struct {
	ctrl     *gomock.Controller
	recorder *MockKeyManagerMockRecorder
}

// MockKeyManagerMockRecorder is the mock recorder for MockKeyManager
type MockKeyManagerMockRecorder struct {
	mock *MockKeyManager
}

// NewMockKeyManager creates a new mock instance
func NewMockKeyManager(ctrl *gomock.Controller) *MockKeyManager {
	mock := &MockKeyManager{ctrl: ctrl}
	mock.recorder = &MockKeyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyManager) EXPECT() *MockKeyManagerMockRecorder {
	return m.recorder
}

// GetTLFCryptKeyForEncryption mocks base method
func (m *MockKeyManager) GetTLFCryptKeyForEncryption(ctx context.Context, kmd KeyMetadata) (kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKeyForEncryption", ctx, kmd)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLFCryptKeyForEncryption indicates an expected call of GetTLFCryptKeyForEncryption
func (mr *MockKeyManagerMockRecorder) GetTLFCryptKeyForEncryption(ctx, kmd interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKeyForEncryption", reflect.TypeOf((*MockKeyManager)(nil).GetTLFCryptKeyForEncryption), ctx, kmd)
}

// GetTLFCryptKeyForBlockDecryption mocks base method
func (m *MockKeyManager) GetTLFCryptKeyForBlockDecryption(ctx context.Context, kmd KeyMetadata, blockPtr BlockPointer) (kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKeyForBlockDecryption", ctx, kmd, blockPtr)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLFCryptKeyForBlockDecryption indicates an expected call of GetTLFCryptKeyForBlockDecryption
func (mr *MockKeyManagerMockRecorder) GetTLFCryptKeyForBlockDecryption(ctx, kmd, blockPtr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKeyForBlockDecryption", reflect.TypeOf((*MockKeyManager)(nil).GetTLFCryptKeyForBlockDecryption), ctx, kmd, blockPtr)
}

// GetTLFCryptKeyForMDDecryption mocks base method
func (m *MockKeyManager) GetTLFCryptKeyForMDDecryption(ctx context.Context, kmdToDecrypt, kmdWithKeys KeyMetadata) (kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKeyForMDDecryption", ctx, kmdToDecrypt, kmdWithKeys)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLFCryptKeyForMDDecryption indicates an expected call of GetTLFCryptKeyForMDDecryption
func (mr *MockKeyManagerMockRecorder) GetTLFCryptKeyForMDDecryption(ctx, kmdToDecrypt, kmdWithKeys interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKeyForMDDecryption", reflect.TypeOf((*MockKeyManager)(nil).GetTLFCryptKeyForMDDecryption), ctx, kmdToDecrypt, kmdWithKeys)
}

// GetTLFCryptKeyOfAllGenerations mocks base method
func (m *MockKeyManager) GetTLFCryptKeyOfAllGenerations(ctx context.Context, kmd KeyMetadata) ([]kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKeyOfAllGenerations", ctx, kmd)
	ret0, _ := ret[0].([]kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLFCryptKeyOfAllGenerations indicates an expected call of GetTLFCryptKeyOfAllGenerations
func (mr *MockKeyManagerMockRecorder) GetTLFCryptKeyOfAllGenerations(ctx, kmd interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKeyOfAllGenerations", reflect.TypeOf((*MockKeyManager)(nil).GetTLFCryptKeyOfAllGenerations), ctx, kmd)
}

// Rekey mocks base method
func (m *MockKeyManager) Rekey(ctx context.Context, md *RootMetadata, promptPaper bool) (bool, *kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "Rekey", ctx, md, promptPaper)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*kbfscrypto.TLFCryptKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Rekey indicates an expected call of Rekey
func (mr *MockKeyManagerMockRecorder) Rekey(ctx, md, promptPaper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rekey", reflect.TypeOf((*MockKeyManager)(nil).Rekey), ctx, md, promptPaper)
}

// MockReporter is a mock of Reporter interface
type MockReporter struct {
	ctrl     *gomock.Controller
	recorder *MockReporterMockRecorder
}

// MockReporterMockRecorder is the mock recorder for MockReporter
type MockReporterMockRecorder struct {
	mock *MockReporter
}

// NewMockReporter creates a new mock instance
func NewMockReporter(ctrl *gomock.Controller) *MockReporter {
	mock := &MockReporter{ctrl: ctrl}
	mock.recorder = &MockReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReporter) EXPECT() *MockReporterMockRecorder {
	return m.recorder
}

// ReportErr mocks base method
func (m *MockReporter) ReportErr(ctx context.Context, tlfName CanonicalTlfName, t tlf.Type, mode ErrorModeType, err error) {
	m.ctrl.Call(m, "ReportErr", ctx, tlfName, t, mode, err)
}

// ReportErr indicates an expected call of ReportErr
func (mr *MockReporterMockRecorder) ReportErr(ctx, tlfName, t, mode, err interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportErr", reflect.TypeOf((*MockReporter)(nil).ReportErr), ctx, tlfName, t, mode, err)
}

// AllKnownErrors mocks base method
func (m *MockReporter) AllKnownErrors() []ReportedError {
	ret := m.ctrl.Call(m, "AllKnownErrors")
	ret0, _ := ret[0].([]ReportedError)
	return ret0
}

// AllKnownErrors indicates an expected call of AllKnownErrors
func (mr *MockReporterMockRecorder) AllKnownErrors() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllKnownErrors", reflect.TypeOf((*MockReporter)(nil).AllKnownErrors))
}

// Notify mocks base method
func (m *MockReporter) Notify(ctx context.Context, notification *keybase1.FSNotification) {
	m.ctrl.Call(m, "Notify", ctx, notification)
}

// Notify indicates an expected call of Notify
func (mr *MockReporterMockRecorder) Notify(ctx, notification interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockReporter)(nil).Notify), ctx, notification)
}

// NotifySyncStatus mocks base method
func (m *MockReporter) NotifySyncStatus(ctx context.Context, status *keybase1.FSPathSyncStatus) {
	m.ctrl.Call(m, "NotifySyncStatus", ctx, status)
}

// NotifySyncStatus indicates an expected call of NotifySyncStatus
func (mr *MockReporterMockRecorder) NotifySyncStatus(ctx, status interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifySyncStatus", reflect.TypeOf((*MockReporter)(nil).NotifySyncStatus), ctx, status)
}

// Shutdown mocks base method
func (m *MockReporter) Shutdown() {
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockReporterMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockReporter)(nil).Shutdown))
}

// MockMDCache is a mock of MDCache interface
type MockMDCache struct {
	ctrl     *gomock.Controller
	recorder *MockMDCacheMockRecorder
}

// MockMDCacheMockRecorder is the mock recorder for MockMDCache
type MockMDCacheMockRecorder struct {
	mock *MockMDCache
}

// NewMockMDCache creates a new mock instance
func NewMockMDCache(ctrl *gomock.Controller) *MockMDCache {
	mock := &MockMDCache{ctrl: ctrl}
	mock.recorder = &MockMDCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMDCache) EXPECT() *MockMDCacheMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockMDCache) Get(tlf tlf.ID, rev kbfsmd.Revision, bid BranchID) (ImmutableRootMetadata, error) {
	ret := m.ctrl.Call(m, "Get", tlf, rev, bid)
	ret0, _ := ret[0].(ImmutableRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMDCacheMockRecorder) Get(tlf, rev, bid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMDCache)(nil).Get), tlf, rev, bid)
}

// Put mocks base method
func (m *MockMDCache) Put(md ImmutableRootMetadata) error {
	ret := m.ctrl.Call(m, "Put", md)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockMDCacheMockRecorder) Put(md interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockMDCache)(nil).Put), md)
}

// Delete mocks base method
func (m *MockMDCache) Delete(tlf tlf.ID, rev kbfsmd.Revision, bid BranchID) {
	m.ctrl.Call(m, "Delete", tlf, rev, bid)
}

// Delete indicates an expected call of Delete
func (mr *MockMDCacheMockRecorder) Delete(tlf, rev, bid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMDCache)(nil).Delete), tlf, rev, bid)
}

// Replace mocks base method
func (m *MockMDCache) Replace(newRmd ImmutableRootMetadata, oldBID BranchID) error {
	ret := m.ctrl.Call(m, "Replace", newRmd, oldBID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replace indicates an expected call of Replace
func (mr *MockMDCacheMockRecorder) Replace(newRmd, oldBID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockMDCache)(nil).Replace), newRmd, oldBID)
}

// MarkPutToServer mocks base method
func (m *MockMDCache) MarkPutToServer(tlf tlf.ID, rev kbfsmd.Revision, bid BranchID) {
	m.ctrl.Call(m, "MarkPutToServer", tlf, rev, bid)
}

// MarkPutToServer indicates an expected call of MarkPutToServer
func (mr *MockMDCacheMockRecorder) MarkPutToServer(tlf, rev, bid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkPutToServer", reflect.TypeOf((*MockMDCache)(nil).MarkPutToServer), tlf, rev, bid)
}

// MockKeyCache is a mock of KeyCache interface
type MockKeyCache struct {
	ctrl     *gomock.Controller
	recorder *MockKeyCacheMockRecorder
}

// MockKeyCacheMockRecorder is the mock recorder for MockKeyCache
type MockKeyCacheMockRecorder struct {
	mock *MockKeyCache
}

// NewMockKeyCache creates a new mock instance
func NewMockKeyCache(ctrl *gomock.Controller) *MockKeyCache {
	mock := &MockKeyCache{ctrl: ctrl}
	mock.recorder = &MockKeyCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyCache) EXPECT() *MockKeyCacheMockRecorder {
	return m.recorder
}

// GetTLFCryptKey mocks base method
func (m *MockKeyCache) GetTLFCryptKey(arg0 tlf.ID, arg1 KeyGen) (kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKey", arg0, arg1)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLFCryptKey indicates an expected call of GetTLFCryptKey
func (mr *MockKeyCacheMockRecorder) GetTLFCryptKey(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKey", reflect.TypeOf((*MockKeyCache)(nil).GetTLFCryptKey), arg0, arg1)
}

// PutTLFCryptKey mocks base method
func (m *MockKeyCache) PutTLFCryptKey(arg0 tlf.ID, arg1 KeyGen, arg2 kbfscrypto.TLFCryptKey) error {
	ret := m.ctrl.Call(m, "PutTLFCryptKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutTLFCryptKey indicates an expected call of PutTLFCryptKey
func (mr *MockKeyCacheMockRecorder) PutTLFCryptKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTLFCryptKey", reflect.TypeOf((*MockKeyCache)(nil).PutTLFCryptKey), arg0, arg1, arg2)
}

// MockBlockCacheSimple is a mock of BlockCacheSimple interface
type MockBlockCacheSimple struct {
	ctrl     *gomock.Controller
	recorder *MockBlockCacheSimpleMockRecorder
}

// MockBlockCacheSimpleMockRecorder is the mock recorder for MockBlockCacheSimple
type MockBlockCacheSimpleMockRecorder struct {
	mock *MockBlockCacheSimple
}

// NewMockBlockCacheSimple creates a new mock instance
func NewMockBlockCacheSimple(ctrl *gomock.Controller) *MockBlockCacheSimple {
	mock := &MockBlockCacheSimple{ctrl: ctrl}
	mock.recorder = &MockBlockCacheSimpleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockCacheSimple) EXPECT() *MockBlockCacheSimpleMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockBlockCacheSimple) Get(ptr BlockPointer) (Block, error) {
	ret := m.ctrl.Call(m, "Get", ptr)
	ret0, _ := ret[0].(Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockBlockCacheSimpleMockRecorder) Get(ptr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBlockCacheSimple)(nil).Get), ptr)
}

// Put mocks base method
func (m *MockBlockCacheSimple) Put(ptr BlockPointer, tlf tlf.ID, block Block, lifetime BlockCacheLifetime) error {
	ret := m.ctrl.Call(m, "Put", ptr, tlf, block, lifetime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockBlockCacheSimpleMockRecorder) Put(ptr, tlf, block, lifetime interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockBlockCacheSimple)(nil).Put), ptr, tlf, block, lifetime)
}

// MockBlockCache is a mock of BlockCache interface
type MockBlockCache struct {
	ctrl     *gomock.Controller
	recorder *MockBlockCacheMockRecorder
}

// MockBlockCacheMockRecorder is the mock recorder for MockBlockCache
type MockBlockCacheMockRecorder struct {
	mock *MockBlockCache
}

// NewMockBlockCache creates a new mock instance
func NewMockBlockCache(ctrl *gomock.Controller) *MockBlockCache {
	mock := &MockBlockCache{ctrl: ctrl}
	mock.recorder = &MockBlockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockCache) EXPECT() *MockBlockCacheMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockBlockCache) Get(ptr BlockPointer) (Block, error) {
	ret := m.ctrl.Call(m, "Get", ptr)
	ret0, _ := ret[0].(Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockBlockCacheMockRecorder) Get(ptr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBlockCache)(nil).Get), ptr)
}

// Put mocks base method
func (m *MockBlockCache) Put(ptr BlockPointer, tlf tlf.ID, block Block, lifetime BlockCacheLifetime) error {
	ret := m.ctrl.Call(m, "Put", ptr, tlf, block, lifetime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockBlockCacheMockRecorder) Put(ptr, tlf, block, lifetime interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockBlockCache)(nil).Put), ptr, tlf, block, lifetime)
}

// CheckForKnownPtr mocks base method
func (m *MockBlockCache) CheckForKnownPtr(tlf tlf.ID, block *FileBlock) (BlockPointer, error) {
	ret := m.ctrl.Call(m, "CheckForKnownPtr", tlf, block)
	ret0, _ := ret[0].(BlockPointer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckForKnownPtr indicates an expected call of CheckForKnownPtr
func (mr *MockBlockCacheMockRecorder) CheckForKnownPtr(tlf, block interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForKnownPtr", reflect.TypeOf((*MockBlockCache)(nil).CheckForKnownPtr), tlf, block)
}

// DeleteTransient mocks base method
func (m *MockBlockCache) DeleteTransient(ptr BlockPointer, tlf tlf.ID) error {
	ret := m.ctrl.Call(m, "DeleteTransient", ptr, tlf)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransient indicates an expected call of DeleteTransient
func (mr *MockBlockCacheMockRecorder) DeleteTransient(ptr, tlf interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransient", reflect.TypeOf((*MockBlockCache)(nil).DeleteTransient), ptr, tlf)
}

// DeletePermanent mocks base method
func (m *MockBlockCache) DeletePermanent(id kbfsblock.ID) error {
	ret := m.ctrl.Call(m, "DeletePermanent", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermanent indicates an expected call of DeletePermanent
func (mr *MockBlockCacheMockRecorder) DeletePermanent(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermanent", reflect.TypeOf((*MockBlockCache)(nil).DeletePermanent), id)
}

// DeleteKnownPtr mocks base method
func (m *MockBlockCache) DeleteKnownPtr(tlf tlf.ID, block *FileBlock) error {
	ret := m.ctrl.Call(m, "DeleteKnownPtr", tlf, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKnownPtr indicates an expected call of DeleteKnownPtr
func (mr *MockBlockCacheMockRecorder) DeleteKnownPtr(tlf, block interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKnownPtr", reflect.TypeOf((*MockBlockCache)(nil).DeleteKnownPtr), tlf, block)
}

// GetWithPrefetch mocks base method
func (m *MockBlockCache) GetWithPrefetch(ptr BlockPointer) (Block, bool, BlockCacheLifetime, error) {
	ret := m.ctrl.Call(m, "GetWithPrefetch", ptr)
	ret0, _ := ret[0].(Block)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(BlockCacheLifetime)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetWithPrefetch indicates an expected call of GetWithPrefetch
func (mr *MockBlockCacheMockRecorder) GetWithPrefetch(ptr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithPrefetch", reflect.TypeOf((*MockBlockCache)(nil).GetWithPrefetch), ptr)
}

// PutWithPrefetch mocks base method
func (m *MockBlockCache) PutWithPrefetch(ptr BlockPointer, tlf tlf.ID, block Block, lifetime BlockCacheLifetime, triggeredPrefetch bool) error {
	ret := m.ctrl.Call(m, "PutWithPrefetch", ptr, tlf, block, lifetime, triggeredPrefetch)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutWithPrefetch indicates an expected call of PutWithPrefetch
func (mr *MockBlockCacheMockRecorder) PutWithPrefetch(ptr, tlf, block, lifetime, triggeredPrefetch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutWithPrefetch", reflect.TypeOf((*MockBlockCache)(nil).PutWithPrefetch), ptr, tlf, block, lifetime, triggeredPrefetch)
}

// SetCleanBytesCapacity mocks base method
func (m *MockBlockCache) SetCleanBytesCapacity(capacity uint64) {
	m.ctrl.Call(m, "SetCleanBytesCapacity", capacity)
}

// SetCleanBytesCapacity indicates an expected call of SetCleanBytesCapacity
func (mr *MockBlockCacheMockRecorder) SetCleanBytesCapacity(capacity interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCleanBytesCapacity", reflect.TypeOf((*MockBlockCache)(nil).SetCleanBytesCapacity), capacity)
}

// GetCleanBytesCapacity mocks base method
func (m *MockBlockCache) GetCleanBytesCapacity() uint64 {
	ret := m.ctrl.Call(m, "GetCleanBytesCapacity")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetCleanBytesCapacity indicates an expected call of GetCleanBytesCapacity
func (mr *MockBlockCacheMockRecorder) GetCleanBytesCapacity() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCleanBytesCapacity", reflect.TypeOf((*MockBlockCache)(nil).GetCleanBytesCapacity))
}

// MockDirtyBlockCache is a mock of DirtyBlockCache interface
type MockDirtyBlockCache struct {
	ctrl     *gomock.Controller
	recorder *MockDirtyBlockCacheMockRecorder
}

// MockDirtyBlockCacheMockRecorder is the mock recorder for MockDirtyBlockCache
type MockDirtyBlockCacheMockRecorder struct {
	mock *MockDirtyBlockCache
}

// NewMockDirtyBlockCache creates a new mock instance
func NewMockDirtyBlockCache(ctrl *gomock.Controller) *MockDirtyBlockCache {
	mock := &MockDirtyBlockCache{ctrl: ctrl}
	mock.recorder = &MockDirtyBlockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDirtyBlockCache) EXPECT() *MockDirtyBlockCacheMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDirtyBlockCache) Get(tlfID tlf.ID, ptr BlockPointer, branch BranchName) (Block, error) {
	ret := m.ctrl.Call(m, "Get", tlfID, ptr, branch)
	ret0, _ := ret[0].(Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDirtyBlockCacheMockRecorder) Get(tlfID, ptr, branch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDirtyBlockCache)(nil).Get), tlfID, ptr, branch)
}

// Put mocks base method
func (m *MockDirtyBlockCache) Put(tlfID tlf.ID, ptr BlockPointer, branch BranchName, block Block) error {
	ret := m.ctrl.Call(m, "Put", tlfID, ptr, branch, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockDirtyBlockCacheMockRecorder) Put(tlfID, ptr, branch, block interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDirtyBlockCache)(nil).Put), tlfID, ptr, branch, block)
}

// Delete mocks base method
func (m *MockDirtyBlockCache) Delete(tlfID tlf.ID, ptr BlockPointer, branch BranchName) error {
	ret := m.ctrl.Call(m, "Delete", tlfID, ptr, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDirtyBlockCacheMockRecorder) Delete(tlfID, ptr, branch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDirtyBlockCache)(nil).Delete), tlfID, ptr, branch)
}

// IsDirty mocks base method
func (m *MockDirtyBlockCache) IsDirty(tlfID tlf.ID, ptr BlockPointer, branch BranchName) bool {
	ret := m.ctrl.Call(m, "IsDirty", tlfID, ptr, branch)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDirty indicates an expected call of IsDirty
func (mr *MockDirtyBlockCacheMockRecorder) IsDirty(tlfID, ptr, branch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDirty", reflect.TypeOf((*MockDirtyBlockCache)(nil).IsDirty), tlfID, ptr, branch)
}

// IsAnyDirty mocks base method
func (m *MockDirtyBlockCache) IsAnyDirty(tlfID tlf.ID) bool {
	ret := m.ctrl.Call(m, "IsAnyDirty", tlfID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAnyDirty indicates an expected call of IsAnyDirty
func (mr *MockDirtyBlockCacheMockRecorder) IsAnyDirty(tlfID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAnyDirty", reflect.TypeOf((*MockDirtyBlockCache)(nil).IsAnyDirty), tlfID)
}

// RequestPermissionToDirty mocks base method
func (m *MockDirtyBlockCache) RequestPermissionToDirty(ctx context.Context, tlfID tlf.ID, estimatedDirtyBytes int64) (DirtyPermChan, error) {
	ret := m.ctrl.Call(m, "RequestPermissionToDirty", ctx, tlfID, estimatedDirtyBytes)
	ret0, _ := ret[0].(DirtyPermChan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestPermissionToDirty indicates an expected call of RequestPermissionToDirty
func (mr *MockDirtyBlockCacheMockRecorder) RequestPermissionToDirty(ctx, tlfID, estimatedDirtyBytes interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPermissionToDirty", reflect.TypeOf((*MockDirtyBlockCache)(nil).RequestPermissionToDirty), ctx, tlfID, estimatedDirtyBytes)
}

// UpdateUnsyncedBytes mocks base method
func (m *MockDirtyBlockCache) UpdateUnsyncedBytes(tlfID tlf.ID, newUnsyncedBytes int64, wasSyncing bool) {
	m.ctrl.Call(m, "UpdateUnsyncedBytes", tlfID, newUnsyncedBytes, wasSyncing)
}

// UpdateUnsyncedBytes indicates an expected call of UpdateUnsyncedBytes
func (mr *MockDirtyBlockCacheMockRecorder) UpdateUnsyncedBytes(tlfID, newUnsyncedBytes, wasSyncing interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUnsyncedBytes", reflect.TypeOf((*MockDirtyBlockCache)(nil).UpdateUnsyncedBytes), tlfID, newUnsyncedBytes, wasSyncing)
}

// UpdateSyncingBytes mocks base method
func (m *MockDirtyBlockCache) UpdateSyncingBytes(tlfID tlf.ID, size int64) {
	m.ctrl.Call(m, "UpdateSyncingBytes", tlfID, size)
}

// UpdateSyncingBytes indicates an expected call of UpdateSyncingBytes
func (mr *MockDirtyBlockCacheMockRecorder) UpdateSyncingBytes(tlfID, size interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncingBytes", reflect.TypeOf((*MockDirtyBlockCache)(nil).UpdateSyncingBytes), tlfID, size)
}

// BlockSyncFinished mocks base method
func (m *MockDirtyBlockCache) BlockSyncFinished(tlfID tlf.ID, size int64) {
	m.ctrl.Call(m, "BlockSyncFinished", tlfID, size)
}

// BlockSyncFinished indicates an expected call of BlockSyncFinished
func (mr *MockDirtyBlockCacheMockRecorder) BlockSyncFinished(tlfID, size interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockSyncFinished", reflect.TypeOf((*MockDirtyBlockCache)(nil).BlockSyncFinished), tlfID, size)
}

// SyncFinished mocks base method
func (m *MockDirtyBlockCache) SyncFinished(tlfID tlf.ID, size int64) {
	m.ctrl.Call(m, "SyncFinished", tlfID, size)
}

// SyncFinished indicates an expected call of SyncFinished
func (mr *MockDirtyBlockCacheMockRecorder) SyncFinished(tlfID, size interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncFinished", reflect.TypeOf((*MockDirtyBlockCache)(nil).SyncFinished), tlfID, size)
}

// ShouldForceSync mocks base method
func (m *MockDirtyBlockCache) ShouldForceSync(tlfID tlf.ID) bool {
	ret := m.ctrl.Call(m, "ShouldForceSync", tlfID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldForceSync indicates an expected call of ShouldForceSync
func (mr *MockDirtyBlockCacheMockRecorder) ShouldForceSync(tlfID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldForceSync", reflect.TypeOf((*MockDirtyBlockCache)(nil).ShouldForceSync), tlfID)
}

// Shutdown mocks base method
func (m *MockDirtyBlockCache) Shutdown() error {
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockDirtyBlockCacheMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockDirtyBlockCache)(nil).Shutdown))
}

// MockDiskBlockCache is a mock of DiskBlockCache interface
type MockDiskBlockCache struct {
	ctrl     *gomock.Controller
	recorder *MockDiskBlockCacheMockRecorder
}

// MockDiskBlockCacheMockRecorder is the mock recorder for MockDiskBlockCache
type MockDiskBlockCacheMockRecorder struct {
	mock *MockDiskBlockCache
}

// NewMockDiskBlockCache creates a new mock instance
func NewMockDiskBlockCache(ctrl *gomock.Controller) *MockDiskBlockCache {
	mock := &MockDiskBlockCache{ctrl: ctrl}
	mock.recorder = &MockDiskBlockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiskBlockCache) EXPECT() *MockDiskBlockCacheMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDiskBlockCache) Get(ctx context.Context, tlfID tlf.ID, blockID kbfsblock.ID) ([]byte, kbfscrypto.BlockCryptKeyServerHalf, bool, error) {
	ret := m.ctrl.Call(m, "Get", ctx, tlfID, blockID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(kbfscrypto.BlockCryptKeyServerHalf)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Get indicates an expected call of Get
func (mr *MockDiskBlockCacheMockRecorder) Get(ctx, tlfID, blockID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDiskBlockCache)(nil).Get), ctx, tlfID, blockID)
}

// Put mocks base method
func (m *MockDiskBlockCache) Put(ctx context.Context, tlfID tlf.ID, blockID kbfsblock.ID, buf []byte, serverHalf kbfscrypto.BlockCryptKeyServerHalf) error {
	ret := m.ctrl.Call(m, "Put", ctx, tlfID, blockID, buf, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockDiskBlockCacheMockRecorder) Put(ctx, tlfID, blockID, buf, serverHalf interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDiskBlockCache)(nil).Put), ctx, tlfID, blockID, buf, serverHalf)
}

// Delete mocks base method
func (m *MockDiskBlockCache) Delete(ctx context.Context, blockIDs []kbfsblock.ID) (int, int64, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, blockIDs)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Delete indicates an expected call of Delete
func (mr *MockDiskBlockCacheMockRecorder) Delete(ctx, blockIDs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDiskBlockCache)(nil).Delete), ctx, blockIDs)
}

// UpdateMetadata mocks base method
func (m *MockDiskBlockCache) UpdateMetadata(ctx context.Context, blockID kbfsblock.ID, triggeredPrefetch, finishedPrefetch bool) error {
	ret := m.ctrl.Call(m, "UpdateMetadata", ctx, blockID, triggeredPrefetch, finishedPrefetch)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetadata indicates an expected call of UpdateMetadata
func (mr *MockDiskBlockCacheMockRecorder) UpdateMetadata(ctx, blockID, triggeredPrefetch, finishedPrefetch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetadata", reflect.TypeOf((*MockDiskBlockCache)(nil).UpdateMetadata), ctx, blockID, triggeredPrefetch, finishedPrefetch)
}

// GetMetadata mocks base method
func (m *MockDiskBlockCache) GetMetadata(ctx context.Context, blockID kbfsblock.ID) (DiskBlockCacheMetadata, error) {
	ret := m.ctrl.Call(m, "GetMetadata", ctx, blockID)
	ret0, _ := ret[0].(DiskBlockCacheMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockDiskBlockCacheMockRecorder) GetMetadata(ctx, blockID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockDiskBlockCache)(nil).GetMetadata), ctx, blockID)
}

// Size mocks base method
func (m *MockDiskBlockCache) Size() int64 {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockDiskBlockCacheMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockDiskBlockCache)(nil).Size))
}

// Status mocks base method
func (m *MockDiskBlockCache) Status(ctx context.Context) map[string]DiskBlockCacheStatus {
	ret := m.ctrl.Call(m, "Status", ctx)
	ret0, _ := ret[0].(map[string]DiskBlockCacheStatus)
	return ret0
}

// Status indicates an expected call of Status
func (mr *MockDiskBlockCacheMockRecorder) Status(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockDiskBlockCache)(nil).Status), ctx)
}

// Shutdown mocks base method
func (m *MockDiskBlockCache) Shutdown(ctx context.Context) {
	m.ctrl.Call(m, "Shutdown", ctx)
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockDiskBlockCacheMockRecorder) Shutdown(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockDiskBlockCache)(nil).Shutdown), ctx)
}

// MockcryptoPure is a mock of cryptoPure interface
type MockcryptoPure struct {
	ctrl     *gomock.Controller
	recorder *MockcryptoPureMockRecorder
}

// MockcryptoPureMockRecorder is the mock recorder for MockcryptoPure
type MockcryptoPureMockRecorder struct {
	mock *MockcryptoPure
}

// NewMockcryptoPure creates a new mock instance
func NewMockcryptoPure(ctrl *gomock.Controller) *MockcryptoPure {
	mock := &MockcryptoPure{ctrl: ctrl}
	mock.recorder = &MockcryptoPureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcryptoPure) EXPECT() *MockcryptoPureMockRecorder {
	return m.recorder
}

// MakeRandomTlfID mocks base method
func (m *MockcryptoPure) MakeRandomTlfID(t tlf.Type) (tlf.ID, error) {
	ret := m.ctrl.Call(m, "MakeRandomTlfID", t)
	ret0, _ := ret[0].(tlf.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeRandomTlfID indicates an expected call of MakeRandomTlfID
func (mr *MockcryptoPureMockRecorder) MakeRandomTlfID(t interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRandomTlfID", reflect.TypeOf((*MockcryptoPure)(nil).MakeRandomTlfID), t)
}

// MakeRandomBranchID mocks base method
func (m *MockcryptoPure) MakeRandomBranchID() (BranchID, error) {
	ret := m.ctrl.Call(m, "MakeRandomBranchID")
	ret0, _ := ret[0].(BranchID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeRandomBranchID indicates an expected call of MakeRandomBranchID
func (mr *MockcryptoPureMockRecorder) MakeRandomBranchID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRandomBranchID", reflect.TypeOf((*MockcryptoPure)(nil).MakeRandomBranchID))
}

// MakeMerkleHash mocks base method
func (m *MockcryptoPure) MakeMerkleHash(md *RootMetadataSigned) (MerkleHash, error) {
	ret := m.ctrl.Call(m, "MakeMerkleHash", md)
	ret0, _ := ret[0].(MerkleHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeMerkleHash indicates an expected call of MakeMerkleHash
func (mr *MockcryptoPureMockRecorder) MakeMerkleHash(md interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeMerkleHash", reflect.TypeOf((*MockcryptoPure)(nil).MakeMerkleHash), md)
}

// MakeTemporaryBlockID mocks base method
func (m *MockcryptoPure) MakeTemporaryBlockID() (kbfsblock.ID, error) {
	ret := m.ctrl.Call(m, "MakeTemporaryBlockID")
	ret0, _ := ret[0].(kbfsblock.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeTemporaryBlockID indicates an expected call of MakeTemporaryBlockID
func (mr *MockcryptoPureMockRecorder) MakeTemporaryBlockID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeTemporaryBlockID", reflect.TypeOf((*MockcryptoPure)(nil).MakeTemporaryBlockID))
}

// MakeBlockRefNonce mocks base method
func (m *MockcryptoPure) MakeBlockRefNonce() (kbfsblock.RefNonce, error) {
	ret := m.ctrl.Call(m, "MakeBlockRefNonce")
	ret0, _ := ret[0].(kbfsblock.RefNonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeBlockRefNonce indicates an expected call of MakeBlockRefNonce
func (mr *MockcryptoPureMockRecorder) MakeBlockRefNonce() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBlockRefNonce", reflect.TypeOf((*MockcryptoPure)(nil).MakeBlockRefNonce))
}

// MakeRandomTLFEphemeralKeys mocks base method
func (m *MockcryptoPure) MakeRandomTLFEphemeralKeys() (kbfscrypto.TLFEphemeralPublicKey, kbfscrypto.TLFEphemeralPrivateKey, error) {
	ret := m.ctrl.Call(m, "MakeRandomTLFEphemeralKeys")
	ret0, _ := ret[0].(kbfscrypto.TLFEphemeralPublicKey)
	ret1, _ := ret[1].(kbfscrypto.TLFEphemeralPrivateKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakeRandomTLFEphemeralKeys indicates an expected call of MakeRandomTLFEphemeralKeys
func (mr *MockcryptoPureMockRecorder) MakeRandomTLFEphemeralKeys() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRandomTLFEphemeralKeys", reflect.TypeOf((*MockcryptoPure)(nil).MakeRandomTLFEphemeralKeys))
}

// MakeRandomTLFKeys mocks base method
func (m *MockcryptoPure) MakeRandomTLFKeys() (kbfscrypto.TLFPublicKey, kbfscrypto.TLFPrivateKey, kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "MakeRandomTLFKeys")
	ret0, _ := ret[0].(kbfscrypto.TLFPublicKey)
	ret1, _ := ret[1].(kbfscrypto.TLFPrivateKey)
	ret2, _ := ret[2].(kbfscrypto.TLFCryptKey)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// MakeRandomTLFKeys indicates an expected call of MakeRandomTLFKeys
func (mr *MockcryptoPureMockRecorder) MakeRandomTLFKeys() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRandomTLFKeys", reflect.TypeOf((*MockcryptoPure)(nil).MakeRandomTLFKeys))
}

// MakeRandomTLFCryptKeyServerHalf mocks base method
func (m *MockcryptoPure) MakeRandomTLFCryptKeyServerHalf() (kbfscrypto.TLFCryptKeyServerHalf, error) {
	ret := m.ctrl.Call(m, "MakeRandomTLFCryptKeyServerHalf")
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeRandomTLFCryptKeyServerHalf indicates an expected call of MakeRandomTLFCryptKeyServerHalf
func (mr *MockcryptoPureMockRecorder) MakeRandomTLFCryptKeyServerHalf() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRandomTLFCryptKeyServerHalf", reflect.TypeOf((*MockcryptoPure)(nil).MakeRandomTLFCryptKeyServerHalf))
}

// MakeRandomBlockCryptKeyServerHalf mocks base method
func (m *MockcryptoPure) MakeRandomBlockCryptKeyServerHalf() (kbfscrypto.BlockCryptKeyServerHalf, error) {
	ret := m.ctrl.Call(m, "MakeRandomBlockCryptKeyServerHalf")
	ret0, _ := ret[0].(kbfscrypto.BlockCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeRandomBlockCryptKeyServerHalf indicates an expected call of MakeRandomBlockCryptKeyServerHalf
func (mr *MockcryptoPureMockRecorder) MakeRandomBlockCryptKeyServerHalf() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRandomBlockCryptKeyServerHalf", reflect.TypeOf((*MockcryptoPure)(nil).MakeRandomBlockCryptKeyServerHalf))
}

// EncryptTLFCryptKeyClientHalf mocks base method
func (m *MockcryptoPure) EncryptTLFCryptKeyClientHalf(privateKey kbfscrypto.TLFEphemeralPrivateKey, publicKey kbfscrypto.CryptPublicKey, clientHalf kbfscrypto.TLFCryptKeyClientHalf) (EncryptedTLFCryptKeyClientHalf, error) {
	ret := m.ctrl.Call(m, "EncryptTLFCryptKeyClientHalf", privateKey, publicKey, clientHalf)
	ret0, _ := ret[0].(EncryptedTLFCryptKeyClientHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptTLFCryptKeyClientHalf indicates an expected call of EncryptTLFCryptKeyClientHalf
func (mr *MockcryptoPureMockRecorder) EncryptTLFCryptKeyClientHalf(privateKey, publicKey, clientHalf interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptTLFCryptKeyClientHalf", reflect.TypeOf((*MockcryptoPure)(nil).EncryptTLFCryptKeyClientHalf), privateKey, publicKey, clientHalf)
}

// EncryptPrivateMetadata mocks base method
func (m *MockcryptoPure) EncryptPrivateMetadata(pmd PrivateMetadata, key kbfscrypto.TLFCryptKey) (EncryptedPrivateMetadata, error) {
	ret := m.ctrl.Call(m, "EncryptPrivateMetadata", pmd, key)
	ret0, _ := ret[0].(EncryptedPrivateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptPrivateMetadata indicates an expected call of EncryptPrivateMetadata
func (mr *MockcryptoPureMockRecorder) EncryptPrivateMetadata(pmd, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptPrivateMetadata", reflect.TypeOf((*MockcryptoPure)(nil).EncryptPrivateMetadata), pmd, key)
}

// DecryptPrivateMetadata mocks base method
func (m *MockcryptoPure) DecryptPrivateMetadata(encryptedPMD EncryptedPrivateMetadata, key kbfscrypto.TLFCryptKey) (PrivateMetadata, error) {
	ret := m.ctrl.Call(m, "DecryptPrivateMetadata", encryptedPMD, key)
	ret0, _ := ret[0].(PrivateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptPrivateMetadata indicates an expected call of DecryptPrivateMetadata
func (mr *MockcryptoPureMockRecorder) DecryptPrivateMetadata(encryptedPMD, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptPrivateMetadata", reflect.TypeOf((*MockcryptoPure)(nil).DecryptPrivateMetadata), encryptedPMD, key)
}

// EncryptBlock mocks base method
func (m *MockcryptoPure) EncryptBlock(block Block, key kbfscrypto.BlockCryptKey) (int, EncryptedBlock, error) {
	ret := m.ctrl.Call(m, "EncryptBlock", block, key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(EncryptedBlock)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EncryptBlock indicates an expected call of EncryptBlock
func (mr *MockcryptoPureMockRecorder) EncryptBlock(block, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptBlock", reflect.TypeOf((*MockcryptoPure)(nil).EncryptBlock), block, key)
}

// DecryptBlock mocks base method
func (m *MockcryptoPure) DecryptBlock(encryptedBlock EncryptedBlock, key kbfscrypto.BlockCryptKey, block Block) error {
	ret := m.ctrl.Call(m, "DecryptBlock", encryptedBlock, key, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecryptBlock indicates an expected call of DecryptBlock
func (mr *MockcryptoPureMockRecorder) DecryptBlock(encryptedBlock, key, block interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptBlock", reflect.TypeOf((*MockcryptoPure)(nil).DecryptBlock), encryptedBlock, key, block)
}

// GetTLFCryptKeyServerHalfID mocks base method
func (m *MockcryptoPure) GetTLFCryptKeyServerHalfID(user keybase1.UID, devicePubKey kbfscrypto.CryptPublicKey, serverHalf kbfscrypto.TLFCryptKeyServerHalf) (TLFCryptKeyServerHalfID, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKeyServerHalfID", user, devicePubKey, serverHalf)
	ret0, _ := ret[0].(TLFCryptKeyServerHalfID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLFCryptKeyServerHalfID indicates an expected call of GetTLFCryptKeyServerHalfID
func (mr *MockcryptoPureMockRecorder) GetTLFCryptKeyServerHalfID(user, devicePubKey, serverHalf interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKeyServerHalfID", reflect.TypeOf((*MockcryptoPure)(nil).GetTLFCryptKeyServerHalfID), user, devicePubKey, serverHalf)
}

// VerifyTLFCryptKeyServerHalfID mocks base method
func (m *MockcryptoPure) VerifyTLFCryptKeyServerHalfID(serverHalfID TLFCryptKeyServerHalfID, user keybase1.UID, devicePubKey kbfscrypto.CryptPublicKey, serverHalf kbfscrypto.TLFCryptKeyServerHalf) error {
	ret := m.ctrl.Call(m, "VerifyTLFCryptKeyServerHalfID", serverHalfID, user, devicePubKey, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyTLFCryptKeyServerHalfID indicates an expected call of VerifyTLFCryptKeyServerHalfID
func (mr *MockcryptoPureMockRecorder) VerifyTLFCryptKeyServerHalfID(serverHalfID, user, devicePubKey, serverHalf interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTLFCryptKeyServerHalfID", reflect.TypeOf((*MockcryptoPure)(nil).VerifyTLFCryptKeyServerHalfID), serverHalfID, user, devicePubKey, serverHalf)
}

// EncryptMerkleLeaf mocks base method
func (m *MockcryptoPure) EncryptMerkleLeaf(leaf MerkleLeaf, pubKey kbfscrypto.TLFPublicKey, nonce *[24]byte, ePrivKey kbfscrypto.TLFEphemeralPrivateKey) (EncryptedMerkleLeaf, error) {
	ret := m.ctrl.Call(m, "EncryptMerkleLeaf", leaf, pubKey, nonce, ePrivKey)
	ret0, _ := ret[0].(EncryptedMerkleLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptMerkleLeaf indicates an expected call of EncryptMerkleLeaf
func (mr *MockcryptoPureMockRecorder) EncryptMerkleLeaf(leaf, pubKey, nonce, ePrivKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptMerkleLeaf", reflect.TypeOf((*MockcryptoPure)(nil).EncryptMerkleLeaf), leaf, pubKey, nonce, ePrivKey)
}

// DecryptMerkleLeaf mocks base method
func (m *MockcryptoPure) DecryptMerkleLeaf(encryptedLeaf EncryptedMerkleLeaf, privKey kbfscrypto.TLFPrivateKey, nonce *[24]byte, ePubKey kbfscrypto.TLFEphemeralPublicKey) (*MerkleLeaf, error) {
	ret := m.ctrl.Call(m, "DecryptMerkleLeaf", encryptedLeaf, privKey, nonce, ePubKey)
	ret0, _ := ret[0].(*MerkleLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptMerkleLeaf indicates an expected call of DecryptMerkleLeaf
func (mr *MockcryptoPureMockRecorder) DecryptMerkleLeaf(encryptedLeaf, privKey, nonce, ePubKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptMerkleLeaf", reflect.TypeOf((*MockcryptoPure)(nil).DecryptMerkleLeaf), encryptedLeaf, privKey, nonce, ePubKey)
}

// MakeTLFWriterKeyBundleID mocks base method
func (m *MockcryptoPure) MakeTLFWriterKeyBundleID(wkb TLFWriterKeyBundleV3) (TLFWriterKeyBundleID, error) {
	ret := m.ctrl.Call(m, "MakeTLFWriterKeyBundleID", wkb)
	ret0, _ := ret[0].(TLFWriterKeyBundleID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeTLFWriterKeyBundleID indicates an expected call of MakeTLFWriterKeyBundleID
func (mr *MockcryptoPureMockRecorder) MakeTLFWriterKeyBundleID(wkb interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeTLFWriterKeyBundleID", reflect.TypeOf((*MockcryptoPure)(nil).MakeTLFWriterKeyBundleID), wkb)
}

// MakeTLFReaderKeyBundleID mocks base method
func (m *MockcryptoPure) MakeTLFReaderKeyBundleID(rkb TLFReaderKeyBundleV3) (TLFReaderKeyBundleID, error) {
	ret := m.ctrl.Call(m, "MakeTLFReaderKeyBundleID", rkb)
	ret0, _ := ret[0].(TLFReaderKeyBundleID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeTLFReaderKeyBundleID indicates an expected call of MakeTLFReaderKeyBundleID
func (mr *MockcryptoPureMockRecorder) MakeTLFReaderKeyBundleID(rkb interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeTLFReaderKeyBundleID", reflect.TypeOf((*MockcryptoPure)(nil).MakeTLFReaderKeyBundleID), rkb)
}

// EncryptTLFCryptKeys mocks base method
func (m *MockcryptoPure) EncryptTLFCryptKeys(oldKeys []kbfscrypto.TLFCryptKey, key kbfscrypto.TLFCryptKey) (EncryptedTLFCryptKeys, error) {
	ret := m.ctrl.Call(m, "EncryptTLFCryptKeys", oldKeys, key)
	ret0, _ := ret[0].(EncryptedTLFCryptKeys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptTLFCryptKeys indicates an expected call of EncryptTLFCryptKeys
func (mr *MockcryptoPureMockRecorder) EncryptTLFCryptKeys(oldKeys, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptTLFCryptKeys", reflect.TypeOf((*MockcryptoPure)(nil).EncryptTLFCryptKeys), oldKeys, key)
}

// DecryptTLFCryptKeys mocks base method
func (m *MockcryptoPure) DecryptTLFCryptKeys(encKeys EncryptedTLFCryptKeys, key kbfscrypto.TLFCryptKey) ([]kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "DecryptTLFCryptKeys", encKeys, key)
	ret0, _ := ret[0].([]kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptTLFCryptKeys indicates an expected call of DecryptTLFCryptKeys
func (mr *MockcryptoPureMockRecorder) DecryptTLFCryptKeys(encKeys, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptTLFCryptKeys", reflect.TypeOf((*MockcryptoPure)(nil).DecryptTLFCryptKeys), encKeys, key)
}

// MockCrypto is a mock of Crypto interface
type MockCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoMockRecorder
}

// MockCryptoMockRecorder is the mock recorder for MockCrypto
type MockCryptoMockRecorder struct {
	mock *MockCrypto
}

// NewMockCrypto creates a new mock instance
func NewMockCrypto(ctrl *gomock.Controller) *MockCrypto {
	mock := &MockCrypto{ctrl: ctrl}
	mock.recorder = &MockCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCrypto) EXPECT() *MockCryptoMockRecorder {
	return m.recorder
}

// MakeRandomTlfID mocks base method
func (m *MockCrypto) MakeRandomTlfID(t tlf.Type) (tlf.ID, error) {
	ret := m.ctrl.Call(m, "MakeRandomTlfID", t)
	ret0, _ := ret[0].(tlf.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeRandomTlfID indicates an expected call of MakeRandomTlfID
func (mr *MockCryptoMockRecorder) MakeRandomTlfID(t interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRandomTlfID", reflect.TypeOf((*MockCrypto)(nil).MakeRandomTlfID), t)
}

// MakeRandomBranchID mocks base method
func (m *MockCrypto) MakeRandomBranchID() (BranchID, error) {
	ret := m.ctrl.Call(m, "MakeRandomBranchID")
	ret0, _ := ret[0].(BranchID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeRandomBranchID indicates an expected call of MakeRandomBranchID
func (mr *MockCryptoMockRecorder) MakeRandomBranchID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRandomBranchID", reflect.TypeOf((*MockCrypto)(nil).MakeRandomBranchID))
}

// MakeMerkleHash mocks base method
func (m *MockCrypto) MakeMerkleHash(md *RootMetadataSigned) (MerkleHash, error) {
	ret := m.ctrl.Call(m, "MakeMerkleHash", md)
	ret0, _ := ret[0].(MerkleHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeMerkleHash indicates an expected call of MakeMerkleHash
func (mr *MockCryptoMockRecorder) MakeMerkleHash(md interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeMerkleHash", reflect.TypeOf((*MockCrypto)(nil).MakeMerkleHash), md)
}

// MakeTemporaryBlockID mocks base method
func (m *MockCrypto) MakeTemporaryBlockID() (kbfsblock.ID, error) {
	ret := m.ctrl.Call(m, "MakeTemporaryBlockID")
	ret0, _ := ret[0].(kbfsblock.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeTemporaryBlockID indicates an expected call of MakeTemporaryBlockID
func (mr *MockCryptoMockRecorder) MakeTemporaryBlockID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeTemporaryBlockID", reflect.TypeOf((*MockCrypto)(nil).MakeTemporaryBlockID))
}

// MakeBlockRefNonce mocks base method
func (m *MockCrypto) MakeBlockRefNonce() (kbfsblock.RefNonce, error) {
	ret := m.ctrl.Call(m, "MakeBlockRefNonce")
	ret0, _ := ret[0].(kbfsblock.RefNonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeBlockRefNonce indicates an expected call of MakeBlockRefNonce
func (mr *MockCryptoMockRecorder) MakeBlockRefNonce() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBlockRefNonce", reflect.TypeOf((*MockCrypto)(nil).MakeBlockRefNonce))
}

// MakeRandomTLFEphemeralKeys mocks base method
func (m *MockCrypto) MakeRandomTLFEphemeralKeys() (kbfscrypto.TLFEphemeralPublicKey, kbfscrypto.TLFEphemeralPrivateKey, error) {
	ret := m.ctrl.Call(m, "MakeRandomTLFEphemeralKeys")
	ret0, _ := ret[0].(kbfscrypto.TLFEphemeralPublicKey)
	ret1, _ := ret[1].(kbfscrypto.TLFEphemeralPrivateKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakeRandomTLFEphemeralKeys indicates an expected call of MakeRandomTLFEphemeralKeys
func (mr *MockCryptoMockRecorder) MakeRandomTLFEphemeralKeys() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRandomTLFEphemeralKeys", reflect.TypeOf((*MockCrypto)(nil).MakeRandomTLFEphemeralKeys))
}

// MakeRandomTLFKeys mocks base method
func (m *MockCrypto) MakeRandomTLFKeys() (kbfscrypto.TLFPublicKey, kbfscrypto.TLFPrivateKey, kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "MakeRandomTLFKeys")
	ret0, _ := ret[0].(kbfscrypto.TLFPublicKey)
	ret1, _ := ret[1].(kbfscrypto.TLFPrivateKey)
	ret2, _ := ret[2].(kbfscrypto.TLFCryptKey)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// MakeRandomTLFKeys indicates an expected call of MakeRandomTLFKeys
func (mr *MockCryptoMockRecorder) MakeRandomTLFKeys() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRandomTLFKeys", reflect.TypeOf((*MockCrypto)(nil).MakeRandomTLFKeys))
}

// MakeRandomTLFCryptKeyServerHalf mocks base method
func (m *MockCrypto) MakeRandomTLFCryptKeyServerHalf() (kbfscrypto.TLFCryptKeyServerHalf, error) {
	ret := m.ctrl.Call(m, "MakeRandomTLFCryptKeyServerHalf")
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeRandomTLFCryptKeyServerHalf indicates an expected call of MakeRandomTLFCryptKeyServerHalf
func (mr *MockCryptoMockRecorder) MakeRandomTLFCryptKeyServerHalf() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRandomTLFCryptKeyServerHalf", reflect.TypeOf((*MockCrypto)(nil).MakeRandomTLFCryptKeyServerHalf))
}

// MakeRandomBlockCryptKeyServerHalf mocks base method
func (m *MockCrypto) MakeRandomBlockCryptKeyServerHalf() (kbfscrypto.BlockCryptKeyServerHalf, error) {
	ret := m.ctrl.Call(m, "MakeRandomBlockCryptKeyServerHalf")
	ret0, _ := ret[0].(kbfscrypto.BlockCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeRandomBlockCryptKeyServerHalf indicates an expected call of MakeRandomBlockCryptKeyServerHalf
func (mr *MockCryptoMockRecorder) MakeRandomBlockCryptKeyServerHalf() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRandomBlockCryptKeyServerHalf", reflect.TypeOf((*MockCrypto)(nil).MakeRandomBlockCryptKeyServerHalf))
}

// EncryptTLFCryptKeyClientHalf mocks base method
func (m *MockCrypto) EncryptTLFCryptKeyClientHalf(privateKey kbfscrypto.TLFEphemeralPrivateKey, publicKey kbfscrypto.CryptPublicKey, clientHalf kbfscrypto.TLFCryptKeyClientHalf) (EncryptedTLFCryptKeyClientHalf, error) {
	ret := m.ctrl.Call(m, "EncryptTLFCryptKeyClientHalf", privateKey, publicKey, clientHalf)
	ret0, _ := ret[0].(EncryptedTLFCryptKeyClientHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptTLFCryptKeyClientHalf indicates an expected call of EncryptTLFCryptKeyClientHalf
func (mr *MockCryptoMockRecorder) EncryptTLFCryptKeyClientHalf(privateKey, publicKey, clientHalf interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptTLFCryptKeyClientHalf", reflect.TypeOf((*MockCrypto)(nil).EncryptTLFCryptKeyClientHalf), privateKey, publicKey, clientHalf)
}

// EncryptPrivateMetadata mocks base method
func (m *MockCrypto) EncryptPrivateMetadata(pmd PrivateMetadata, key kbfscrypto.TLFCryptKey) (EncryptedPrivateMetadata, error) {
	ret := m.ctrl.Call(m, "EncryptPrivateMetadata", pmd, key)
	ret0, _ := ret[0].(EncryptedPrivateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptPrivateMetadata indicates an expected call of EncryptPrivateMetadata
func (mr *MockCryptoMockRecorder) EncryptPrivateMetadata(pmd, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptPrivateMetadata", reflect.TypeOf((*MockCrypto)(nil).EncryptPrivateMetadata), pmd, key)
}

// DecryptPrivateMetadata mocks base method
func (m *MockCrypto) DecryptPrivateMetadata(encryptedPMD EncryptedPrivateMetadata, key kbfscrypto.TLFCryptKey) (PrivateMetadata, error) {
	ret := m.ctrl.Call(m, "DecryptPrivateMetadata", encryptedPMD, key)
	ret0, _ := ret[0].(PrivateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptPrivateMetadata indicates an expected call of DecryptPrivateMetadata
func (mr *MockCryptoMockRecorder) DecryptPrivateMetadata(encryptedPMD, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptPrivateMetadata", reflect.TypeOf((*MockCrypto)(nil).DecryptPrivateMetadata), encryptedPMD, key)
}

// EncryptBlock mocks base method
func (m *MockCrypto) EncryptBlock(block Block, key kbfscrypto.BlockCryptKey) (int, EncryptedBlock, error) {
	ret := m.ctrl.Call(m, "EncryptBlock", block, key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(EncryptedBlock)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EncryptBlock indicates an expected call of EncryptBlock
func (mr *MockCryptoMockRecorder) EncryptBlock(block, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptBlock", reflect.TypeOf((*MockCrypto)(nil).EncryptBlock), block, key)
}

// DecryptBlock mocks base method
func (m *MockCrypto) DecryptBlock(encryptedBlock EncryptedBlock, key kbfscrypto.BlockCryptKey, block Block) error {
	ret := m.ctrl.Call(m, "DecryptBlock", encryptedBlock, key, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecryptBlock indicates an expected call of DecryptBlock
func (mr *MockCryptoMockRecorder) DecryptBlock(encryptedBlock, key, block interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptBlock", reflect.TypeOf((*MockCrypto)(nil).DecryptBlock), encryptedBlock, key, block)
}

// GetTLFCryptKeyServerHalfID mocks base method
func (m *MockCrypto) GetTLFCryptKeyServerHalfID(user keybase1.UID, devicePubKey kbfscrypto.CryptPublicKey, serverHalf kbfscrypto.TLFCryptKeyServerHalf) (TLFCryptKeyServerHalfID, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKeyServerHalfID", user, devicePubKey, serverHalf)
	ret0, _ := ret[0].(TLFCryptKeyServerHalfID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLFCryptKeyServerHalfID indicates an expected call of GetTLFCryptKeyServerHalfID
func (mr *MockCryptoMockRecorder) GetTLFCryptKeyServerHalfID(user, devicePubKey, serverHalf interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKeyServerHalfID", reflect.TypeOf((*MockCrypto)(nil).GetTLFCryptKeyServerHalfID), user, devicePubKey, serverHalf)
}

// VerifyTLFCryptKeyServerHalfID mocks base method
func (m *MockCrypto) VerifyTLFCryptKeyServerHalfID(serverHalfID TLFCryptKeyServerHalfID, user keybase1.UID, devicePubKey kbfscrypto.CryptPublicKey, serverHalf kbfscrypto.TLFCryptKeyServerHalf) error {
	ret := m.ctrl.Call(m, "VerifyTLFCryptKeyServerHalfID", serverHalfID, user, devicePubKey, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyTLFCryptKeyServerHalfID indicates an expected call of VerifyTLFCryptKeyServerHalfID
func (mr *MockCryptoMockRecorder) VerifyTLFCryptKeyServerHalfID(serverHalfID, user, devicePubKey, serverHalf interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTLFCryptKeyServerHalfID", reflect.TypeOf((*MockCrypto)(nil).VerifyTLFCryptKeyServerHalfID), serverHalfID, user, devicePubKey, serverHalf)
}

// EncryptMerkleLeaf mocks base method
func (m *MockCrypto) EncryptMerkleLeaf(leaf MerkleLeaf, pubKey kbfscrypto.TLFPublicKey, nonce *[24]byte, ePrivKey kbfscrypto.TLFEphemeralPrivateKey) (EncryptedMerkleLeaf, error) {
	ret := m.ctrl.Call(m, "EncryptMerkleLeaf", leaf, pubKey, nonce, ePrivKey)
	ret0, _ := ret[0].(EncryptedMerkleLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptMerkleLeaf indicates an expected call of EncryptMerkleLeaf
func (mr *MockCryptoMockRecorder) EncryptMerkleLeaf(leaf, pubKey, nonce, ePrivKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptMerkleLeaf", reflect.TypeOf((*MockCrypto)(nil).EncryptMerkleLeaf), leaf, pubKey, nonce, ePrivKey)
}

// DecryptMerkleLeaf mocks base method
func (m *MockCrypto) DecryptMerkleLeaf(encryptedLeaf EncryptedMerkleLeaf, privKey kbfscrypto.TLFPrivateKey, nonce *[24]byte, ePubKey kbfscrypto.TLFEphemeralPublicKey) (*MerkleLeaf, error) {
	ret := m.ctrl.Call(m, "DecryptMerkleLeaf", encryptedLeaf, privKey, nonce, ePubKey)
	ret0, _ := ret[0].(*MerkleLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptMerkleLeaf indicates an expected call of DecryptMerkleLeaf
func (mr *MockCryptoMockRecorder) DecryptMerkleLeaf(encryptedLeaf, privKey, nonce, ePubKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptMerkleLeaf", reflect.TypeOf((*MockCrypto)(nil).DecryptMerkleLeaf), encryptedLeaf, privKey, nonce, ePubKey)
}

// MakeTLFWriterKeyBundleID mocks base method
func (m *MockCrypto) MakeTLFWriterKeyBundleID(wkb TLFWriterKeyBundleV3) (TLFWriterKeyBundleID, error) {
	ret := m.ctrl.Call(m, "MakeTLFWriterKeyBundleID", wkb)
	ret0, _ := ret[0].(TLFWriterKeyBundleID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeTLFWriterKeyBundleID indicates an expected call of MakeTLFWriterKeyBundleID
func (mr *MockCryptoMockRecorder) MakeTLFWriterKeyBundleID(wkb interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeTLFWriterKeyBundleID", reflect.TypeOf((*MockCrypto)(nil).MakeTLFWriterKeyBundleID), wkb)
}

// MakeTLFReaderKeyBundleID mocks base method
func (m *MockCrypto) MakeTLFReaderKeyBundleID(rkb TLFReaderKeyBundleV3) (TLFReaderKeyBundleID, error) {
	ret := m.ctrl.Call(m, "MakeTLFReaderKeyBundleID", rkb)
	ret0, _ := ret[0].(TLFReaderKeyBundleID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeTLFReaderKeyBundleID indicates an expected call of MakeTLFReaderKeyBundleID
func (mr *MockCryptoMockRecorder) MakeTLFReaderKeyBundleID(rkb interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeTLFReaderKeyBundleID", reflect.TypeOf((*MockCrypto)(nil).MakeTLFReaderKeyBundleID), rkb)
}

// EncryptTLFCryptKeys mocks base method
func (m *MockCrypto) EncryptTLFCryptKeys(oldKeys []kbfscrypto.TLFCryptKey, key kbfscrypto.TLFCryptKey) (EncryptedTLFCryptKeys, error) {
	ret := m.ctrl.Call(m, "EncryptTLFCryptKeys", oldKeys, key)
	ret0, _ := ret[0].(EncryptedTLFCryptKeys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptTLFCryptKeys indicates an expected call of EncryptTLFCryptKeys
func (mr *MockCryptoMockRecorder) EncryptTLFCryptKeys(oldKeys, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptTLFCryptKeys", reflect.TypeOf((*MockCrypto)(nil).EncryptTLFCryptKeys), oldKeys, key)
}

// DecryptTLFCryptKeys mocks base method
func (m *MockCrypto) DecryptTLFCryptKeys(encKeys EncryptedTLFCryptKeys, key kbfscrypto.TLFCryptKey) ([]kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "DecryptTLFCryptKeys", encKeys, key)
	ret0, _ := ret[0].([]kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptTLFCryptKeys indicates an expected call of DecryptTLFCryptKeys
func (mr *MockCryptoMockRecorder) DecryptTLFCryptKeys(encKeys, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptTLFCryptKeys", reflect.TypeOf((*MockCrypto)(nil).DecryptTLFCryptKeys), encKeys, key)
}

// Sign mocks base method
func (m *MockCrypto) Sign(arg0 context.Context, arg1 []byte) (kbfscrypto.SignatureInfo, error) {
	ret := m.ctrl.Call(m, "Sign", arg0, arg1)
	ret0, _ := ret[0].(kbfscrypto.SignatureInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockCryptoMockRecorder) Sign(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockCrypto)(nil).Sign), arg0, arg1)
}

// SignForKBFS mocks base method
func (m *MockCrypto) SignForKBFS(arg0 context.Context, arg1 []byte) (kbfscrypto.SignatureInfo, error) {
	ret := m.ctrl.Call(m, "SignForKBFS", arg0, arg1)
	ret0, _ := ret[0].(kbfscrypto.SignatureInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignForKBFS indicates an expected call of SignForKBFS
func (mr *MockCryptoMockRecorder) SignForKBFS(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignForKBFS", reflect.TypeOf((*MockCrypto)(nil).SignForKBFS), arg0, arg1)
}

// SignToString mocks base method
func (m *MockCrypto) SignToString(arg0 context.Context, arg1 []byte) (string, error) {
	ret := m.ctrl.Call(m, "SignToString", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignToString indicates an expected call of SignToString
func (mr *MockCryptoMockRecorder) SignToString(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignToString", reflect.TypeOf((*MockCrypto)(nil).SignToString), arg0, arg1)
}

// DecryptTLFCryptKeyClientHalf mocks base method
func (m *MockCrypto) DecryptTLFCryptKeyClientHalf(ctx context.Context, publicKey kbfscrypto.TLFEphemeralPublicKey, encryptedClientHalf EncryptedTLFCryptKeyClientHalf) (kbfscrypto.TLFCryptKeyClientHalf, error) {
	ret := m.ctrl.Call(m, "DecryptTLFCryptKeyClientHalf", ctx, publicKey, encryptedClientHalf)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKeyClientHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptTLFCryptKeyClientHalf indicates an expected call of DecryptTLFCryptKeyClientHalf
func (mr *MockCryptoMockRecorder) DecryptTLFCryptKeyClientHalf(ctx, publicKey, encryptedClientHalf interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptTLFCryptKeyClientHalf", reflect.TypeOf((*MockCrypto)(nil).DecryptTLFCryptKeyClientHalf), ctx, publicKey, encryptedClientHalf)
}

// DecryptTLFCryptKeyClientHalfAny mocks base method
func (m *MockCrypto) DecryptTLFCryptKeyClientHalfAny(ctx context.Context, keys []EncryptedTLFCryptKeyClientAndEphemeral, promptPaper bool) (kbfscrypto.TLFCryptKeyClientHalf, int, error) {
	ret := m.ctrl.Call(m, "DecryptTLFCryptKeyClientHalfAny", ctx, keys, promptPaper)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKeyClientHalf)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DecryptTLFCryptKeyClientHalfAny indicates an expected call of DecryptTLFCryptKeyClientHalfAny
func (mr *MockCryptoMockRecorder) DecryptTLFCryptKeyClientHalfAny(ctx, keys, promptPaper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptTLFCryptKeyClientHalfAny", reflect.TypeOf((*MockCrypto)(nil).DecryptTLFCryptKeyClientHalfAny), ctx, keys, promptPaper)
}

// Shutdown mocks base method
func (m *MockCrypto) Shutdown() {
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockCryptoMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockCrypto)(nil).Shutdown))
}

// MockMDOps is a mock of MDOps interface
type MockMDOps struct {
	ctrl     *gomock.Controller
	recorder *MockMDOpsMockRecorder
}

// MockMDOpsMockRecorder is the mock recorder for MockMDOps
type MockMDOpsMockRecorder struct {
	mock *MockMDOps
}

// NewMockMDOps creates a new mock instance
func NewMockMDOps(ctrl *gomock.Controller) *MockMDOps {
	mock := &MockMDOps{ctrl: ctrl}
	mock.recorder = &MockMDOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMDOps) EXPECT() *MockMDOpsMockRecorder {
	return m.recorder
}

// GetForHandle mocks base method
func (m *MockMDOps) GetForHandle(ctx context.Context, handle *TlfHandle, mStatus MergeStatus) (tlf.ID, ImmutableRootMetadata, error) {
	ret := m.ctrl.Call(m, "GetForHandle", ctx, handle, mStatus)
	ret0, _ := ret[0].(tlf.ID)
	ret1, _ := ret[1].(ImmutableRootMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetForHandle indicates an expected call of GetForHandle
func (mr *MockMDOpsMockRecorder) GetForHandle(ctx, handle, mStatus interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForHandle", reflect.TypeOf((*MockMDOps)(nil).GetForHandle), ctx, handle, mStatus)
}

// GetForTLF mocks base method
func (m *MockMDOps) GetForTLF(ctx context.Context, id tlf.ID) (ImmutableRootMetadata, error) {
	ret := m.ctrl.Call(m, "GetForTLF", ctx, id)
	ret0, _ := ret[0].(ImmutableRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForTLF indicates an expected call of GetForTLF
func (mr *MockMDOpsMockRecorder) GetForTLF(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForTLF", reflect.TypeOf((*MockMDOps)(nil).GetForTLF), ctx, id)
}

// GetUnmergedForTLF mocks base method
func (m *MockMDOps) GetUnmergedForTLF(ctx context.Context, id tlf.ID, bid BranchID) (ImmutableRootMetadata, error) {
	ret := m.ctrl.Call(m, "GetUnmergedForTLF", ctx, id, bid)
	ret0, _ := ret[0].(ImmutableRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnmergedForTLF indicates an expected call of GetUnmergedForTLF
func (mr *MockMDOpsMockRecorder) GetUnmergedForTLF(ctx, id, bid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnmergedForTLF", reflect.TypeOf((*MockMDOps)(nil).GetUnmergedForTLF), ctx, id, bid)
}

// GetRange mocks base method
func (m *MockMDOps) GetRange(ctx context.Context, id tlf.ID, start, stop kbfsmd.Revision) ([]ImmutableRootMetadata, error) {
	ret := m.ctrl.Call(m, "GetRange", ctx, id, start, stop)
	ret0, _ := ret[0].([]ImmutableRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRange indicates an expected call of GetRange
func (mr *MockMDOpsMockRecorder) GetRange(ctx, id, start, stop interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRange", reflect.TypeOf((*MockMDOps)(nil).GetRange), ctx, id, start, stop)
}

// GetUnmergedRange mocks base method
func (m *MockMDOps) GetUnmergedRange(ctx context.Context, id tlf.ID, bid BranchID, start, stop kbfsmd.Revision) ([]ImmutableRootMetadata, error) {
	ret := m.ctrl.Call(m, "GetUnmergedRange", ctx, id, bid, start, stop)
	ret0, _ := ret[0].([]ImmutableRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnmergedRange indicates an expected call of GetUnmergedRange
func (mr *MockMDOpsMockRecorder) GetUnmergedRange(ctx, id, bid, start, stop interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnmergedRange", reflect.TypeOf((*MockMDOps)(nil).GetUnmergedRange), ctx, id, bid, start, stop)
}

// Put mocks base method
func (m *MockMDOps) Put(ctx context.Context, rmd *RootMetadata, verifyingKey kbfscrypto.VerifyingKey) (ImmutableRootMetadata, error) {
	ret := m.ctrl.Call(m, "Put", ctx, rmd, verifyingKey)
	ret0, _ := ret[0].(ImmutableRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (mr *MockMDOpsMockRecorder) Put(ctx, rmd, verifyingKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockMDOps)(nil).Put), ctx, rmd, verifyingKey)
}

// PutUnmerged mocks base method
func (m *MockMDOps) PutUnmerged(ctx context.Context, rmd *RootMetadata, verifyingKey kbfscrypto.VerifyingKey) (ImmutableRootMetadata, error) {
	ret := m.ctrl.Call(m, "PutUnmerged", ctx, rmd, verifyingKey)
	ret0, _ := ret[0].(ImmutableRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutUnmerged indicates an expected call of PutUnmerged
func (mr *MockMDOpsMockRecorder) PutUnmerged(ctx, rmd, verifyingKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutUnmerged", reflect.TypeOf((*MockMDOps)(nil).PutUnmerged), ctx, rmd, verifyingKey)
}

// PruneBranch mocks base method
func (m *MockMDOps) PruneBranch(ctx context.Context, id tlf.ID, bid BranchID) error {
	ret := m.ctrl.Call(m, "PruneBranch", ctx, id, bid)
	ret0, _ := ret[0].(error)
	return ret0
}

// PruneBranch indicates an expected call of PruneBranch
func (mr *MockMDOpsMockRecorder) PruneBranch(ctx, id, bid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneBranch", reflect.TypeOf((*MockMDOps)(nil).PruneBranch), ctx, id, bid)
}

// ResolveBranch mocks base method
func (m *MockMDOps) ResolveBranch(ctx context.Context, id tlf.ID, bid BranchID, blocksToDelete []kbfsblock.ID, rmd *RootMetadata, verifyingKey kbfscrypto.VerifyingKey) (ImmutableRootMetadata, error) {
	ret := m.ctrl.Call(m, "ResolveBranch", ctx, id, bid, blocksToDelete, rmd, verifyingKey)
	ret0, _ := ret[0].(ImmutableRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveBranch indicates an expected call of ResolveBranch
func (mr *MockMDOpsMockRecorder) ResolveBranch(ctx, id, bid, blocksToDelete, rmd, verifyingKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveBranch", reflect.TypeOf((*MockMDOps)(nil).ResolveBranch), ctx, id, bid, blocksToDelete, rmd, verifyingKey)
}

// GetLatestHandleForTLF mocks base method
func (m *MockMDOps) GetLatestHandleForTLF(ctx context.Context, id tlf.ID) (tlf.Handle, error) {
	ret := m.ctrl.Call(m, "GetLatestHandleForTLF", ctx, id)
	ret0, _ := ret[0].(tlf.Handle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestHandleForTLF indicates an expected call of GetLatestHandleForTLF
func (mr *MockMDOpsMockRecorder) GetLatestHandleForTLF(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestHandleForTLF", reflect.TypeOf((*MockMDOps)(nil).GetLatestHandleForTLF), ctx, id)
}

// MockKeyOps is a mock of KeyOps interface
type MockKeyOps struct {
	ctrl     *gomock.Controller
	recorder *MockKeyOpsMockRecorder
}

// MockKeyOpsMockRecorder is the mock recorder for MockKeyOps
type MockKeyOpsMockRecorder struct {
	mock *MockKeyOps
}

// NewMockKeyOps creates a new mock instance
func NewMockKeyOps(ctrl *gomock.Controller) *MockKeyOps {
	mock := &MockKeyOps{ctrl: ctrl}
	mock.recorder = &MockKeyOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyOps) EXPECT() *MockKeyOpsMockRecorder {
	return m.recorder
}

// GetTLFCryptKeyServerHalf mocks base method
func (m *MockKeyOps) GetTLFCryptKeyServerHalf(ctx context.Context, serverHalfID TLFCryptKeyServerHalfID, cryptPublicKey kbfscrypto.CryptPublicKey) (kbfscrypto.TLFCryptKeyServerHalf, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKeyServerHalf", ctx, serverHalfID, cryptPublicKey)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLFCryptKeyServerHalf indicates an expected call of GetTLFCryptKeyServerHalf
func (mr *MockKeyOpsMockRecorder) GetTLFCryptKeyServerHalf(ctx, serverHalfID, cryptPublicKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKeyServerHalf", reflect.TypeOf((*MockKeyOps)(nil).GetTLFCryptKeyServerHalf), ctx, serverHalfID, cryptPublicKey)
}

// PutTLFCryptKeyServerHalves mocks base method
func (m *MockKeyOps) PutTLFCryptKeyServerHalves(ctx context.Context, keyServerHalves UserDeviceKeyServerHalves) error {
	ret := m.ctrl.Call(m, "PutTLFCryptKeyServerHalves", ctx, keyServerHalves)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutTLFCryptKeyServerHalves indicates an expected call of PutTLFCryptKeyServerHalves
func (mr *MockKeyOpsMockRecorder) PutTLFCryptKeyServerHalves(ctx, keyServerHalves interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTLFCryptKeyServerHalves", reflect.TypeOf((*MockKeyOps)(nil).PutTLFCryptKeyServerHalves), ctx, keyServerHalves)
}

// DeleteTLFCryptKeyServerHalf mocks base method
func (m *MockKeyOps) DeleteTLFCryptKeyServerHalf(ctx context.Context, uid keybase1.UID, key kbfscrypto.CryptPublicKey, serverHalfID TLFCryptKeyServerHalfID) error {
	ret := m.ctrl.Call(m, "DeleteTLFCryptKeyServerHalf", ctx, uid, key, serverHalfID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTLFCryptKeyServerHalf indicates an expected call of DeleteTLFCryptKeyServerHalf
func (mr *MockKeyOpsMockRecorder) DeleteTLFCryptKeyServerHalf(ctx, uid, key, serverHalfID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTLFCryptKeyServerHalf", reflect.TypeOf((*MockKeyOps)(nil).DeleteTLFCryptKeyServerHalf), ctx, uid, key, serverHalfID)
}

// MockPrefetcher is a mock of Prefetcher interface
type MockPrefetcher struct {
	ctrl     *gomock.Controller
	recorder *MockPrefetcherMockRecorder
}

// MockPrefetcherMockRecorder is the mock recorder for MockPrefetcher
type MockPrefetcherMockRecorder struct {
	mock *MockPrefetcher
}

// NewMockPrefetcher creates a new mock instance
func NewMockPrefetcher(ctrl *gomock.Controller) *MockPrefetcher {
	mock := &MockPrefetcher{ctrl: ctrl}
	mock.recorder = &MockPrefetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrefetcher) EXPECT() *MockPrefetcherMockRecorder {
	return m.recorder
}

// PrefetchBlock mocks base method
func (m *MockPrefetcher) PrefetchBlock(block Block, blockPtr BlockPointer, kmd KeyMetadata, priority int) error {
	ret := m.ctrl.Call(m, "PrefetchBlock", block, blockPtr, kmd, priority)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrefetchBlock indicates an expected call of PrefetchBlock
func (mr *MockPrefetcherMockRecorder) PrefetchBlock(block, blockPtr, kmd, priority interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrefetchBlock", reflect.TypeOf((*MockPrefetcher)(nil).PrefetchBlock), block, blockPtr, kmd, priority)
}

// PrefetchAfterBlockRetrieved mocks base method
func (m *MockPrefetcher) PrefetchAfterBlockRetrieved(b Block, blockPtr BlockPointer, kmd KeyMetadata) <-chan struct{} {
	ret := m.ctrl.Call(m, "PrefetchAfterBlockRetrieved", b, blockPtr, kmd)
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// PrefetchAfterBlockRetrieved indicates an expected call of PrefetchAfterBlockRetrieved
func (mr *MockPrefetcherMockRecorder) PrefetchAfterBlockRetrieved(b, blockPtr, kmd interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrefetchAfterBlockRetrieved", reflect.TypeOf((*MockPrefetcher)(nil).PrefetchAfterBlockRetrieved), b, blockPtr, kmd)
}

// Shutdown mocks base method
func (m *MockPrefetcher) Shutdown() <-chan struct{} {
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockPrefetcherMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockPrefetcher)(nil).Shutdown))
}

// MockBlockOps is a mock of BlockOps interface
type MockBlockOps struct {
	ctrl     *gomock.Controller
	recorder *MockBlockOpsMockRecorder
}

// MockBlockOpsMockRecorder is the mock recorder for MockBlockOps
type MockBlockOpsMockRecorder struct {
	mock *MockBlockOps
}

// NewMockBlockOps creates a new mock instance
func NewMockBlockOps(ctrl *gomock.Controller) *MockBlockOps {
	mock := &MockBlockOps{ctrl: ctrl}
	mock.recorder = &MockBlockOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockOps) EXPECT() *MockBlockOpsMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockBlockOps) Get(ctx context.Context, kmd KeyMetadata, blockPtr BlockPointer, block Block, cacheLifetime BlockCacheLifetime) error {
	ret := m.ctrl.Call(m, "Get", ctx, kmd, blockPtr, block, cacheLifetime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockBlockOpsMockRecorder) Get(ctx, kmd, blockPtr, block, cacheLifetime interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBlockOps)(nil).Get), ctx, kmd, blockPtr, block, cacheLifetime)
}

// GetEncodedSize mocks base method
func (m *MockBlockOps) GetEncodedSize(ctx context.Context, kmd KeyMetadata, blockPtr BlockPointer) (uint32, error) {
	ret := m.ctrl.Call(m, "GetEncodedSize", ctx, kmd, blockPtr)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncodedSize indicates an expected call of GetEncodedSize
func (mr *MockBlockOpsMockRecorder) GetEncodedSize(ctx, kmd, blockPtr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncodedSize", reflect.TypeOf((*MockBlockOps)(nil).GetEncodedSize), ctx, kmd, blockPtr)
}

// Ready mocks base method
func (m *MockBlockOps) Ready(ctx context.Context, kmd KeyMetadata, block Block) (kbfsblock.ID, int, ReadyBlockData, error) {
	ret := m.ctrl.Call(m, "Ready", ctx, kmd, block)
	ret0, _ := ret[0].(kbfsblock.ID)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(ReadyBlockData)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Ready indicates an expected call of Ready
func (mr *MockBlockOpsMockRecorder) Ready(ctx, kmd, block interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockBlockOps)(nil).Ready), ctx, kmd, block)
}

// Delete mocks base method
func (m *MockBlockOps) Delete(ctx context.Context, tlfID tlf.ID, ptrs []BlockPointer) (map[kbfsblock.ID]int, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, tlfID, ptrs)
	ret0, _ := ret[0].(map[kbfsblock.ID]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockBlockOpsMockRecorder) Delete(ctx, tlfID, ptrs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBlockOps)(nil).Delete), ctx, tlfID, ptrs)
}

// Archive mocks base method
func (m *MockBlockOps) Archive(ctx context.Context, tlfID tlf.ID, ptrs []BlockPointer) error {
	ret := m.ctrl.Call(m, "Archive", ctx, tlfID, ptrs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Archive indicates an expected call of Archive
func (mr *MockBlockOpsMockRecorder) Archive(ctx, tlfID, ptrs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Archive", reflect.TypeOf((*MockBlockOps)(nil).Archive), ctx, tlfID, ptrs)
}

// TogglePrefetcher mocks base method
func (m *MockBlockOps) TogglePrefetcher(ctx context.Context, enable bool) error {
	ret := m.ctrl.Call(m, "TogglePrefetcher", ctx, enable)
	ret0, _ := ret[0].(error)
	return ret0
}

// TogglePrefetcher indicates an expected call of TogglePrefetcher
func (mr *MockBlockOpsMockRecorder) TogglePrefetcher(ctx, enable interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TogglePrefetcher", reflect.TypeOf((*MockBlockOps)(nil).TogglePrefetcher), ctx, enable)
}

// BlockRetriever mocks base method
func (m *MockBlockOps) BlockRetriever() BlockRetriever {
	ret := m.ctrl.Call(m, "BlockRetriever")
	ret0, _ := ret[0].(BlockRetriever)
	return ret0
}

// BlockRetriever indicates an expected call of BlockRetriever
func (mr *MockBlockOpsMockRecorder) BlockRetriever() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockRetriever", reflect.TypeOf((*MockBlockOps)(nil).BlockRetriever))
}

// Prefetcher mocks base method
func (m *MockBlockOps) Prefetcher() Prefetcher {
	ret := m.ctrl.Call(m, "Prefetcher")
	ret0, _ := ret[0].(Prefetcher)
	return ret0
}

// Prefetcher indicates an expected call of Prefetcher
func (mr *MockBlockOpsMockRecorder) Prefetcher() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prefetcher", reflect.TypeOf((*MockBlockOps)(nil).Prefetcher))
}

// Shutdown mocks base method
func (m *MockBlockOps) Shutdown() {
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockBlockOpsMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockBlockOps)(nil).Shutdown))
}

// MockauthTokenRefreshHandler is a mock of authTokenRefreshHandler interface
type MockauthTokenRefreshHandler struct {
	ctrl     *gomock.Controller
	recorder *MockauthTokenRefreshHandlerMockRecorder
}

// MockauthTokenRefreshHandlerMockRecorder is the mock recorder for MockauthTokenRefreshHandler
type MockauthTokenRefreshHandlerMockRecorder struct {
	mock *MockauthTokenRefreshHandler
}

// NewMockauthTokenRefreshHandler creates a new mock instance
func NewMockauthTokenRefreshHandler(ctrl *gomock.Controller) *MockauthTokenRefreshHandler {
	mock := &MockauthTokenRefreshHandler{ctrl: ctrl}
	mock.recorder = &MockauthTokenRefreshHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockauthTokenRefreshHandler) EXPECT() *MockauthTokenRefreshHandlerMockRecorder {
	return m.recorder
}

// RefreshAuthToken mocks base method
func (m *MockauthTokenRefreshHandler) RefreshAuthToken(arg0 context.Context) {
	m.ctrl.Call(m, "RefreshAuthToken", arg0)
}

// RefreshAuthToken indicates an expected call of RefreshAuthToken
func (mr *MockauthTokenRefreshHandlerMockRecorder) RefreshAuthToken(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAuthToken", reflect.TypeOf((*MockauthTokenRefreshHandler)(nil).RefreshAuthToken), arg0)
}

// MockMDServer is a mock of MDServer interface
type MockMDServer struct {
	ctrl     *gomock.Controller
	recorder *MockMDServerMockRecorder
}

// MockMDServerMockRecorder is the mock recorder for MockMDServer
type MockMDServerMockRecorder struct {
	mock *MockMDServer
}

// NewMockMDServer creates a new mock instance
func NewMockMDServer(ctrl *gomock.Controller) *MockMDServer {
	mock := &MockMDServer{ctrl: ctrl}
	mock.recorder = &MockMDServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMDServer) EXPECT() *MockMDServerMockRecorder {
	return m.recorder
}

// RefreshAuthToken mocks base method
func (m *MockMDServer) RefreshAuthToken(arg0 context.Context) {
	m.ctrl.Call(m, "RefreshAuthToken", arg0)
}

// RefreshAuthToken indicates an expected call of RefreshAuthToken
func (mr *MockMDServerMockRecorder) RefreshAuthToken(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAuthToken", reflect.TypeOf((*MockMDServer)(nil).RefreshAuthToken), arg0)
}

// GetForHandle mocks base method
func (m *MockMDServer) GetForHandle(ctx context.Context, handle tlf.Handle, mStatus MergeStatus) (tlf.ID, *RootMetadataSigned, error) {
	ret := m.ctrl.Call(m, "GetForHandle", ctx, handle, mStatus)
	ret0, _ := ret[0].(tlf.ID)
	ret1, _ := ret[1].(*RootMetadataSigned)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetForHandle indicates an expected call of GetForHandle
func (mr *MockMDServerMockRecorder) GetForHandle(ctx, handle, mStatus interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForHandle", reflect.TypeOf((*MockMDServer)(nil).GetForHandle), ctx, handle, mStatus)
}

// GetForTLF mocks base method
func (m *MockMDServer) GetForTLF(ctx context.Context, id tlf.ID, bid BranchID, mStatus MergeStatus) (*RootMetadataSigned, error) {
	ret := m.ctrl.Call(m, "GetForTLF", ctx, id, bid, mStatus)
	ret0, _ := ret[0].(*RootMetadataSigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForTLF indicates an expected call of GetForTLF
func (mr *MockMDServerMockRecorder) GetForTLF(ctx, id, bid, mStatus interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForTLF", reflect.TypeOf((*MockMDServer)(nil).GetForTLF), ctx, id, bid, mStatus)
}

// GetRange mocks base method
func (m *MockMDServer) GetRange(ctx context.Context, id tlf.ID, bid BranchID, mStatus MergeStatus, start, stop kbfsmd.Revision) ([]*RootMetadataSigned, error) {
	ret := m.ctrl.Call(m, "GetRange", ctx, id, bid, mStatus, start, stop)
	ret0, _ := ret[0].([]*RootMetadataSigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRange indicates an expected call of GetRange
func (mr *MockMDServerMockRecorder) GetRange(ctx, id, bid, mStatus, start, stop interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRange", reflect.TypeOf((*MockMDServer)(nil).GetRange), ctx, id, bid, mStatus, start, stop)
}

// Put mocks base method
func (m *MockMDServer) Put(ctx context.Context, rmds *RootMetadataSigned, extra ExtraMetadata) error {
	ret := m.ctrl.Call(m, "Put", ctx, rmds, extra)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockMDServerMockRecorder) Put(ctx, rmds, extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockMDServer)(nil).Put), ctx, rmds, extra)
}

// PruneBranch mocks base method
func (m *MockMDServer) PruneBranch(ctx context.Context, id tlf.ID, bid BranchID) error {
	ret := m.ctrl.Call(m, "PruneBranch", ctx, id, bid)
	ret0, _ := ret[0].(error)
	return ret0
}

// PruneBranch indicates an expected call of PruneBranch
func (mr *MockMDServerMockRecorder) PruneBranch(ctx, id, bid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneBranch", reflect.TypeOf((*MockMDServer)(nil).PruneBranch), ctx, id, bid)
}

// RegisterForUpdate mocks base method
func (m *MockMDServer) RegisterForUpdate(ctx context.Context, id tlf.ID, currHead kbfsmd.Revision) (<-chan error, error) {
	ret := m.ctrl.Call(m, "RegisterForUpdate", ctx, id, currHead)
	ret0, _ := ret[0].(<-chan error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterForUpdate indicates an expected call of RegisterForUpdate
func (mr *MockMDServerMockRecorder) RegisterForUpdate(ctx, id, currHead interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterForUpdate", reflect.TypeOf((*MockMDServer)(nil).RegisterForUpdate), ctx, id, currHead)
}

// CancelRegistration mocks base method
func (m *MockMDServer) CancelRegistration(ctx context.Context, id tlf.ID) {
	m.ctrl.Call(m, "CancelRegistration", ctx, id)
}

// CancelRegistration indicates an expected call of CancelRegistration
func (mr *MockMDServerMockRecorder) CancelRegistration(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRegistration", reflect.TypeOf((*MockMDServer)(nil).CancelRegistration), ctx, id)
}

// CheckForRekeys mocks base method
func (m *MockMDServer) CheckForRekeys(ctx context.Context) <-chan error {
	ret := m.ctrl.Call(m, "CheckForRekeys", ctx)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// CheckForRekeys indicates an expected call of CheckForRekeys
func (mr *MockMDServerMockRecorder) CheckForRekeys(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForRekeys", reflect.TypeOf((*MockMDServer)(nil).CheckForRekeys), ctx)
}

// TruncateLock mocks base method
func (m *MockMDServer) TruncateLock(ctx context.Context, id tlf.ID) (bool, error) {
	ret := m.ctrl.Call(m, "TruncateLock", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TruncateLock indicates an expected call of TruncateLock
func (mr *MockMDServerMockRecorder) TruncateLock(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TruncateLock", reflect.TypeOf((*MockMDServer)(nil).TruncateLock), ctx, id)
}

// TruncateUnlock mocks base method
func (m *MockMDServer) TruncateUnlock(ctx context.Context, id tlf.ID) (bool, error) {
	ret := m.ctrl.Call(m, "TruncateUnlock", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TruncateUnlock indicates an expected call of TruncateUnlock
func (mr *MockMDServerMockRecorder) TruncateUnlock(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TruncateUnlock", reflect.TypeOf((*MockMDServer)(nil).TruncateUnlock), ctx, id)
}

// DisableRekeyUpdatesForTesting mocks base method
func (m *MockMDServer) DisableRekeyUpdatesForTesting() {
	m.ctrl.Call(m, "DisableRekeyUpdatesForTesting")
}

// DisableRekeyUpdatesForTesting indicates an expected call of DisableRekeyUpdatesForTesting
func (mr *MockMDServerMockRecorder) DisableRekeyUpdatesForTesting() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRekeyUpdatesForTesting", reflect.TypeOf((*MockMDServer)(nil).DisableRekeyUpdatesForTesting))
}

// Shutdown mocks base method
func (m *MockMDServer) Shutdown() {
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockMDServerMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockMDServer)(nil).Shutdown))
}

// IsConnected mocks base method
func (m *MockMDServer) IsConnected() bool {
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected
func (mr *MockMDServerMockRecorder) IsConnected() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockMDServer)(nil).IsConnected))
}

// GetLatestHandleForTLF mocks base method
func (m *MockMDServer) GetLatestHandleForTLF(ctx context.Context, id tlf.ID) (tlf.Handle, error) {
	ret := m.ctrl.Call(m, "GetLatestHandleForTLF", ctx, id)
	ret0, _ := ret[0].(tlf.Handle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestHandleForTLF indicates an expected call of GetLatestHandleForTLF
func (mr *MockMDServerMockRecorder) GetLatestHandleForTLF(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestHandleForTLF", reflect.TypeOf((*MockMDServer)(nil).GetLatestHandleForTLF), ctx, id)
}

// OffsetFromServerTime mocks base method
func (m *MockMDServer) OffsetFromServerTime() (time.Duration, bool) {
	ret := m.ctrl.Call(m, "OffsetFromServerTime")
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// OffsetFromServerTime indicates an expected call of OffsetFromServerTime
func (mr *MockMDServerMockRecorder) OffsetFromServerTime() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OffsetFromServerTime", reflect.TypeOf((*MockMDServer)(nil).OffsetFromServerTime))
}

// GetKeyBundles mocks base method
func (m *MockMDServer) GetKeyBundles(ctx context.Context, tlfID tlf.ID, wkbID TLFWriterKeyBundleID, rkbID TLFReaderKeyBundleID) (*TLFWriterKeyBundleV3, *TLFReaderKeyBundleV3, error) {
	ret := m.ctrl.Call(m, "GetKeyBundles", ctx, tlfID, wkbID, rkbID)
	ret0, _ := ret[0].(*TLFWriterKeyBundleV3)
	ret1, _ := ret[1].(*TLFReaderKeyBundleV3)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetKeyBundles indicates an expected call of GetKeyBundles
func (mr *MockMDServerMockRecorder) GetKeyBundles(ctx, tlfID, wkbID, rkbID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyBundles", reflect.TypeOf((*MockMDServer)(nil).GetKeyBundles), ctx, tlfID, wkbID, rkbID)
}

// CheckReachability mocks base method
func (m *MockMDServer) CheckReachability(ctx context.Context) {
	m.ctrl.Call(m, "CheckReachability", ctx)
}

// CheckReachability indicates an expected call of CheckReachability
func (mr *MockMDServerMockRecorder) CheckReachability(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckReachability", reflect.TypeOf((*MockMDServer)(nil).CheckReachability), ctx)
}

// FastForwardBackoff mocks base method
func (m *MockMDServer) FastForwardBackoff() {
	m.ctrl.Call(m, "FastForwardBackoff")
}

// FastForwardBackoff indicates an expected call of FastForwardBackoff
func (mr *MockMDServerMockRecorder) FastForwardBackoff() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FastForwardBackoff", reflect.TypeOf((*MockMDServer)(nil).FastForwardBackoff))
}

// MockmdServerLocal is a mock of mdServerLocal interface
type MockmdServerLocal struct {
	ctrl     *gomock.Controller
	recorder *MockmdServerLocalMockRecorder
}

// MockmdServerLocalMockRecorder is the mock recorder for MockmdServerLocal
type MockmdServerLocalMockRecorder struct {
	mock *MockmdServerLocal
}

// NewMockmdServerLocal creates a new mock instance
func NewMockmdServerLocal(ctrl *gomock.Controller) *MockmdServerLocal {
	mock := &MockmdServerLocal{ctrl: ctrl}
	mock.recorder = &MockmdServerLocalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmdServerLocal) EXPECT() *MockmdServerLocalMockRecorder {
	return m.recorder
}

// RefreshAuthToken mocks base method
func (m *MockmdServerLocal) RefreshAuthToken(arg0 context.Context) {
	m.ctrl.Call(m, "RefreshAuthToken", arg0)
}

// RefreshAuthToken indicates an expected call of RefreshAuthToken
func (mr *MockmdServerLocalMockRecorder) RefreshAuthToken(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAuthToken", reflect.TypeOf((*MockmdServerLocal)(nil).RefreshAuthToken), arg0)
}

// GetForHandle mocks base method
func (m *MockmdServerLocal) GetForHandle(ctx context.Context, handle tlf.Handle, mStatus MergeStatus) (tlf.ID, *RootMetadataSigned, error) {
	ret := m.ctrl.Call(m, "GetForHandle", ctx, handle, mStatus)
	ret0, _ := ret[0].(tlf.ID)
	ret1, _ := ret[1].(*RootMetadataSigned)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetForHandle indicates an expected call of GetForHandle
func (mr *MockmdServerLocalMockRecorder) GetForHandle(ctx, handle, mStatus interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForHandle", reflect.TypeOf((*MockmdServerLocal)(nil).GetForHandle), ctx, handle, mStatus)
}

// GetForTLF mocks base method
func (m *MockmdServerLocal) GetForTLF(ctx context.Context, id tlf.ID, bid BranchID, mStatus MergeStatus) (*RootMetadataSigned, error) {
	ret := m.ctrl.Call(m, "GetForTLF", ctx, id, bid, mStatus)
	ret0, _ := ret[0].(*RootMetadataSigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForTLF indicates an expected call of GetForTLF
func (mr *MockmdServerLocalMockRecorder) GetForTLF(ctx, id, bid, mStatus interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForTLF", reflect.TypeOf((*MockmdServerLocal)(nil).GetForTLF), ctx, id, bid, mStatus)
}

// GetRange mocks base method
func (m *MockmdServerLocal) GetRange(ctx context.Context, id tlf.ID, bid BranchID, mStatus MergeStatus, start, stop kbfsmd.Revision) ([]*RootMetadataSigned, error) {
	ret := m.ctrl.Call(m, "GetRange", ctx, id, bid, mStatus, start, stop)
	ret0, _ := ret[0].([]*RootMetadataSigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRange indicates an expected call of GetRange
func (mr *MockmdServerLocalMockRecorder) GetRange(ctx, id, bid, mStatus, start, stop interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRange", reflect.TypeOf((*MockmdServerLocal)(nil).GetRange), ctx, id, bid, mStatus, start, stop)
}

// Put mocks base method
func (m *MockmdServerLocal) Put(ctx context.Context, rmds *RootMetadataSigned, extra ExtraMetadata) error {
	ret := m.ctrl.Call(m, "Put", ctx, rmds, extra)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockmdServerLocalMockRecorder) Put(ctx, rmds, extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockmdServerLocal)(nil).Put), ctx, rmds, extra)
}

// PruneBranch mocks base method
func (m *MockmdServerLocal) PruneBranch(ctx context.Context, id tlf.ID, bid BranchID) error {
	ret := m.ctrl.Call(m, "PruneBranch", ctx, id, bid)
	ret0, _ := ret[0].(error)
	return ret0
}

// PruneBranch indicates an expected call of PruneBranch
func (mr *MockmdServerLocalMockRecorder) PruneBranch(ctx, id, bid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneBranch", reflect.TypeOf((*MockmdServerLocal)(nil).PruneBranch), ctx, id, bid)
}

// RegisterForUpdate mocks base method
func (m *MockmdServerLocal) RegisterForUpdate(ctx context.Context, id tlf.ID, currHead kbfsmd.Revision) (<-chan error, error) {
	ret := m.ctrl.Call(m, "RegisterForUpdate", ctx, id, currHead)
	ret0, _ := ret[0].(<-chan error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterForUpdate indicates an expected call of RegisterForUpdate
func (mr *MockmdServerLocalMockRecorder) RegisterForUpdate(ctx, id, currHead interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterForUpdate", reflect.TypeOf((*MockmdServerLocal)(nil).RegisterForUpdate), ctx, id, currHead)
}

// CancelRegistration mocks base method
func (m *MockmdServerLocal) CancelRegistration(ctx context.Context, id tlf.ID) {
	m.ctrl.Call(m, "CancelRegistration", ctx, id)
}

// CancelRegistration indicates an expected call of CancelRegistration
func (mr *MockmdServerLocalMockRecorder) CancelRegistration(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRegistration", reflect.TypeOf((*MockmdServerLocal)(nil).CancelRegistration), ctx, id)
}

// CheckForRekeys mocks base method
func (m *MockmdServerLocal) CheckForRekeys(ctx context.Context) <-chan error {
	ret := m.ctrl.Call(m, "CheckForRekeys", ctx)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// CheckForRekeys indicates an expected call of CheckForRekeys
func (mr *MockmdServerLocalMockRecorder) CheckForRekeys(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForRekeys", reflect.TypeOf((*MockmdServerLocal)(nil).CheckForRekeys), ctx)
}

// TruncateLock mocks base method
func (m *MockmdServerLocal) TruncateLock(ctx context.Context, id tlf.ID) (bool, error) {
	ret := m.ctrl.Call(m, "TruncateLock", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TruncateLock indicates an expected call of TruncateLock
func (mr *MockmdServerLocalMockRecorder) TruncateLock(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TruncateLock", reflect.TypeOf((*MockmdServerLocal)(nil).TruncateLock), ctx, id)
}

// TruncateUnlock mocks base method
func (m *MockmdServerLocal) TruncateUnlock(ctx context.Context, id tlf.ID) (bool, error) {
	ret := m.ctrl.Call(m, "TruncateUnlock", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TruncateUnlock indicates an expected call of TruncateUnlock
func (mr *MockmdServerLocalMockRecorder) TruncateUnlock(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TruncateUnlock", reflect.TypeOf((*MockmdServerLocal)(nil).TruncateUnlock), ctx, id)
}

// DisableRekeyUpdatesForTesting mocks base method
func (m *MockmdServerLocal) DisableRekeyUpdatesForTesting() {
	m.ctrl.Call(m, "DisableRekeyUpdatesForTesting")
}

// DisableRekeyUpdatesForTesting indicates an expected call of DisableRekeyUpdatesForTesting
func (mr *MockmdServerLocalMockRecorder) DisableRekeyUpdatesForTesting() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRekeyUpdatesForTesting", reflect.TypeOf((*MockmdServerLocal)(nil).DisableRekeyUpdatesForTesting))
}

// Shutdown mocks base method
func (m *MockmdServerLocal) Shutdown() {
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockmdServerLocalMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockmdServerLocal)(nil).Shutdown))
}

// IsConnected mocks base method
func (m *MockmdServerLocal) IsConnected() bool {
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected
func (mr *MockmdServerLocalMockRecorder) IsConnected() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockmdServerLocal)(nil).IsConnected))
}

// GetLatestHandleForTLF mocks base method
func (m *MockmdServerLocal) GetLatestHandleForTLF(ctx context.Context, id tlf.ID) (tlf.Handle, error) {
	ret := m.ctrl.Call(m, "GetLatestHandleForTLF", ctx, id)
	ret0, _ := ret[0].(tlf.Handle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestHandleForTLF indicates an expected call of GetLatestHandleForTLF
func (mr *MockmdServerLocalMockRecorder) GetLatestHandleForTLF(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestHandleForTLF", reflect.TypeOf((*MockmdServerLocal)(nil).GetLatestHandleForTLF), ctx, id)
}

// OffsetFromServerTime mocks base method
func (m *MockmdServerLocal) OffsetFromServerTime() (time.Duration, bool) {
	ret := m.ctrl.Call(m, "OffsetFromServerTime")
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// OffsetFromServerTime indicates an expected call of OffsetFromServerTime
func (mr *MockmdServerLocalMockRecorder) OffsetFromServerTime() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OffsetFromServerTime", reflect.TypeOf((*MockmdServerLocal)(nil).OffsetFromServerTime))
}

// GetKeyBundles mocks base method
func (m *MockmdServerLocal) GetKeyBundles(ctx context.Context, tlfID tlf.ID, wkbID TLFWriterKeyBundleID, rkbID TLFReaderKeyBundleID) (*TLFWriterKeyBundleV3, *TLFReaderKeyBundleV3, error) {
	ret := m.ctrl.Call(m, "GetKeyBundles", ctx, tlfID, wkbID, rkbID)
	ret0, _ := ret[0].(*TLFWriterKeyBundleV3)
	ret1, _ := ret[1].(*TLFReaderKeyBundleV3)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetKeyBundles indicates an expected call of GetKeyBundles
func (mr *MockmdServerLocalMockRecorder) GetKeyBundles(ctx, tlfID, wkbID, rkbID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyBundles", reflect.TypeOf((*MockmdServerLocal)(nil).GetKeyBundles), ctx, tlfID, wkbID, rkbID)
}

// CheckReachability mocks base method
func (m *MockmdServerLocal) CheckReachability(ctx context.Context) {
	m.ctrl.Call(m, "CheckReachability", ctx)
}

// CheckReachability indicates an expected call of CheckReachability
func (mr *MockmdServerLocalMockRecorder) CheckReachability(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckReachability", reflect.TypeOf((*MockmdServerLocal)(nil).CheckReachability), ctx)
}

// FastForwardBackoff mocks base method
func (m *MockmdServerLocal) FastForwardBackoff() {
	m.ctrl.Call(m, "FastForwardBackoff")
}

// FastForwardBackoff indicates an expected call of FastForwardBackoff
func (mr *MockmdServerLocalMockRecorder) FastForwardBackoff() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FastForwardBackoff", reflect.TypeOf((*MockmdServerLocal)(nil).FastForwardBackoff))
}

// addNewAssertionForTest mocks base method
func (m *MockmdServerLocal) addNewAssertionForTest(uid keybase1.UID, newAssertion keybase1.SocialAssertion) error {
	ret := m.ctrl.Call(m, "addNewAssertionForTest", uid, newAssertion)
	ret0, _ := ret[0].(error)
	return ret0
}

// addNewAssertionForTest indicates an expected call of addNewAssertionForTest
func (mr *MockmdServerLocalMockRecorder) addNewAssertionForTest(uid, newAssertion interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addNewAssertionForTest", reflect.TypeOf((*MockmdServerLocal)(nil).addNewAssertionForTest), uid, newAssertion)
}

// getCurrentMergedHeadRevision mocks base method
func (m *MockmdServerLocal) getCurrentMergedHeadRevision(ctx context.Context, id tlf.ID) (kbfsmd.Revision, error) {
	ret := m.ctrl.Call(m, "getCurrentMergedHeadRevision", ctx, id)
	ret0, _ := ret[0].(kbfsmd.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getCurrentMergedHeadRevision indicates an expected call of getCurrentMergedHeadRevision
func (mr *MockmdServerLocalMockRecorder) getCurrentMergedHeadRevision(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCurrentMergedHeadRevision", reflect.TypeOf((*MockmdServerLocal)(nil).getCurrentMergedHeadRevision), ctx, id)
}

// isShutdown mocks base method
func (m *MockmdServerLocal) isShutdown() bool {
	ret := m.ctrl.Call(m, "isShutdown")
	ret0, _ := ret[0].(bool)
	return ret0
}

// isShutdown indicates an expected call of isShutdown
func (mr *MockmdServerLocalMockRecorder) isShutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isShutdown", reflect.TypeOf((*MockmdServerLocal)(nil).isShutdown))
}

// copy mocks base method
func (m *MockmdServerLocal) copy(config mdServerLocalConfig) mdServerLocal {
	ret := m.ctrl.Call(m, "copy", config)
	ret0, _ := ret[0].(mdServerLocal)
	return ret0
}

// copy indicates an expected call of copy
func (mr *MockmdServerLocalMockRecorder) copy(config interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "copy", reflect.TypeOf((*MockmdServerLocal)(nil).copy), config)
}

// MockBlockServer is a mock of BlockServer interface
type MockBlockServer struct {
	ctrl     *gomock.Controller
	recorder *MockBlockServerMockRecorder
}

// MockBlockServerMockRecorder is the mock recorder for MockBlockServer
type MockBlockServerMockRecorder struct {
	mock *MockBlockServer
}

// NewMockBlockServer creates a new mock instance
func NewMockBlockServer(ctrl *gomock.Controller) *MockBlockServer {
	mock := &MockBlockServer{ctrl: ctrl}
	mock.recorder = &MockBlockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockServer) EXPECT() *MockBlockServerMockRecorder {
	return m.recorder
}

// RefreshAuthToken mocks base method
func (m *MockBlockServer) RefreshAuthToken(arg0 context.Context) {
	m.ctrl.Call(m, "RefreshAuthToken", arg0)
}

// RefreshAuthToken indicates an expected call of RefreshAuthToken
func (mr *MockBlockServerMockRecorder) RefreshAuthToken(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAuthToken", reflect.TypeOf((*MockBlockServer)(nil).RefreshAuthToken), arg0)
}

// Get mocks base method
func (m *MockBlockServer) Get(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID, context kbfsblock.Context) ([]byte, kbfscrypto.BlockCryptKeyServerHalf, error) {
	ret := m.ctrl.Call(m, "Get", ctx, tlfID, id, context)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(kbfscrypto.BlockCryptKeyServerHalf)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get
func (mr *MockBlockServerMockRecorder) Get(ctx, tlfID, id, context interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBlockServer)(nil).Get), ctx, tlfID, id, context)
}

// Put mocks base method
func (m *MockBlockServer) Put(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID, context kbfsblock.Context, buf []byte, serverHalf kbfscrypto.BlockCryptKeyServerHalf) error {
	ret := m.ctrl.Call(m, "Put", ctx, tlfID, id, context, buf, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockBlockServerMockRecorder) Put(ctx, tlfID, id, context, buf, serverHalf interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockBlockServer)(nil).Put), ctx, tlfID, id, context, buf, serverHalf)
}

// PutAgain mocks base method
func (m *MockBlockServer) PutAgain(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID, context kbfsblock.Context, buf []byte, serverHalf kbfscrypto.BlockCryptKeyServerHalf) error {
	ret := m.ctrl.Call(m, "PutAgain", ctx, tlfID, id, context, buf, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutAgain indicates an expected call of PutAgain
func (mr *MockBlockServerMockRecorder) PutAgain(ctx, tlfID, id, context, buf, serverHalf interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAgain", reflect.TypeOf((*MockBlockServer)(nil).PutAgain), ctx, tlfID, id, context, buf, serverHalf)
}

// AddBlockReference mocks base method
func (m *MockBlockServer) AddBlockReference(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID, context kbfsblock.Context) error {
	ret := m.ctrl.Call(m, "AddBlockReference", ctx, tlfID, id, context)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBlockReference indicates an expected call of AddBlockReference
func (mr *MockBlockServerMockRecorder) AddBlockReference(ctx, tlfID, id, context interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlockReference", reflect.TypeOf((*MockBlockServer)(nil).AddBlockReference), ctx, tlfID, id, context)
}

// RemoveBlockReferences mocks base method
func (m *MockBlockServer) RemoveBlockReferences(ctx context.Context, tlfID tlf.ID, contexts kbfsblock.ContextMap) (map[kbfsblock.ID]int, error) {
	ret := m.ctrl.Call(m, "RemoveBlockReferences", ctx, tlfID, contexts)
	ret0, _ := ret[0].(map[kbfsblock.ID]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBlockReferences indicates an expected call of RemoveBlockReferences
func (mr *MockBlockServerMockRecorder) RemoveBlockReferences(ctx, tlfID, contexts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBlockReferences", reflect.TypeOf((*MockBlockServer)(nil).RemoveBlockReferences), ctx, tlfID, contexts)
}

// ArchiveBlockReferences mocks base method
func (m *MockBlockServer) ArchiveBlockReferences(ctx context.Context, tlfID tlf.ID, contexts kbfsblock.ContextMap) error {
	ret := m.ctrl.Call(m, "ArchiveBlockReferences", ctx, tlfID, contexts)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveBlockReferences indicates an expected call of ArchiveBlockReferences
func (mr *MockBlockServerMockRecorder) ArchiveBlockReferences(ctx, tlfID, contexts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveBlockReferences", reflect.TypeOf((*MockBlockServer)(nil).ArchiveBlockReferences), ctx, tlfID, contexts)
}

// IsUnflushed mocks base method
func (m *MockBlockServer) IsUnflushed(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID) (bool, error) {
	ret := m.ctrl.Call(m, "IsUnflushed", ctx, tlfID, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUnflushed indicates an expected call of IsUnflushed
func (mr *MockBlockServerMockRecorder) IsUnflushed(ctx, tlfID, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUnflushed", reflect.TypeOf((*MockBlockServer)(nil).IsUnflushed), ctx, tlfID, id)
}

// Shutdown mocks base method
func (m *MockBlockServer) Shutdown(ctx context.Context) {
	m.ctrl.Call(m, "Shutdown", ctx)
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockBlockServerMockRecorder) Shutdown(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockBlockServer)(nil).Shutdown), ctx)
}

// GetUserQuotaInfo mocks base method
func (m *MockBlockServer) GetUserQuotaInfo(ctx context.Context) (*kbfsblock.QuotaInfo, error) {
	ret := m.ctrl.Call(m, "GetUserQuotaInfo", ctx)
	ret0, _ := ret[0].(*kbfsblock.QuotaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserQuotaInfo indicates an expected call of GetUserQuotaInfo
func (mr *MockBlockServerMockRecorder) GetUserQuotaInfo(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserQuotaInfo", reflect.TypeOf((*MockBlockServer)(nil).GetUserQuotaInfo), ctx)
}

// GetTeamQuotaInfo mocks base method
func (m *MockBlockServer) GetTeamQuotaInfo(ctx context.Context, tid keybase1.TeamID) (*kbfsblock.QuotaInfo, error) {
	ret := m.ctrl.Call(m, "GetTeamQuotaInfo", ctx, tid)
	ret0, _ := ret[0].(*kbfsblock.QuotaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamQuotaInfo indicates an expected call of GetTeamQuotaInfo
func (mr *MockBlockServerMockRecorder) GetTeamQuotaInfo(ctx, tid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamQuotaInfo", reflect.TypeOf((*MockBlockServer)(nil).GetTeamQuotaInfo), ctx, tid)
}

// MockblockServerLocal is a mock of blockServerLocal interface
type MockblockServerLocal struct {
	ctrl     *gomock.Controller
	recorder *MockblockServerLocalMockRecorder
}

// MockblockServerLocalMockRecorder is the mock recorder for MockblockServerLocal
type MockblockServerLocalMockRecorder struct {
	mock *MockblockServerLocal
}

// NewMockblockServerLocal creates a new mock instance
func NewMockblockServerLocal(ctrl *gomock.Controller) *MockblockServerLocal {
	mock := &MockblockServerLocal{ctrl: ctrl}
	mock.recorder = &MockblockServerLocalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockblockServerLocal) EXPECT() *MockblockServerLocalMockRecorder {
	return m.recorder
}

// RefreshAuthToken mocks base method
func (m *MockblockServerLocal) RefreshAuthToken(arg0 context.Context) {
	m.ctrl.Call(m, "RefreshAuthToken", arg0)
}

// RefreshAuthToken indicates an expected call of RefreshAuthToken
func (mr *MockblockServerLocalMockRecorder) RefreshAuthToken(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAuthToken", reflect.TypeOf((*MockblockServerLocal)(nil).RefreshAuthToken), arg0)
}

// Get mocks base method
func (m *MockblockServerLocal) Get(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID, context kbfsblock.Context) ([]byte, kbfscrypto.BlockCryptKeyServerHalf, error) {
	ret := m.ctrl.Call(m, "Get", ctx, tlfID, id, context)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(kbfscrypto.BlockCryptKeyServerHalf)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get
func (mr *MockblockServerLocalMockRecorder) Get(ctx, tlfID, id, context interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockblockServerLocal)(nil).Get), ctx, tlfID, id, context)
}

// Put mocks base method
func (m *MockblockServerLocal) Put(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID, context kbfsblock.Context, buf []byte, serverHalf kbfscrypto.BlockCryptKeyServerHalf) error {
	ret := m.ctrl.Call(m, "Put", ctx, tlfID, id, context, buf, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockblockServerLocalMockRecorder) Put(ctx, tlfID, id, context, buf, serverHalf interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockblockServerLocal)(nil).Put), ctx, tlfID, id, context, buf, serverHalf)
}

// PutAgain mocks base method
func (m *MockblockServerLocal) PutAgain(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID, context kbfsblock.Context, buf []byte, serverHalf kbfscrypto.BlockCryptKeyServerHalf) error {
	ret := m.ctrl.Call(m, "PutAgain", ctx, tlfID, id, context, buf, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutAgain indicates an expected call of PutAgain
func (mr *MockblockServerLocalMockRecorder) PutAgain(ctx, tlfID, id, context, buf, serverHalf interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAgain", reflect.TypeOf((*MockblockServerLocal)(nil).PutAgain), ctx, tlfID, id, context, buf, serverHalf)
}

// AddBlockReference mocks base method
func (m *MockblockServerLocal) AddBlockReference(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID, context kbfsblock.Context) error {
	ret := m.ctrl.Call(m, "AddBlockReference", ctx, tlfID, id, context)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBlockReference indicates an expected call of AddBlockReference
func (mr *MockblockServerLocalMockRecorder) AddBlockReference(ctx, tlfID, id, context interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlockReference", reflect.TypeOf((*MockblockServerLocal)(nil).AddBlockReference), ctx, tlfID, id, context)
}

// RemoveBlockReferences mocks base method
func (m *MockblockServerLocal) RemoveBlockReferences(ctx context.Context, tlfID tlf.ID, contexts kbfsblock.ContextMap) (map[kbfsblock.ID]int, error) {
	ret := m.ctrl.Call(m, "RemoveBlockReferences", ctx, tlfID, contexts)
	ret0, _ := ret[0].(map[kbfsblock.ID]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBlockReferences indicates an expected call of RemoveBlockReferences
func (mr *MockblockServerLocalMockRecorder) RemoveBlockReferences(ctx, tlfID, contexts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBlockReferences", reflect.TypeOf((*MockblockServerLocal)(nil).RemoveBlockReferences), ctx, tlfID, contexts)
}

// ArchiveBlockReferences mocks base method
func (m *MockblockServerLocal) ArchiveBlockReferences(ctx context.Context, tlfID tlf.ID, contexts kbfsblock.ContextMap) error {
	ret := m.ctrl.Call(m, "ArchiveBlockReferences", ctx, tlfID, contexts)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveBlockReferences indicates an expected call of ArchiveBlockReferences
func (mr *MockblockServerLocalMockRecorder) ArchiveBlockReferences(ctx, tlfID, contexts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveBlockReferences", reflect.TypeOf((*MockblockServerLocal)(nil).ArchiveBlockReferences), ctx, tlfID, contexts)
}

// IsUnflushed mocks base method
func (m *MockblockServerLocal) IsUnflushed(ctx context.Context, tlfID tlf.ID, id kbfsblock.ID) (bool, error) {
	ret := m.ctrl.Call(m, "IsUnflushed", ctx, tlfID, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUnflushed indicates an expected call of IsUnflushed
func (mr *MockblockServerLocalMockRecorder) IsUnflushed(ctx, tlfID, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUnflushed", reflect.TypeOf((*MockblockServerLocal)(nil).IsUnflushed), ctx, tlfID, id)
}

// Shutdown mocks base method
func (m *MockblockServerLocal) Shutdown(ctx context.Context) {
	m.ctrl.Call(m, "Shutdown", ctx)
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockblockServerLocalMockRecorder) Shutdown(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockblockServerLocal)(nil).Shutdown), ctx)
}

// GetUserQuotaInfo mocks base method
func (m *MockblockServerLocal) GetUserQuotaInfo(ctx context.Context) (*kbfsblock.QuotaInfo, error) {
	ret := m.ctrl.Call(m, "GetUserQuotaInfo", ctx)
	ret0, _ := ret[0].(*kbfsblock.QuotaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserQuotaInfo indicates an expected call of GetUserQuotaInfo
func (mr *MockblockServerLocalMockRecorder) GetUserQuotaInfo(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserQuotaInfo", reflect.TypeOf((*MockblockServerLocal)(nil).GetUserQuotaInfo), ctx)
}

// GetTeamQuotaInfo mocks base method
func (m *MockblockServerLocal) GetTeamQuotaInfo(ctx context.Context, tid keybase1.TeamID) (*kbfsblock.QuotaInfo, error) {
	ret := m.ctrl.Call(m, "GetTeamQuotaInfo", ctx, tid)
	ret0, _ := ret[0].(*kbfsblock.QuotaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamQuotaInfo indicates an expected call of GetTeamQuotaInfo
func (mr *MockblockServerLocalMockRecorder) GetTeamQuotaInfo(ctx, tid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamQuotaInfo", reflect.TypeOf((*MockblockServerLocal)(nil).GetTeamQuotaInfo), ctx, tid)
}

// getAllRefsForTest mocks base method
func (m *MockblockServerLocal) getAllRefsForTest(ctx context.Context, tlfID tlf.ID) (map[kbfsblock.ID]blockRefMap, error) {
	ret := m.ctrl.Call(m, "getAllRefsForTest", ctx, tlfID)
	ret0, _ := ret[0].(map[kbfsblock.ID]blockRefMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getAllRefsForTest indicates an expected call of getAllRefsForTest
func (mr *MockblockServerLocalMockRecorder) getAllRefsForTest(ctx, tlfID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAllRefsForTest", reflect.TypeOf((*MockblockServerLocal)(nil).getAllRefsForTest), ctx, tlfID)
}

// MockBlockSplitter is a mock of BlockSplitter interface
type MockBlockSplitter struct {
	ctrl     *gomock.Controller
	recorder *MockBlockSplitterMockRecorder
}

// MockBlockSplitterMockRecorder is the mock recorder for MockBlockSplitter
type MockBlockSplitterMockRecorder struct {
	mock *MockBlockSplitter
}

// NewMockBlockSplitter creates a new mock instance
func NewMockBlockSplitter(ctrl *gomock.Controller) *MockBlockSplitter {
	mock := &MockBlockSplitter{ctrl: ctrl}
	mock.recorder = &MockBlockSplitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockSplitter) EXPECT() *MockBlockSplitterMockRecorder {
	return m.recorder
}

// CopyUntilSplit mocks base method
func (m *MockBlockSplitter) CopyUntilSplit(block *FileBlock, lastBlock bool, data []byte, off int64) int64 {
	ret := m.ctrl.Call(m, "CopyUntilSplit", block, lastBlock, data, off)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CopyUntilSplit indicates an expected call of CopyUntilSplit
func (mr *MockBlockSplitterMockRecorder) CopyUntilSplit(block, lastBlock, data, off interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyUntilSplit", reflect.TypeOf((*MockBlockSplitter)(nil).CopyUntilSplit), block, lastBlock, data, off)
}

// CheckSplit mocks base method
func (m *MockBlockSplitter) CheckSplit(block *FileBlock) int64 {
	ret := m.ctrl.Call(m, "CheckSplit", block)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CheckSplit indicates an expected call of CheckSplit
func (mr *MockBlockSplitterMockRecorder) CheckSplit(block interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSplit", reflect.TypeOf((*MockBlockSplitter)(nil).CheckSplit), block)
}

// MaxPtrsPerBlock mocks base method
func (m *MockBlockSplitter) MaxPtrsPerBlock() int {
	ret := m.ctrl.Call(m, "MaxPtrsPerBlock")
	ret0, _ := ret[0].(int)
	return ret0
}

// MaxPtrsPerBlock indicates an expected call of MaxPtrsPerBlock
func (mr *MockBlockSplitterMockRecorder) MaxPtrsPerBlock() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxPtrsPerBlock", reflect.TypeOf((*MockBlockSplitter)(nil).MaxPtrsPerBlock))
}

// ShouldEmbedBlockChanges mocks base method
func (m *MockBlockSplitter) ShouldEmbedBlockChanges(bc *BlockChanges) bool {
	ret := m.ctrl.Call(m, "ShouldEmbedBlockChanges", bc)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldEmbedBlockChanges indicates an expected call of ShouldEmbedBlockChanges
func (mr *MockBlockSplitterMockRecorder) ShouldEmbedBlockChanges(bc interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldEmbedBlockChanges", reflect.TypeOf((*MockBlockSplitter)(nil).ShouldEmbedBlockChanges), bc)
}

// MockKeyServer is a mock of KeyServer interface
type MockKeyServer struct {
	ctrl     *gomock.Controller
	recorder *MockKeyServerMockRecorder
}

// MockKeyServerMockRecorder is the mock recorder for MockKeyServer
type MockKeyServerMockRecorder struct {
	mock *MockKeyServer
}

// NewMockKeyServer creates a new mock instance
func NewMockKeyServer(ctrl *gomock.Controller) *MockKeyServer {
	mock := &MockKeyServer{ctrl: ctrl}
	mock.recorder = &MockKeyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyServer) EXPECT() *MockKeyServerMockRecorder {
	return m.recorder
}

// GetTLFCryptKeyServerHalf mocks base method
func (m *MockKeyServer) GetTLFCryptKeyServerHalf(ctx context.Context, serverHalfID TLFCryptKeyServerHalfID, cryptPublicKey kbfscrypto.CryptPublicKey) (kbfscrypto.TLFCryptKeyServerHalf, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKeyServerHalf", ctx, serverHalfID, cryptPublicKey)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLFCryptKeyServerHalf indicates an expected call of GetTLFCryptKeyServerHalf
func (mr *MockKeyServerMockRecorder) GetTLFCryptKeyServerHalf(ctx, serverHalfID, cryptPublicKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKeyServerHalf", reflect.TypeOf((*MockKeyServer)(nil).GetTLFCryptKeyServerHalf), ctx, serverHalfID, cryptPublicKey)
}

// PutTLFCryptKeyServerHalves mocks base method
func (m *MockKeyServer) PutTLFCryptKeyServerHalves(ctx context.Context, keyServerHalves UserDeviceKeyServerHalves) error {
	ret := m.ctrl.Call(m, "PutTLFCryptKeyServerHalves", ctx, keyServerHalves)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutTLFCryptKeyServerHalves indicates an expected call of PutTLFCryptKeyServerHalves
func (mr *MockKeyServerMockRecorder) PutTLFCryptKeyServerHalves(ctx, keyServerHalves interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTLFCryptKeyServerHalves", reflect.TypeOf((*MockKeyServer)(nil).PutTLFCryptKeyServerHalves), ctx, keyServerHalves)
}

// DeleteTLFCryptKeyServerHalf mocks base method
func (m *MockKeyServer) DeleteTLFCryptKeyServerHalf(ctx context.Context, uid keybase1.UID, key kbfscrypto.CryptPublicKey, serverHalfID TLFCryptKeyServerHalfID) error {
	ret := m.ctrl.Call(m, "DeleteTLFCryptKeyServerHalf", ctx, uid, key, serverHalfID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTLFCryptKeyServerHalf indicates an expected call of DeleteTLFCryptKeyServerHalf
func (mr *MockKeyServerMockRecorder) DeleteTLFCryptKeyServerHalf(ctx, uid, key, serverHalfID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTLFCryptKeyServerHalf", reflect.TypeOf((*MockKeyServer)(nil).DeleteTLFCryptKeyServerHalf), ctx, uid, key, serverHalfID)
}

// Shutdown mocks base method
func (m *MockKeyServer) Shutdown() {
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockKeyServerMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockKeyServer)(nil).Shutdown))
}

// MockObserver is a mock of Observer interface
type MockObserver struct {
	ctrl     *gomock.Controller
	recorder *MockObserverMockRecorder
}

// MockObserverMockRecorder is the mock recorder for MockObserver
type MockObserverMockRecorder struct {
	mock *MockObserver
}

// NewMockObserver creates a new mock instance
func NewMockObserver(ctrl *gomock.Controller) *MockObserver {
	mock := &MockObserver{ctrl: ctrl}
	mock.recorder = &MockObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockObserver) EXPECT() *MockObserverMockRecorder {
	return m.recorder
}

// LocalChange mocks base method
func (m *MockObserver) LocalChange(ctx context.Context, node Node, write WriteRange) {
	m.ctrl.Call(m, "LocalChange", ctx, node, write)
}

// LocalChange indicates an expected call of LocalChange
func (mr *MockObserverMockRecorder) LocalChange(ctx, node, write interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalChange", reflect.TypeOf((*MockObserver)(nil).LocalChange), ctx, node, write)
}

// BatchChanges mocks base method
func (m *MockObserver) BatchChanges(ctx context.Context, changes []NodeChange) {
	m.ctrl.Call(m, "BatchChanges", ctx, changes)
}

// BatchChanges indicates an expected call of BatchChanges
func (mr *MockObserverMockRecorder) BatchChanges(ctx, changes interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchChanges", reflect.TypeOf((*MockObserver)(nil).BatchChanges), ctx, changes)
}

// TlfHandleChange mocks base method
func (m *MockObserver) TlfHandleChange(ctx context.Context, newHandle *TlfHandle) {
	m.ctrl.Call(m, "TlfHandleChange", ctx, newHandle)
}

// TlfHandleChange indicates an expected call of TlfHandleChange
func (mr *MockObserverMockRecorder) TlfHandleChange(ctx, newHandle interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlfHandleChange", reflect.TypeOf((*MockObserver)(nil).TlfHandleChange), ctx, newHandle)
}

// MockNotifier is a mock of Notifier interface
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// RegisterForChanges mocks base method
func (m *MockNotifier) RegisterForChanges(folderBranches []FolderBranch, obs Observer) error {
	ret := m.ctrl.Call(m, "RegisterForChanges", folderBranches, obs)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterForChanges indicates an expected call of RegisterForChanges
func (mr *MockNotifierMockRecorder) RegisterForChanges(folderBranches, obs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterForChanges", reflect.TypeOf((*MockNotifier)(nil).RegisterForChanges), folderBranches, obs)
}

// UnregisterFromChanges mocks base method
func (m *MockNotifier) UnregisterFromChanges(folderBranches []FolderBranch, obs Observer) error {
	ret := m.ctrl.Call(m, "UnregisterFromChanges", folderBranches, obs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterFromChanges indicates an expected call of UnregisterFromChanges
func (mr *MockNotifierMockRecorder) UnregisterFromChanges(folderBranches, obs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterFromChanges", reflect.TypeOf((*MockNotifier)(nil).UnregisterFromChanges), folderBranches, obs)
}

// MockClock is a mock of Clock interface
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *MockClockMockRecorder
}

// MockClockMockRecorder is the mock recorder for MockClock
type MockClockMockRecorder struct {
	mock *MockClock
}

// NewMockClock creates a new mock instance
func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &MockClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClock) EXPECT() *MockClockMockRecorder {
	return m.recorder
}

// Now mocks base method
func (m *MockClock) Now() time.Time {
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now
func (mr *MockClockMockRecorder) Now() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockClock)(nil).Now))
}

// MockConflictRenamer is a mock of ConflictRenamer interface
type MockConflictRenamer struct {
	ctrl     *gomock.Controller
	recorder *MockConflictRenamerMockRecorder
}

// MockConflictRenamerMockRecorder is the mock recorder for MockConflictRenamer
type MockConflictRenamerMockRecorder struct {
	mock *MockConflictRenamer
}

// NewMockConflictRenamer creates a new mock instance
func NewMockConflictRenamer(ctrl *gomock.Controller) *MockConflictRenamer {
	mock := &MockConflictRenamer{ctrl: ctrl}
	mock.recorder = &MockConflictRenamerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConflictRenamer) EXPECT() *MockConflictRenamerMockRecorder {
	return m.recorder
}

// ConflictRename mocks base method
func (m *MockConflictRenamer) ConflictRename(ctx context.Context, op op, original string) (string, error) {
	ret := m.ctrl.Call(m, "ConflictRename", ctx, op, original)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConflictRename indicates an expected call of ConflictRename
func (mr *MockConflictRenamerMockRecorder) ConflictRename(ctx, op, original interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConflictRename", reflect.TypeOf((*MockConflictRenamer)(nil).ConflictRename), ctx, op, original)
}

// MockTracer is a mock of Tracer interface
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
}

// MockTracerMockRecorder is the mock recorder for MockTracer
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// MaybeStartTrace mocks base method
func (m *MockTracer) MaybeStartTrace(ctx context.Context, family, title string) context.Context {
	ret := m.ctrl.Call(m, "MaybeStartTrace", ctx, family, title)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// MaybeStartTrace indicates an expected call of MaybeStartTrace
func (mr *MockTracerMockRecorder) MaybeStartTrace(ctx, family, title interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaybeStartTrace", reflect.TypeOf((*MockTracer)(nil).MaybeStartTrace), ctx, family, title)
}

// MaybeFinishTrace mocks base method
func (m *MockTracer) MaybeFinishTrace(ctx context.Context, err error) {
	m.ctrl.Call(m, "MaybeFinishTrace", ctx, err)
}

// MaybeFinishTrace indicates an expected call of MaybeFinishTrace
func (mr *MockTracerMockRecorder) MaybeFinishTrace(ctx, err interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaybeFinishTrace", reflect.TypeOf((*MockTracer)(nil).MaybeFinishTrace), ctx, err)
}

// MockConfig is a mock of Config interface
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// DataVersion mocks base method
func (m *MockConfig) DataVersion() DataVer {
	ret := m.ctrl.Call(m, "DataVersion")
	ret0, _ := ret[0].(DataVer)
	return ret0
}

// DataVersion indicates an expected call of DataVersion
func (mr *MockConfigMockRecorder) DataVersion() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataVersion", reflect.TypeOf((*MockConfig)(nil).DataVersion))
}

// MakeLogger mocks base method
func (m *MockConfig) MakeLogger(module string) logger.Logger {
	ret := m.ctrl.Call(m, "MakeLogger", module)
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

// MakeLogger indicates an expected call of MakeLogger
func (mr *MockConfigMockRecorder) MakeLogger(module interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeLogger", reflect.TypeOf((*MockConfig)(nil).MakeLogger), module)
}

// BlockCache mocks base method
func (m *MockConfig) BlockCache() BlockCache {
	ret := m.ctrl.Call(m, "BlockCache")
	ret0, _ := ret[0].(BlockCache)
	return ret0
}

// BlockCache indicates an expected call of BlockCache
func (mr *MockConfigMockRecorder) BlockCache() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockCache", reflect.TypeOf((*MockConfig)(nil).BlockCache))
}

// BlockServer mocks base method
func (m *MockConfig) BlockServer() BlockServer {
	ret := m.ctrl.Call(m, "BlockServer")
	ret0, _ := ret[0].(BlockServer)
	return ret0
}

// BlockServer indicates an expected call of BlockServer
func (mr *MockConfigMockRecorder) BlockServer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockServer", reflect.TypeOf((*MockConfig)(nil).BlockServer))
}

// Codec mocks base method
func (m *MockConfig) Codec() kbfscodec.Codec {
	ret := m.ctrl.Call(m, "Codec")
	ret0, _ := ret[0].(kbfscodec.Codec)
	return ret0
}

// Codec indicates an expected call of Codec
func (mr *MockConfigMockRecorder) Codec() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Codec", reflect.TypeOf((*MockConfig)(nil).Codec))
}

// cryptoPure mocks base method
func (m *MockConfig) cryptoPure() cryptoPure {
	ret := m.ctrl.Call(m, "cryptoPure")
	ret0, _ := ret[0].(cryptoPure)
	return ret0
}

// cryptoPure indicates an expected call of cryptoPure
func (mr *MockConfigMockRecorder) cryptoPure() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cryptoPure", reflect.TypeOf((*MockConfig)(nil).cryptoPure))
}

// keyGetter mocks base method
func (m *MockConfig) keyGetter() blockKeyGetter {
	ret := m.ctrl.Call(m, "keyGetter")
	ret0, _ := ret[0].(blockKeyGetter)
	return ret0
}

// keyGetter indicates an expected call of keyGetter
func (mr *MockConfigMockRecorder) keyGetter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "keyGetter", reflect.TypeOf((*MockConfig)(nil).keyGetter))
}

// Crypto mocks base method
func (m *MockConfig) Crypto() Crypto {
	ret := m.ctrl.Call(m, "Crypto")
	ret0, _ := ret[0].(Crypto)
	return ret0
}

// Crypto indicates an expected call of Crypto
func (mr *MockConfigMockRecorder) Crypto() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Crypto", reflect.TypeOf((*MockConfig)(nil).Crypto))
}

// Signer mocks base method
func (m *MockConfig) Signer() kbfscrypto.Signer {
	ret := m.ctrl.Call(m, "Signer")
	ret0, _ := ret[0].(kbfscrypto.Signer)
	return ret0
}

// Signer indicates an expected call of Signer
func (mr *MockConfigMockRecorder) Signer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signer", reflect.TypeOf((*MockConfig)(nil).Signer))
}

// CurrentSessionGetter mocks base method
func (m *MockConfig) CurrentSessionGetter() CurrentSessionGetter {
	ret := m.ctrl.Call(m, "CurrentSessionGetter")
	ret0, _ := ret[0].(CurrentSessionGetter)
	return ret0
}

// CurrentSessionGetter indicates an expected call of CurrentSessionGetter
func (mr *MockConfigMockRecorder) CurrentSessionGetter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentSessionGetter", reflect.TypeOf((*MockConfig)(nil).CurrentSessionGetter))
}

// DiskBlockCache mocks base method
func (m *MockConfig) DiskBlockCache() DiskBlockCache {
	ret := m.ctrl.Call(m, "DiskBlockCache")
	ret0, _ := ret[0].(DiskBlockCache)
	return ret0
}

// DiskBlockCache indicates an expected call of DiskBlockCache
func (mr *MockConfigMockRecorder) DiskBlockCache() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskBlockCache", reflect.TypeOf((*MockConfig)(nil).DiskBlockCache))
}

// MakeDiskBlockCacheIfNotExists mocks base method
func (m *MockConfig) MakeDiskBlockCacheIfNotExists() error {
	ret := m.ctrl.Call(m, "MakeDiskBlockCacheIfNotExists")
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeDiskBlockCacheIfNotExists indicates an expected call of MakeDiskBlockCacheIfNotExists
func (mr *MockConfigMockRecorder) MakeDiskBlockCacheIfNotExists() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDiskBlockCacheIfNotExists", reflect.TypeOf((*MockConfig)(nil).MakeDiskBlockCacheIfNotExists))
}

// Clock mocks base method
func (m *MockConfig) Clock() Clock {
	ret := m.ctrl.Call(m, "Clock")
	ret0, _ := ret[0].(Clock)
	return ret0
}

// Clock indicates an expected call of Clock
func (mr *MockConfigMockRecorder) Clock() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clock", reflect.TypeOf((*MockConfig)(nil).Clock))
}

// DiskLimiter mocks base method
func (m *MockConfig) DiskLimiter() DiskLimiter {
	ret := m.ctrl.Call(m, "DiskLimiter")
	ret0, _ := ret[0].(DiskLimiter)
	return ret0
}

// DiskLimiter indicates an expected call of DiskLimiter
func (mr *MockConfigMockRecorder) DiskLimiter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskLimiter", reflect.TypeOf((*MockConfig)(nil).DiskLimiter))
}

// IsSyncedTlf mocks base method
func (m *MockConfig) IsSyncedTlf(tlfID tlf.ID) bool {
	ret := m.ctrl.Call(m, "IsSyncedTlf", tlfID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSyncedTlf indicates an expected call of IsSyncedTlf
func (mr *MockConfigMockRecorder) IsSyncedTlf(tlfID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSyncedTlf", reflect.TypeOf((*MockConfig)(nil).IsSyncedTlf), tlfID)
}

// SetTlfSyncState mocks base method
func (m *MockConfig) SetTlfSyncState(tlfID tlf.ID, isSynced bool) error {
	ret := m.ctrl.Call(m, "SetTlfSyncState", tlfID, isSynced)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTlfSyncState indicates an expected call of SetTlfSyncState
func (mr *MockConfigMockRecorder) SetTlfSyncState(tlfID, isSynced interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTlfSyncState", reflect.TypeOf((*MockConfig)(nil).SetTlfSyncState), tlfID, isSynced)
}

// MaybeStartTrace mocks base method
func (m *MockConfig) MaybeStartTrace(ctx context.Context, family, title string) context.Context {
	ret := m.ctrl.Call(m, "MaybeStartTrace", ctx, family, title)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// MaybeStartTrace indicates an expected call of MaybeStartTrace
func (mr *MockConfigMockRecorder) MaybeStartTrace(ctx, family, title interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaybeStartTrace", reflect.TypeOf((*MockConfig)(nil).MaybeStartTrace), ctx, family, title)
}

// MaybeFinishTrace mocks base method
func (m *MockConfig) MaybeFinishTrace(ctx context.Context, err error) {
	m.ctrl.Call(m, "MaybeFinishTrace", ctx, err)
}

// MaybeFinishTrace indicates an expected call of MaybeFinishTrace
func (mr *MockConfigMockRecorder) MaybeFinishTrace(ctx, err interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaybeFinishTrace", reflect.TypeOf((*MockConfig)(nil).MaybeFinishTrace), ctx, err)
}

// KBFSOps mocks base method
func (m *MockConfig) KBFSOps() KBFSOps {
	ret := m.ctrl.Call(m, "KBFSOps")
	ret0, _ := ret[0].(KBFSOps)
	return ret0
}

// KBFSOps indicates an expected call of KBFSOps
func (mr *MockConfigMockRecorder) KBFSOps() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KBFSOps", reflect.TypeOf((*MockConfig)(nil).KBFSOps))
}

// SetKBFSOps mocks base method
func (m *MockConfig) SetKBFSOps(arg0 KBFSOps) {
	m.ctrl.Call(m, "SetKBFSOps", arg0)
}

// SetKBFSOps indicates an expected call of SetKBFSOps
func (mr *MockConfigMockRecorder) SetKBFSOps(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKBFSOps", reflect.TypeOf((*MockConfig)(nil).SetKBFSOps), arg0)
}

// KBPKI mocks base method
func (m *MockConfig) KBPKI() KBPKI {
	ret := m.ctrl.Call(m, "KBPKI")
	ret0, _ := ret[0].(KBPKI)
	return ret0
}

// KBPKI indicates an expected call of KBPKI
func (mr *MockConfigMockRecorder) KBPKI() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KBPKI", reflect.TypeOf((*MockConfig)(nil).KBPKI))
}

// SetKBPKI mocks base method
func (m *MockConfig) SetKBPKI(arg0 KBPKI) {
	m.ctrl.Call(m, "SetKBPKI", arg0)
}

// SetKBPKI indicates an expected call of SetKBPKI
func (mr *MockConfigMockRecorder) SetKBPKI(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKBPKI", reflect.TypeOf((*MockConfig)(nil).SetKBPKI), arg0)
}

// KeyManager mocks base method
func (m *MockConfig) KeyManager() KeyManager {
	ret := m.ctrl.Call(m, "KeyManager")
	ret0, _ := ret[0].(KeyManager)
	return ret0
}

// KeyManager indicates an expected call of KeyManager
func (mr *MockConfigMockRecorder) KeyManager() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyManager", reflect.TypeOf((*MockConfig)(nil).KeyManager))
}

// SetKeyManager mocks base method
func (m *MockConfig) SetKeyManager(arg0 KeyManager) {
	m.ctrl.Call(m, "SetKeyManager", arg0)
}

// SetKeyManager indicates an expected call of SetKeyManager
func (mr *MockConfigMockRecorder) SetKeyManager(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeyManager", reflect.TypeOf((*MockConfig)(nil).SetKeyManager), arg0)
}

// Reporter mocks base method
func (m *MockConfig) Reporter() Reporter {
	ret := m.ctrl.Call(m, "Reporter")
	ret0, _ := ret[0].(Reporter)
	return ret0
}

// Reporter indicates an expected call of Reporter
func (mr *MockConfigMockRecorder) Reporter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reporter", reflect.TypeOf((*MockConfig)(nil).Reporter))
}

// SetReporter mocks base method
func (m *MockConfig) SetReporter(arg0 Reporter) {
	m.ctrl.Call(m, "SetReporter", arg0)
}

// SetReporter indicates an expected call of SetReporter
func (mr *MockConfigMockRecorder) SetReporter(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReporter", reflect.TypeOf((*MockConfig)(nil).SetReporter), arg0)
}

// MDCache mocks base method
func (m *MockConfig) MDCache() MDCache {
	ret := m.ctrl.Call(m, "MDCache")
	ret0, _ := ret[0].(MDCache)
	return ret0
}

// MDCache indicates an expected call of MDCache
func (mr *MockConfigMockRecorder) MDCache() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDCache", reflect.TypeOf((*MockConfig)(nil).MDCache))
}

// SetMDCache mocks base method
func (m *MockConfig) SetMDCache(arg0 MDCache) {
	m.ctrl.Call(m, "SetMDCache", arg0)
}

// SetMDCache indicates an expected call of SetMDCache
func (mr *MockConfigMockRecorder) SetMDCache(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMDCache", reflect.TypeOf((*MockConfig)(nil).SetMDCache), arg0)
}

// KeyCache mocks base method
func (m *MockConfig) KeyCache() KeyCache {
	ret := m.ctrl.Call(m, "KeyCache")
	ret0, _ := ret[0].(KeyCache)
	return ret0
}

// KeyCache indicates an expected call of KeyCache
func (mr *MockConfigMockRecorder) KeyCache() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyCache", reflect.TypeOf((*MockConfig)(nil).KeyCache))
}

// SetKeyBundleCache mocks base method
func (m *MockConfig) SetKeyBundleCache(arg0 KeyBundleCache) {
	m.ctrl.Call(m, "SetKeyBundleCache", arg0)
}

// SetKeyBundleCache indicates an expected call of SetKeyBundleCache
func (mr *MockConfigMockRecorder) SetKeyBundleCache(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeyBundleCache", reflect.TypeOf((*MockConfig)(nil).SetKeyBundleCache), arg0)
}

// KeyBundleCache mocks base method
func (m *MockConfig) KeyBundleCache() KeyBundleCache {
	ret := m.ctrl.Call(m, "KeyBundleCache")
	ret0, _ := ret[0].(KeyBundleCache)
	return ret0
}

// KeyBundleCache indicates an expected call of KeyBundleCache
func (mr *MockConfigMockRecorder) KeyBundleCache() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyBundleCache", reflect.TypeOf((*MockConfig)(nil).KeyBundleCache))
}

// SetKeyCache mocks base method
func (m *MockConfig) SetKeyCache(arg0 KeyCache) {
	m.ctrl.Call(m, "SetKeyCache", arg0)
}

// SetKeyCache indicates an expected call of SetKeyCache
func (mr *MockConfigMockRecorder) SetKeyCache(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeyCache", reflect.TypeOf((*MockConfig)(nil).SetKeyCache), arg0)
}

// SetBlockCache mocks base method
func (m *MockConfig) SetBlockCache(arg0 BlockCache) {
	m.ctrl.Call(m, "SetBlockCache", arg0)
}

// SetBlockCache indicates an expected call of SetBlockCache
func (mr *MockConfigMockRecorder) SetBlockCache(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlockCache", reflect.TypeOf((*MockConfig)(nil).SetBlockCache), arg0)
}

// DirtyBlockCache mocks base method
func (m *MockConfig) DirtyBlockCache() DirtyBlockCache {
	ret := m.ctrl.Call(m, "DirtyBlockCache")
	ret0, _ := ret[0].(DirtyBlockCache)
	return ret0
}

// DirtyBlockCache indicates an expected call of DirtyBlockCache
func (mr *MockConfigMockRecorder) DirtyBlockCache() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirtyBlockCache", reflect.TypeOf((*MockConfig)(nil).DirtyBlockCache))
}

// SetDirtyBlockCache mocks base method
func (m *MockConfig) SetDirtyBlockCache(arg0 DirtyBlockCache) {
	m.ctrl.Call(m, "SetDirtyBlockCache", arg0)
}

// SetDirtyBlockCache indicates an expected call of SetDirtyBlockCache
func (mr *MockConfigMockRecorder) SetDirtyBlockCache(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDirtyBlockCache", reflect.TypeOf((*MockConfig)(nil).SetDirtyBlockCache), arg0)
}

// SetCrypto mocks base method
func (m *MockConfig) SetCrypto(arg0 Crypto) {
	m.ctrl.Call(m, "SetCrypto", arg0)
}

// SetCrypto indicates an expected call of SetCrypto
func (mr *MockConfigMockRecorder) SetCrypto(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCrypto", reflect.TypeOf((*MockConfig)(nil).SetCrypto), arg0)
}

// SetCodec mocks base method
func (m *MockConfig) SetCodec(arg0 kbfscodec.Codec) {
	m.ctrl.Call(m, "SetCodec", arg0)
}

// SetCodec indicates an expected call of SetCodec
func (mr *MockConfigMockRecorder) SetCodec(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCodec", reflect.TypeOf((*MockConfig)(nil).SetCodec), arg0)
}

// MDOps mocks base method
func (m *MockConfig) MDOps() MDOps {
	ret := m.ctrl.Call(m, "MDOps")
	ret0, _ := ret[0].(MDOps)
	return ret0
}

// MDOps indicates an expected call of MDOps
func (mr *MockConfigMockRecorder) MDOps() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDOps", reflect.TypeOf((*MockConfig)(nil).MDOps))
}

// SetMDOps mocks base method
func (m *MockConfig) SetMDOps(arg0 MDOps) {
	m.ctrl.Call(m, "SetMDOps", arg0)
}

// SetMDOps indicates an expected call of SetMDOps
func (mr *MockConfigMockRecorder) SetMDOps(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMDOps", reflect.TypeOf((*MockConfig)(nil).SetMDOps), arg0)
}

// KeyOps mocks base method
func (m *MockConfig) KeyOps() KeyOps {
	ret := m.ctrl.Call(m, "KeyOps")
	ret0, _ := ret[0].(KeyOps)
	return ret0
}

// KeyOps indicates an expected call of KeyOps
func (mr *MockConfigMockRecorder) KeyOps() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyOps", reflect.TypeOf((*MockConfig)(nil).KeyOps))
}

// SetKeyOps mocks base method
func (m *MockConfig) SetKeyOps(arg0 KeyOps) {
	m.ctrl.Call(m, "SetKeyOps", arg0)
}

// SetKeyOps indicates an expected call of SetKeyOps
func (mr *MockConfigMockRecorder) SetKeyOps(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeyOps", reflect.TypeOf((*MockConfig)(nil).SetKeyOps), arg0)
}

// BlockOps mocks base method
func (m *MockConfig) BlockOps() BlockOps {
	ret := m.ctrl.Call(m, "BlockOps")
	ret0, _ := ret[0].(BlockOps)
	return ret0
}

// BlockOps indicates an expected call of BlockOps
func (mr *MockConfigMockRecorder) BlockOps() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockOps", reflect.TypeOf((*MockConfig)(nil).BlockOps))
}

// SetBlockOps mocks base method
func (m *MockConfig) SetBlockOps(arg0 BlockOps) {
	m.ctrl.Call(m, "SetBlockOps", arg0)
}

// SetBlockOps indicates an expected call of SetBlockOps
func (mr *MockConfigMockRecorder) SetBlockOps(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlockOps", reflect.TypeOf((*MockConfig)(nil).SetBlockOps), arg0)
}

// MDServer mocks base method
func (m *MockConfig) MDServer() MDServer {
	ret := m.ctrl.Call(m, "MDServer")
	ret0, _ := ret[0].(MDServer)
	return ret0
}

// MDServer indicates an expected call of MDServer
func (mr *MockConfigMockRecorder) MDServer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDServer", reflect.TypeOf((*MockConfig)(nil).MDServer))
}

// SetMDServer mocks base method
func (m *MockConfig) SetMDServer(arg0 MDServer) {
	m.ctrl.Call(m, "SetMDServer", arg0)
}

// SetMDServer indicates an expected call of SetMDServer
func (mr *MockConfigMockRecorder) SetMDServer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMDServer", reflect.TypeOf((*MockConfig)(nil).SetMDServer), arg0)
}

// SetBlockServer mocks base method
func (m *MockConfig) SetBlockServer(arg0 BlockServer) {
	m.ctrl.Call(m, "SetBlockServer", arg0)
}

// SetBlockServer indicates an expected call of SetBlockServer
func (mr *MockConfigMockRecorder) SetBlockServer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlockServer", reflect.TypeOf((*MockConfig)(nil).SetBlockServer), arg0)
}

// KeyServer mocks base method
func (m *MockConfig) KeyServer() KeyServer {
	ret := m.ctrl.Call(m, "KeyServer")
	ret0, _ := ret[0].(KeyServer)
	return ret0
}

// KeyServer indicates an expected call of KeyServer
func (mr *MockConfigMockRecorder) KeyServer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyServer", reflect.TypeOf((*MockConfig)(nil).KeyServer))
}

// SetKeyServer mocks base method
func (m *MockConfig) SetKeyServer(arg0 KeyServer) {
	m.ctrl.Call(m, "SetKeyServer", arg0)
}

// SetKeyServer indicates an expected call of SetKeyServer
func (mr *MockConfigMockRecorder) SetKeyServer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeyServer", reflect.TypeOf((*MockConfig)(nil).SetKeyServer), arg0)
}

// KeybaseService mocks base method
func (m *MockConfig) KeybaseService() KeybaseService {
	ret := m.ctrl.Call(m, "KeybaseService")
	ret0, _ := ret[0].(KeybaseService)
	return ret0
}

// KeybaseService indicates an expected call of KeybaseService
func (mr *MockConfigMockRecorder) KeybaseService() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeybaseService", reflect.TypeOf((*MockConfig)(nil).KeybaseService))
}

// SetKeybaseService mocks base method
func (m *MockConfig) SetKeybaseService(arg0 KeybaseService) {
	m.ctrl.Call(m, "SetKeybaseService", arg0)
}

// SetKeybaseService indicates an expected call of SetKeybaseService
func (mr *MockConfigMockRecorder) SetKeybaseService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeybaseService", reflect.TypeOf((*MockConfig)(nil).SetKeybaseService), arg0)
}

// BlockSplitter mocks base method
func (m *MockConfig) BlockSplitter() BlockSplitter {
	ret := m.ctrl.Call(m, "BlockSplitter")
	ret0, _ := ret[0].(BlockSplitter)
	return ret0
}

// BlockSplitter indicates an expected call of BlockSplitter
func (mr *MockConfigMockRecorder) BlockSplitter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockSplitter", reflect.TypeOf((*MockConfig)(nil).BlockSplitter))
}

// SetBlockSplitter mocks base method
func (m *MockConfig) SetBlockSplitter(arg0 BlockSplitter) {
	m.ctrl.Call(m, "SetBlockSplitter", arg0)
}

// SetBlockSplitter indicates an expected call of SetBlockSplitter
func (mr *MockConfigMockRecorder) SetBlockSplitter(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlockSplitter", reflect.TypeOf((*MockConfig)(nil).SetBlockSplitter), arg0)
}

// Notifier mocks base method
func (m *MockConfig) Notifier() Notifier {
	ret := m.ctrl.Call(m, "Notifier")
	ret0, _ := ret[0].(Notifier)
	return ret0
}

// Notifier indicates an expected call of Notifier
func (mr *MockConfigMockRecorder) Notifier() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notifier", reflect.TypeOf((*MockConfig)(nil).Notifier))
}

// SetNotifier mocks base method
func (m *MockConfig) SetNotifier(arg0 Notifier) {
	m.ctrl.Call(m, "SetNotifier", arg0)
}

// SetNotifier indicates an expected call of SetNotifier
func (mr *MockConfigMockRecorder) SetNotifier(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNotifier", reflect.TypeOf((*MockConfig)(nil).SetNotifier), arg0)
}

// SetClock mocks base method
func (m *MockConfig) SetClock(arg0 Clock) {
	m.ctrl.Call(m, "SetClock", arg0)
}

// SetClock indicates an expected call of SetClock
func (mr *MockConfigMockRecorder) SetClock(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClock", reflect.TypeOf((*MockConfig)(nil).SetClock), arg0)
}

// ConflictRenamer mocks base method
func (m *MockConfig) ConflictRenamer() ConflictRenamer {
	ret := m.ctrl.Call(m, "ConflictRenamer")
	ret0, _ := ret[0].(ConflictRenamer)
	return ret0
}

// ConflictRenamer indicates an expected call of ConflictRenamer
func (mr *MockConfigMockRecorder) ConflictRenamer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConflictRenamer", reflect.TypeOf((*MockConfig)(nil).ConflictRenamer))
}

// SetConflictRenamer mocks base method
func (m *MockConfig) SetConflictRenamer(arg0 ConflictRenamer) {
	m.ctrl.Call(m, "SetConflictRenamer", arg0)
}

// SetConflictRenamer indicates an expected call of SetConflictRenamer
func (mr *MockConfigMockRecorder) SetConflictRenamer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConflictRenamer", reflect.TypeOf((*MockConfig)(nil).SetConflictRenamer), arg0)
}

// MetadataVersion mocks base method
func (m *MockConfig) MetadataVersion() MetadataVer {
	ret := m.ctrl.Call(m, "MetadataVersion")
	ret0, _ := ret[0].(MetadataVer)
	return ret0
}

// MetadataVersion indicates an expected call of MetadataVersion
func (mr *MockConfigMockRecorder) MetadataVersion() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetadataVersion", reflect.TypeOf((*MockConfig)(nil).MetadataVersion))
}

// SetMetadataVersion mocks base method
func (m *MockConfig) SetMetadataVersion(arg0 MetadataVer) {
	m.ctrl.Call(m, "SetMetadataVersion", arg0)
}

// SetMetadataVersion indicates an expected call of SetMetadataVersion
func (mr *MockConfigMockRecorder) SetMetadataVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetadataVersion", reflect.TypeOf((*MockConfig)(nil).SetMetadataVersion), arg0)
}

// RekeyQueue mocks base method
func (m *MockConfig) RekeyQueue() RekeyQueue {
	ret := m.ctrl.Call(m, "RekeyQueue")
	ret0, _ := ret[0].(RekeyQueue)
	return ret0
}

// RekeyQueue indicates an expected call of RekeyQueue
func (mr *MockConfigMockRecorder) RekeyQueue() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RekeyQueue", reflect.TypeOf((*MockConfig)(nil).RekeyQueue))
}

// SetRekeyQueue mocks base method
func (m *MockConfig) SetRekeyQueue(arg0 RekeyQueue) {
	m.ctrl.Call(m, "SetRekeyQueue", arg0)
}

// SetRekeyQueue indicates an expected call of SetRekeyQueue
func (mr *MockConfigMockRecorder) SetRekeyQueue(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRekeyQueue", reflect.TypeOf((*MockConfig)(nil).SetRekeyQueue), arg0)
}

// ReqsBufSize mocks base method
func (m *MockConfig) ReqsBufSize() int {
	ret := m.ctrl.Call(m, "ReqsBufSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// ReqsBufSize indicates an expected call of ReqsBufSize
func (mr *MockConfigMockRecorder) ReqsBufSize() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReqsBufSize", reflect.TypeOf((*MockConfig)(nil).ReqsBufSize))
}

// MaxNameBytes mocks base method
func (m *MockConfig) MaxNameBytes() uint32 {
	ret := m.ctrl.Call(m, "MaxNameBytes")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// MaxNameBytes indicates an expected call of MaxNameBytes
func (mr *MockConfigMockRecorder) MaxNameBytes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxNameBytes", reflect.TypeOf((*MockConfig)(nil).MaxNameBytes))
}

// MaxDirBytes mocks base method
func (m *MockConfig) MaxDirBytes() uint64 {
	ret := m.ctrl.Call(m, "MaxDirBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// MaxDirBytes indicates an expected call of MaxDirBytes
func (mr *MockConfigMockRecorder) MaxDirBytes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxDirBytes", reflect.TypeOf((*MockConfig)(nil).MaxDirBytes))
}

// DoBackgroundFlushes mocks base method
func (m *MockConfig) DoBackgroundFlushes() bool {
	ret := m.ctrl.Call(m, "DoBackgroundFlushes")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DoBackgroundFlushes indicates an expected call of DoBackgroundFlushes
func (mr *MockConfigMockRecorder) DoBackgroundFlushes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoBackgroundFlushes", reflect.TypeOf((*MockConfig)(nil).DoBackgroundFlushes))
}

// SetDoBackgroundFlushes mocks base method
func (m *MockConfig) SetDoBackgroundFlushes(arg0 bool) {
	m.ctrl.Call(m, "SetDoBackgroundFlushes", arg0)
}

// SetDoBackgroundFlushes indicates an expected call of SetDoBackgroundFlushes
func (mr *MockConfigMockRecorder) SetDoBackgroundFlushes(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDoBackgroundFlushes", reflect.TypeOf((*MockConfig)(nil).SetDoBackgroundFlushes), arg0)
}

// RekeyWithPromptWaitTime mocks base method
func (m *MockConfig) RekeyWithPromptWaitTime() time.Duration {
	ret := m.ctrl.Call(m, "RekeyWithPromptWaitTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// RekeyWithPromptWaitTime indicates an expected call of RekeyWithPromptWaitTime
func (mr *MockConfigMockRecorder) RekeyWithPromptWaitTime() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RekeyWithPromptWaitTime", reflect.TypeOf((*MockConfig)(nil).RekeyWithPromptWaitTime))
}

// SetRekeyWithPromptWaitTime mocks base method
func (m *MockConfig) SetRekeyWithPromptWaitTime(arg0 time.Duration) {
	m.ctrl.Call(m, "SetRekeyWithPromptWaitTime", arg0)
}

// SetRekeyWithPromptWaitTime indicates an expected call of SetRekeyWithPromptWaitTime
func (mr *MockConfigMockRecorder) SetRekeyWithPromptWaitTime(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRekeyWithPromptWaitTime", reflect.TypeOf((*MockConfig)(nil).SetRekeyWithPromptWaitTime), arg0)
}

// Mode mocks base method
func (m *MockConfig) Mode() InitMode {
	ret := m.ctrl.Call(m, "Mode")
	ret0, _ := ret[0].(InitMode)
	return ret0
}

// Mode indicates an expected call of Mode
func (mr *MockConfigMockRecorder) Mode() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mode", reflect.TypeOf((*MockConfig)(nil).Mode))
}

// DelayedCancellationGracePeriod mocks base method
func (m *MockConfig) DelayedCancellationGracePeriod() time.Duration {
	ret := m.ctrl.Call(m, "DelayedCancellationGracePeriod")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// DelayedCancellationGracePeriod indicates an expected call of DelayedCancellationGracePeriod
func (mr *MockConfigMockRecorder) DelayedCancellationGracePeriod() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelayedCancellationGracePeriod", reflect.TypeOf((*MockConfig)(nil).DelayedCancellationGracePeriod))
}

// SetDelayedCancellationGracePeriod mocks base method
func (m *MockConfig) SetDelayedCancellationGracePeriod(arg0 time.Duration) {
	m.ctrl.Call(m, "SetDelayedCancellationGracePeriod", arg0)
}

// SetDelayedCancellationGracePeriod indicates an expected call of SetDelayedCancellationGracePeriod
func (mr *MockConfigMockRecorder) SetDelayedCancellationGracePeriod(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDelayedCancellationGracePeriod", reflect.TypeOf((*MockConfig)(nil).SetDelayedCancellationGracePeriod), arg0)
}

// QuotaReclamationPeriod mocks base method
func (m *MockConfig) QuotaReclamationPeriod() time.Duration {
	ret := m.ctrl.Call(m, "QuotaReclamationPeriod")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// QuotaReclamationPeriod indicates an expected call of QuotaReclamationPeriod
func (mr *MockConfigMockRecorder) QuotaReclamationPeriod() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaReclamationPeriod", reflect.TypeOf((*MockConfig)(nil).QuotaReclamationPeriod))
}

// QuotaReclamationMinUnrefAge mocks base method
func (m *MockConfig) QuotaReclamationMinUnrefAge() time.Duration {
	ret := m.ctrl.Call(m, "QuotaReclamationMinUnrefAge")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// QuotaReclamationMinUnrefAge indicates an expected call of QuotaReclamationMinUnrefAge
func (mr *MockConfigMockRecorder) QuotaReclamationMinUnrefAge() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaReclamationMinUnrefAge", reflect.TypeOf((*MockConfig)(nil).QuotaReclamationMinUnrefAge))
}

// QuotaReclamationMinHeadAge mocks base method
func (m *MockConfig) QuotaReclamationMinHeadAge() time.Duration {
	ret := m.ctrl.Call(m, "QuotaReclamationMinHeadAge")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// QuotaReclamationMinHeadAge indicates an expected call of QuotaReclamationMinHeadAge
func (mr *MockConfigMockRecorder) QuotaReclamationMinHeadAge() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaReclamationMinHeadAge", reflect.TypeOf((*MockConfig)(nil).QuotaReclamationMinHeadAge))
}

// ResetCaches mocks base method
func (m *MockConfig) ResetCaches() {
	m.ctrl.Call(m, "ResetCaches")
}

// ResetCaches indicates an expected call of ResetCaches
func (mr *MockConfigMockRecorder) ResetCaches() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCaches", reflect.TypeOf((*MockConfig)(nil).ResetCaches))
}

// StorageRoot mocks base method
func (m *MockConfig) StorageRoot() string {
	ret := m.ctrl.Call(m, "StorageRoot")
	ret0, _ := ret[0].(string)
	return ret0
}

// StorageRoot indicates an expected call of StorageRoot
func (mr *MockConfigMockRecorder) StorageRoot() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageRoot", reflect.TypeOf((*MockConfig)(nil).StorageRoot))
}

// MetricsRegistry mocks base method
func (m *MockConfig) MetricsRegistry() go_metrics.Registry {
	ret := m.ctrl.Call(m, "MetricsRegistry")
	ret0, _ := ret[0].(go_metrics.Registry)
	return ret0
}

// MetricsRegistry indicates an expected call of MetricsRegistry
func (mr *MockConfigMockRecorder) MetricsRegistry() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsRegistry", reflect.TypeOf((*MockConfig)(nil).MetricsRegistry))
}

// SetMetricsRegistry mocks base method
func (m *MockConfig) SetMetricsRegistry(arg0 go_metrics.Registry) {
	m.ctrl.Call(m, "SetMetricsRegistry", arg0)
}

// SetMetricsRegistry indicates an expected call of SetMetricsRegistry
func (mr *MockConfigMockRecorder) SetMetricsRegistry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetricsRegistry", reflect.TypeOf((*MockConfig)(nil).SetMetricsRegistry), arg0)
}

// SetTraceOptions mocks base method
func (m *MockConfig) SetTraceOptions(enabled bool) {
	m.ctrl.Call(m, "SetTraceOptions", enabled)
}

// SetTraceOptions indicates an expected call of SetTraceOptions
func (mr *MockConfigMockRecorder) SetTraceOptions(enabled interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTraceOptions", reflect.TypeOf((*MockConfig)(nil).SetTraceOptions), enabled)
}

// TLFValidDuration mocks base method
func (m *MockConfig) TLFValidDuration() time.Duration {
	ret := m.ctrl.Call(m, "TLFValidDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// TLFValidDuration indicates an expected call of TLFValidDuration
func (mr *MockConfigMockRecorder) TLFValidDuration() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TLFValidDuration", reflect.TypeOf((*MockConfig)(nil).TLFValidDuration))
}

// SetTLFValidDuration mocks base method
func (m *MockConfig) SetTLFValidDuration(arg0 time.Duration) {
	m.ctrl.Call(m, "SetTLFValidDuration", arg0)
}

// SetTLFValidDuration indicates an expected call of SetTLFValidDuration
func (mr *MockConfigMockRecorder) SetTLFValidDuration(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTLFValidDuration", reflect.TypeOf((*MockConfig)(nil).SetTLFValidDuration), arg0)
}

// BGFlushDirOpBatchSize mocks base method
func (m *MockConfig) BGFlushDirOpBatchSize() int {
	ret := m.ctrl.Call(m, "BGFlushDirOpBatchSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// BGFlushDirOpBatchSize indicates an expected call of BGFlushDirOpBatchSize
func (mr *MockConfigMockRecorder) BGFlushDirOpBatchSize() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BGFlushDirOpBatchSize", reflect.TypeOf((*MockConfig)(nil).BGFlushDirOpBatchSize))
}

// SetBGFlushDirOpBatchSize mocks base method
func (m *MockConfig) SetBGFlushDirOpBatchSize(s int) {
	m.ctrl.Call(m, "SetBGFlushDirOpBatchSize", s)
}

// SetBGFlushDirOpBatchSize indicates an expected call of SetBGFlushDirOpBatchSize
func (mr *MockConfigMockRecorder) SetBGFlushDirOpBatchSize(s interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBGFlushDirOpBatchSize", reflect.TypeOf((*MockConfig)(nil).SetBGFlushDirOpBatchSize), s)
}

// BGFlushPeriod mocks base method
func (m *MockConfig) BGFlushPeriod() time.Duration {
	ret := m.ctrl.Call(m, "BGFlushPeriod")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// BGFlushPeriod indicates an expected call of BGFlushPeriod
func (mr *MockConfigMockRecorder) BGFlushPeriod() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BGFlushPeriod", reflect.TypeOf((*MockConfig)(nil).BGFlushPeriod))
}

// SetBGFlushPeriod mocks base method
func (m *MockConfig) SetBGFlushPeriod(p time.Duration) {
	m.ctrl.Call(m, "SetBGFlushPeriod", p)
}

// SetBGFlushPeriod indicates an expected call of SetBGFlushPeriod
func (mr *MockConfigMockRecorder) SetBGFlushPeriod(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBGFlushPeriod", reflect.TypeOf((*MockConfig)(nil).SetBGFlushPeriod), p)
}

// Shutdown mocks base method
func (m *MockConfig) Shutdown(arg0 context.Context) error {
	ret := m.ctrl.Call(m, "Shutdown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockConfigMockRecorder) Shutdown(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockConfig)(nil).Shutdown), arg0)
}

// CheckStateOnShutdown mocks base method
func (m *MockConfig) CheckStateOnShutdown() bool {
	ret := m.ctrl.Call(m, "CheckStateOnShutdown")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckStateOnShutdown indicates an expected call of CheckStateOnShutdown
func (mr *MockConfigMockRecorder) CheckStateOnShutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStateOnShutdown", reflect.TypeOf((*MockConfig)(nil).CheckStateOnShutdown))
}

// GetRekeyFSMLimiter mocks base method
func (m *MockConfig) GetRekeyFSMLimiter() *OngoingWorkLimiter {
	ret := m.ctrl.Call(m, "GetRekeyFSMLimiter")
	ret0, _ := ret[0].(*OngoingWorkLimiter)
	return ret0
}

// GetRekeyFSMLimiter indicates an expected call of GetRekeyFSMLimiter
func (mr *MockConfigMockRecorder) GetRekeyFSMLimiter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRekeyFSMLimiter", reflect.TypeOf((*MockConfig)(nil).GetRekeyFSMLimiter))
}

// MockNodeCache is a mock of NodeCache interface
type MockNodeCache struct {
	ctrl     *gomock.Controller
	recorder *MockNodeCacheMockRecorder
}

// MockNodeCacheMockRecorder is the mock recorder for MockNodeCache
type MockNodeCacheMockRecorder struct {
	mock *MockNodeCache
}

// NewMockNodeCache creates a new mock instance
func NewMockNodeCache(ctrl *gomock.Controller) *MockNodeCache {
	mock := &MockNodeCache{ctrl: ctrl}
	mock.recorder = &MockNodeCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeCache) EXPECT() *MockNodeCacheMockRecorder {
	return m.recorder
}

// GetOrCreate mocks base method
func (m *MockNodeCache) GetOrCreate(ptr BlockPointer, name string, parent Node) (Node, error) {
	ret := m.ctrl.Call(m, "GetOrCreate", ptr, name, parent)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreate indicates an expected call of GetOrCreate
func (mr *MockNodeCacheMockRecorder) GetOrCreate(ptr, name, parent interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreate", reflect.TypeOf((*MockNodeCache)(nil).GetOrCreate), ptr, name, parent)
}

// Get mocks base method
func (m *MockNodeCache) Get(ref BlockRef) Node {
	ret := m.ctrl.Call(m, "Get", ref)
	ret0, _ := ret[0].(Node)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockNodeCacheMockRecorder) Get(ref interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNodeCache)(nil).Get), ref)
}

// UpdatePointer mocks base method
func (m *MockNodeCache) UpdatePointer(oldRef BlockRef, newPtr BlockPointer) bool {
	ret := m.ctrl.Call(m, "UpdatePointer", oldRef, newPtr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdatePointer indicates an expected call of UpdatePointer
func (mr *MockNodeCacheMockRecorder) UpdatePointer(oldRef, newPtr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePointer", reflect.TypeOf((*MockNodeCache)(nil).UpdatePointer), oldRef, newPtr)
}

// Move mocks base method
func (m *MockNodeCache) Move(ref BlockRef, newParent Node, newName string) (func(), error) {
	ret := m.ctrl.Call(m, "Move", ref, newParent, newName)
	ret0, _ := ret[0].(func())
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Move indicates an expected call of Move
func (mr *MockNodeCacheMockRecorder) Move(ref, newParent, newName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockNodeCache)(nil).Move), ref, newParent, newName)
}

// Unlink mocks base method
func (m *MockNodeCache) Unlink(ref BlockRef, oldPath path, oldDe DirEntry) func() {
	ret := m.ctrl.Call(m, "Unlink", ref, oldPath, oldDe)
	ret0, _ := ret[0].(func())
	return ret0
}

// Unlink indicates an expected call of Unlink
func (mr *MockNodeCacheMockRecorder) Unlink(ref, oldPath, oldDe interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlink", reflect.TypeOf((*MockNodeCache)(nil).Unlink), ref, oldPath, oldDe)
}

// IsUnlinked mocks base method
func (m *MockNodeCache) IsUnlinked(node Node) bool {
	ret := m.ctrl.Call(m, "IsUnlinked", node)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUnlinked indicates an expected call of IsUnlinked
func (mr *MockNodeCacheMockRecorder) IsUnlinked(node interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUnlinked", reflect.TypeOf((*MockNodeCache)(nil).IsUnlinked), node)
}

// UnlinkedDirEntry mocks base method
func (m *MockNodeCache) UnlinkedDirEntry(node Node) DirEntry {
	ret := m.ctrl.Call(m, "UnlinkedDirEntry", node)
	ret0, _ := ret[0].(DirEntry)
	return ret0
}

// UnlinkedDirEntry indicates an expected call of UnlinkedDirEntry
func (mr *MockNodeCacheMockRecorder) UnlinkedDirEntry(node interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkedDirEntry", reflect.TypeOf((*MockNodeCache)(nil).UnlinkedDirEntry), node)
}

// PathFromNode mocks base method
func (m *MockNodeCache) PathFromNode(node Node) path {
	ret := m.ctrl.Call(m, "PathFromNode", node)
	ret0, _ := ret[0].(path)
	return ret0
}

// PathFromNode indicates an expected call of PathFromNode
func (mr *MockNodeCacheMockRecorder) PathFromNode(node interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathFromNode", reflect.TypeOf((*MockNodeCache)(nil).PathFromNode), node)
}

// AllNodes mocks base method
func (m *MockNodeCache) AllNodes() []Node {
	ret := m.ctrl.Call(m, "AllNodes")
	ret0, _ := ret[0].([]Node)
	return ret0
}

// AllNodes indicates an expected call of AllNodes
func (mr *MockNodeCacheMockRecorder) AllNodes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllNodes", reflect.TypeOf((*MockNodeCache)(nil).AllNodes))
}

// MockcrAction is a mock of crAction interface
type MockcrAction struct {
	ctrl     *gomock.Controller
	recorder *MockcrActionMockRecorder
}

// MockcrActionMockRecorder is the mock recorder for MockcrAction
type MockcrActionMockRecorder struct {
	mock *MockcrAction
}

// NewMockcrAction creates a new mock instance
func NewMockcrAction(ctrl *gomock.Controller) *MockcrAction {
	mock := &MockcrAction{ctrl: ctrl}
	mock.recorder = &MockcrActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcrAction) EXPECT() *MockcrActionMockRecorder {
	return m.recorder
}

// swapUnmergedBlock mocks base method
func (m *MockcrAction) swapUnmergedBlock(unmergedChains, mergedChains *crChains, unmergedBlock *DirBlock) (bool, BlockPointer, error) {
	ret := m.ctrl.Call(m, "swapUnmergedBlock", unmergedChains, mergedChains, unmergedBlock)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(BlockPointer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// swapUnmergedBlock indicates an expected call of swapUnmergedBlock
func (mr *MockcrActionMockRecorder) swapUnmergedBlock(unmergedChains, mergedChains, unmergedBlock interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "swapUnmergedBlock", reflect.TypeOf((*MockcrAction)(nil).swapUnmergedBlock), unmergedChains, mergedChains, unmergedBlock)
}

// do mocks base method
func (m *MockcrAction) do(ctx context.Context, unmergedCopier, mergedCopier fileBlockDeepCopier, unmergedBlock, mergedBlock *DirBlock) error {
	ret := m.ctrl.Call(m, "do", ctx, unmergedCopier, mergedCopier, unmergedBlock, mergedBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// do indicates an expected call of do
func (mr *MockcrActionMockRecorder) do(ctx, unmergedCopier, mergedCopier, unmergedBlock, mergedBlock interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "do", reflect.TypeOf((*MockcrAction)(nil).do), ctx, unmergedCopier, mergedCopier, unmergedBlock, mergedBlock)
}

// updateOps mocks base method
func (m *MockcrAction) updateOps(unmergedMostRecent, mergedMostRecent BlockPointer, unmergedBlock, mergedBlock *DirBlock, unmergedChains, mergedChains *crChains) error {
	ret := m.ctrl.Call(m, "updateOps", unmergedMostRecent, mergedMostRecent, unmergedBlock, mergedBlock, unmergedChains, mergedChains)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateOps indicates an expected call of updateOps
func (mr *MockcrActionMockRecorder) updateOps(unmergedMostRecent, mergedMostRecent, unmergedBlock, mergedBlock, unmergedChains, mergedChains interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateOps", reflect.TypeOf((*MockcrAction)(nil).updateOps), unmergedMostRecent, mergedMostRecent, unmergedBlock, mergedBlock, unmergedChains, mergedChains)
}

// String mocks base method
func (m *MockcrAction) String() string {
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockcrActionMockRecorder) String() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockcrAction)(nil).String))
}

// MockRekeyQueue is a mock of RekeyQueue interface
type MockRekeyQueue struct {
	ctrl     *gomock.Controller
	recorder *MockRekeyQueueMockRecorder
}

// MockRekeyQueueMockRecorder is the mock recorder for MockRekeyQueue
type MockRekeyQueueMockRecorder struct {
	mock *MockRekeyQueue
}

// NewMockRekeyQueue creates a new mock instance
func NewMockRekeyQueue(ctrl *gomock.Controller) *MockRekeyQueue {
	mock := &MockRekeyQueue{ctrl: ctrl}
	mock.recorder = &MockRekeyQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRekeyQueue) EXPECT() *MockRekeyQueueMockRecorder {
	return m.recorder
}

// Enqueue mocks base method
func (m *MockRekeyQueue) Enqueue(arg0 tlf.ID) {
	m.ctrl.Call(m, "Enqueue", arg0)
}

// Enqueue indicates an expected call of Enqueue
func (mr *MockRekeyQueueMockRecorder) Enqueue(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockRekeyQueue)(nil).Enqueue), arg0)
}

// IsRekeyPending mocks base method
func (m *MockRekeyQueue) IsRekeyPending(arg0 tlf.ID) bool {
	ret := m.ctrl.Call(m, "IsRekeyPending", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRekeyPending indicates an expected call of IsRekeyPending
func (mr *MockRekeyQueueMockRecorder) IsRekeyPending(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRekeyPending", reflect.TypeOf((*MockRekeyQueue)(nil).IsRekeyPending), arg0)
}

// Shutdown mocks base method
func (m *MockRekeyQueue) Shutdown() {
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockRekeyQueueMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockRekeyQueue)(nil).Shutdown))
}

// MockBareRootMetadata is a mock of BareRootMetadata interface
type MockBareRootMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockBareRootMetadataMockRecorder
}

// MockBareRootMetadataMockRecorder is the mock recorder for MockBareRootMetadata
type MockBareRootMetadataMockRecorder struct {
	mock *MockBareRootMetadata
}

// NewMockBareRootMetadata creates a new mock instance
func NewMockBareRootMetadata(ctrl *gomock.Controller) *MockBareRootMetadata {
	mock := &MockBareRootMetadata{ctrl: ctrl}
	mock.recorder = &MockBareRootMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBareRootMetadata) EXPECT() *MockBareRootMetadataMockRecorder {
	return m.recorder
}

// TlfID mocks base method
func (m *MockBareRootMetadata) TlfID() tlf.ID {
	ret := m.ctrl.Call(m, "TlfID")
	ret0, _ := ret[0].(tlf.ID)
	return ret0
}

// TlfID indicates an expected call of TlfID
func (mr *MockBareRootMetadataMockRecorder) TlfID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlfID", reflect.TypeOf((*MockBareRootMetadata)(nil).TlfID))
}

// KeyGenerationsToUpdate mocks base method
func (m *MockBareRootMetadata) KeyGenerationsToUpdate() (KeyGen, KeyGen) {
	ret := m.ctrl.Call(m, "KeyGenerationsToUpdate")
	ret0, _ := ret[0].(KeyGen)
	ret1, _ := ret[1].(KeyGen)
	return ret0, ret1
}

// KeyGenerationsToUpdate indicates an expected call of KeyGenerationsToUpdate
func (mr *MockBareRootMetadataMockRecorder) KeyGenerationsToUpdate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyGenerationsToUpdate", reflect.TypeOf((*MockBareRootMetadata)(nil).KeyGenerationsToUpdate))
}

// LatestKeyGeneration mocks base method
func (m *MockBareRootMetadata) LatestKeyGeneration() KeyGen {
	ret := m.ctrl.Call(m, "LatestKeyGeneration")
	ret0, _ := ret[0].(KeyGen)
	return ret0
}

// LatestKeyGeneration indicates an expected call of LatestKeyGeneration
func (mr *MockBareRootMetadataMockRecorder) LatestKeyGeneration() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestKeyGeneration", reflect.TypeOf((*MockBareRootMetadata)(nil).LatestKeyGeneration))
}

// IsValidRekeyRequest mocks base method
func (m *MockBareRootMetadata) IsValidRekeyRequest(codec kbfscodec.Codec, prevMd BareRootMetadata, user keybase1.UID, prevExtra, extra ExtraMetadata) (bool, error) {
	ret := m.ctrl.Call(m, "IsValidRekeyRequest", codec, prevMd, user, prevExtra, extra)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidRekeyRequest indicates an expected call of IsValidRekeyRequest
func (mr *MockBareRootMetadataMockRecorder) IsValidRekeyRequest(codec, prevMd, user, prevExtra, extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidRekeyRequest", reflect.TypeOf((*MockBareRootMetadata)(nil).IsValidRekeyRequest), codec, prevMd, user, prevExtra, extra)
}

// MergedStatus mocks base method
func (m *MockBareRootMetadata) MergedStatus() MergeStatus {
	ret := m.ctrl.Call(m, "MergedStatus")
	ret0, _ := ret[0].(MergeStatus)
	return ret0
}

// MergedStatus indicates an expected call of MergedStatus
func (mr *MockBareRootMetadataMockRecorder) MergedStatus() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergedStatus", reflect.TypeOf((*MockBareRootMetadata)(nil).MergedStatus))
}

// IsRekeySet mocks base method
func (m *MockBareRootMetadata) IsRekeySet() bool {
	ret := m.ctrl.Call(m, "IsRekeySet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRekeySet indicates an expected call of IsRekeySet
func (mr *MockBareRootMetadataMockRecorder) IsRekeySet() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRekeySet", reflect.TypeOf((*MockBareRootMetadata)(nil).IsRekeySet))
}

// IsWriterMetadataCopiedSet mocks base method
func (m *MockBareRootMetadata) IsWriterMetadataCopiedSet() bool {
	ret := m.ctrl.Call(m, "IsWriterMetadataCopiedSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWriterMetadataCopiedSet indicates an expected call of IsWriterMetadataCopiedSet
func (mr *MockBareRootMetadataMockRecorder) IsWriterMetadataCopiedSet() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWriterMetadataCopiedSet", reflect.TypeOf((*MockBareRootMetadata)(nil).IsWriterMetadataCopiedSet))
}

// IsFinal mocks base method
func (m *MockBareRootMetadata) IsFinal() bool {
	ret := m.ctrl.Call(m, "IsFinal")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFinal indicates an expected call of IsFinal
func (mr *MockBareRootMetadataMockRecorder) IsFinal() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFinal", reflect.TypeOf((*MockBareRootMetadata)(nil).IsFinal))
}

// IsWriter mocks base method
func (m *MockBareRootMetadata) IsWriter(ctx context.Context, user keybase1.UID, cryptKey kbfscrypto.CryptPublicKey, verifyingKey kbfscrypto.VerifyingKey, teamMemChecker TeamMembershipChecker, extra ExtraMetadata) (bool, error) {
	ret := m.ctrl.Call(m, "IsWriter", ctx, user, cryptKey, verifyingKey, teamMemChecker, extra)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsWriter indicates an expected call of IsWriter
func (mr *MockBareRootMetadataMockRecorder) IsWriter(ctx, user, cryptKey, verifyingKey, teamMemChecker, extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWriter", reflect.TypeOf((*MockBareRootMetadata)(nil).IsWriter), ctx, user, cryptKey, verifyingKey, teamMemChecker, extra)
}

// IsReader mocks base method
func (m *MockBareRootMetadata) IsReader(ctx context.Context, user keybase1.UID, cryptKey kbfscrypto.CryptPublicKey, teamMemChecker TeamMembershipChecker, extra ExtraMetadata) (bool, error) {
	ret := m.ctrl.Call(m, "IsReader", ctx, user, cryptKey, teamMemChecker, extra)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReader indicates an expected call of IsReader
func (mr *MockBareRootMetadataMockRecorder) IsReader(ctx, user, cryptKey, teamMemChecker, extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReader", reflect.TypeOf((*MockBareRootMetadata)(nil).IsReader), ctx, user, cryptKey, teamMemChecker, extra)
}

// DeepCopy mocks base method
func (m *MockBareRootMetadata) DeepCopy(codec kbfscodec.Codec) (MutableBareRootMetadata, error) {
	ret := m.ctrl.Call(m, "DeepCopy", codec)
	ret0, _ := ret[0].(MutableBareRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeepCopy indicates an expected call of DeepCopy
func (mr *MockBareRootMetadataMockRecorder) DeepCopy(codec interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeepCopy", reflect.TypeOf((*MockBareRootMetadata)(nil).DeepCopy), codec)
}

// MakeSuccessorCopy mocks base method
func (m *MockBareRootMetadata) MakeSuccessorCopy(codec kbfscodec.Codec, crypto cryptoPure, extra ExtraMetadata, latestMDVer MetadataVer, tlfCryptKeyGetter func() ([]kbfscrypto.TLFCryptKey, error), isReadableAndWriter bool) (MutableBareRootMetadata, ExtraMetadata, error) {
	ret := m.ctrl.Call(m, "MakeSuccessorCopy", codec, crypto, extra, latestMDVer, tlfCryptKeyGetter, isReadableAndWriter)
	ret0, _ := ret[0].(MutableBareRootMetadata)
	ret1, _ := ret[1].(ExtraMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakeSuccessorCopy indicates an expected call of MakeSuccessorCopy
func (mr *MockBareRootMetadataMockRecorder) MakeSuccessorCopy(codec, crypto, extra, latestMDVer, tlfCryptKeyGetter, isReadableAndWriter interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeSuccessorCopy", reflect.TypeOf((*MockBareRootMetadata)(nil).MakeSuccessorCopy), codec, crypto, extra, latestMDVer, tlfCryptKeyGetter, isReadableAndWriter)
}

// CheckValidSuccessor mocks base method
func (m *MockBareRootMetadata) CheckValidSuccessor(currID kbfsmd.ID, nextMd BareRootMetadata) error {
	ret := m.ctrl.Call(m, "CheckValidSuccessor", currID, nextMd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckValidSuccessor indicates an expected call of CheckValidSuccessor
func (mr *MockBareRootMetadataMockRecorder) CheckValidSuccessor(currID, nextMd interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckValidSuccessor", reflect.TypeOf((*MockBareRootMetadata)(nil).CheckValidSuccessor), currID, nextMd)
}

// CheckValidSuccessorForServer mocks base method
func (m *MockBareRootMetadata) CheckValidSuccessorForServer(currID kbfsmd.ID, nextMd BareRootMetadata) error {
	ret := m.ctrl.Call(m, "CheckValidSuccessorForServer", currID, nextMd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckValidSuccessorForServer indicates an expected call of CheckValidSuccessorForServer
func (mr *MockBareRootMetadataMockRecorder) CheckValidSuccessorForServer(currID, nextMd interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckValidSuccessorForServer", reflect.TypeOf((*MockBareRootMetadata)(nil).CheckValidSuccessorForServer), currID, nextMd)
}

// MakeBareTlfHandle mocks base method
func (m *MockBareRootMetadata) MakeBareTlfHandle(extra ExtraMetadata) (tlf.Handle, error) {
	ret := m.ctrl.Call(m, "MakeBareTlfHandle", extra)
	ret0, _ := ret[0].(tlf.Handle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeBareTlfHandle indicates an expected call of MakeBareTlfHandle
func (mr *MockBareRootMetadataMockRecorder) MakeBareTlfHandle(extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBareTlfHandle", reflect.TypeOf((*MockBareRootMetadata)(nil).MakeBareTlfHandle), extra)
}

// TlfHandleExtensions mocks base method
func (m *MockBareRootMetadata) TlfHandleExtensions() []tlf.HandleExtension {
	ret := m.ctrl.Call(m, "TlfHandleExtensions")
	ret0, _ := ret[0].([]tlf.HandleExtension)
	return ret0
}

// TlfHandleExtensions indicates an expected call of TlfHandleExtensions
func (mr *MockBareRootMetadataMockRecorder) TlfHandleExtensions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlfHandleExtensions", reflect.TypeOf((*MockBareRootMetadata)(nil).TlfHandleExtensions))
}

// GetUserDevicePublicKeys mocks base method
func (m *MockBareRootMetadata) GetUserDevicePublicKeys(extra ExtraMetadata) (UserDevicePublicKeys, UserDevicePublicKeys, error) {
	ret := m.ctrl.Call(m, "GetUserDevicePublicKeys", extra)
	ret0, _ := ret[0].(UserDevicePublicKeys)
	ret1, _ := ret[1].(UserDevicePublicKeys)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserDevicePublicKeys indicates an expected call of GetUserDevicePublicKeys
func (mr *MockBareRootMetadataMockRecorder) GetUserDevicePublicKeys(extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDevicePublicKeys", reflect.TypeOf((*MockBareRootMetadata)(nil).GetUserDevicePublicKeys), extra)
}

// GetTLFCryptKeyParams mocks base method
func (m *MockBareRootMetadata) GetTLFCryptKeyParams(keyGen KeyGen, user keybase1.UID, key kbfscrypto.CryptPublicKey, extra ExtraMetadata) (kbfscrypto.TLFEphemeralPublicKey, EncryptedTLFCryptKeyClientHalf, TLFCryptKeyServerHalfID, bool, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKeyParams", keyGen, user, key, extra)
	ret0, _ := ret[0].(kbfscrypto.TLFEphemeralPublicKey)
	ret1, _ := ret[1].(EncryptedTLFCryptKeyClientHalf)
	ret2, _ := ret[2].(TLFCryptKeyServerHalfID)
	ret3, _ := ret[3].(bool)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetTLFCryptKeyParams indicates an expected call of GetTLFCryptKeyParams
func (mr *MockBareRootMetadataMockRecorder) GetTLFCryptKeyParams(keyGen, user, key, extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKeyParams", reflect.TypeOf((*MockBareRootMetadata)(nil).GetTLFCryptKeyParams), keyGen, user, key, extra)
}

// IsValidAndSigned mocks base method
func (m *MockBareRootMetadata) IsValidAndSigned(ctx context.Context, codec kbfscodec.Codec, crypto cryptoPure, teamMemChecker TeamMembershipChecker, extra ExtraMetadata, writerVerifyingKey kbfscrypto.VerifyingKey) error {
	ret := m.ctrl.Call(m, "IsValidAndSigned", ctx, codec, crypto, teamMemChecker, extra, writerVerifyingKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsValidAndSigned indicates an expected call of IsValidAndSigned
func (mr *MockBareRootMetadataMockRecorder) IsValidAndSigned(ctx, codec, crypto, teamMemChecker, extra, writerVerifyingKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidAndSigned", reflect.TypeOf((*MockBareRootMetadata)(nil).IsValidAndSigned), ctx, codec, crypto, teamMemChecker, extra, writerVerifyingKey)
}

// IsLastModifiedBy mocks base method
func (m *MockBareRootMetadata) IsLastModifiedBy(uid keybase1.UID, key kbfscrypto.VerifyingKey) error {
	ret := m.ctrl.Call(m, "IsLastModifiedBy", uid, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsLastModifiedBy indicates an expected call of IsLastModifiedBy
func (mr *MockBareRootMetadataMockRecorder) IsLastModifiedBy(uid, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLastModifiedBy", reflect.TypeOf((*MockBareRootMetadata)(nil).IsLastModifiedBy), uid, key)
}

// LastModifyingWriter mocks base method
func (m *MockBareRootMetadata) LastModifyingWriter() keybase1.UID {
	ret := m.ctrl.Call(m, "LastModifyingWriter")
	ret0, _ := ret[0].(keybase1.UID)
	return ret0
}

// LastModifyingWriter indicates an expected call of LastModifyingWriter
func (mr *MockBareRootMetadataMockRecorder) LastModifyingWriter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastModifyingWriter", reflect.TypeOf((*MockBareRootMetadata)(nil).LastModifyingWriter))
}

// GetLastModifyingUser mocks base method
func (m *MockBareRootMetadata) GetLastModifyingUser() keybase1.UID {
	ret := m.ctrl.Call(m, "GetLastModifyingUser")
	ret0, _ := ret[0].(keybase1.UID)
	return ret0
}

// GetLastModifyingUser indicates an expected call of GetLastModifyingUser
func (mr *MockBareRootMetadataMockRecorder) GetLastModifyingUser() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastModifyingUser", reflect.TypeOf((*MockBareRootMetadata)(nil).GetLastModifyingUser))
}

// RefBytes mocks base method
func (m *MockBareRootMetadata) RefBytes() uint64 {
	ret := m.ctrl.Call(m, "RefBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// RefBytes indicates an expected call of RefBytes
func (mr *MockBareRootMetadataMockRecorder) RefBytes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefBytes", reflect.TypeOf((*MockBareRootMetadata)(nil).RefBytes))
}

// UnrefBytes mocks base method
func (m *MockBareRootMetadata) UnrefBytes() uint64 {
	ret := m.ctrl.Call(m, "UnrefBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// UnrefBytes indicates an expected call of UnrefBytes
func (mr *MockBareRootMetadataMockRecorder) UnrefBytes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnrefBytes", reflect.TypeOf((*MockBareRootMetadata)(nil).UnrefBytes))
}

// MDRefBytes mocks base method
func (m *MockBareRootMetadata) MDRefBytes() uint64 {
	ret := m.ctrl.Call(m, "MDRefBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// MDRefBytes indicates an expected call of MDRefBytes
func (mr *MockBareRootMetadataMockRecorder) MDRefBytes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDRefBytes", reflect.TypeOf((*MockBareRootMetadata)(nil).MDRefBytes))
}

// DiskUsage mocks base method
func (m *MockBareRootMetadata) DiskUsage() uint64 {
	ret := m.ctrl.Call(m, "DiskUsage")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// DiskUsage indicates an expected call of DiskUsage
func (mr *MockBareRootMetadataMockRecorder) DiskUsage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskUsage", reflect.TypeOf((*MockBareRootMetadata)(nil).DiskUsage))
}

// MDDiskUsage mocks base method
func (m *MockBareRootMetadata) MDDiskUsage() uint64 {
	ret := m.ctrl.Call(m, "MDDiskUsage")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// MDDiskUsage indicates an expected call of MDDiskUsage
func (mr *MockBareRootMetadataMockRecorder) MDDiskUsage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDDiskUsage", reflect.TypeOf((*MockBareRootMetadata)(nil).MDDiskUsage))
}

// RevisionNumber mocks base method
func (m *MockBareRootMetadata) RevisionNumber() kbfsmd.Revision {
	ret := m.ctrl.Call(m, "RevisionNumber")
	ret0, _ := ret[0].(kbfsmd.Revision)
	return ret0
}

// RevisionNumber indicates an expected call of RevisionNumber
func (mr *MockBareRootMetadataMockRecorder) RevisionNumber() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevisionNumber", reflect.TypeOf((*MockBareRootMetadata)(nil).RevisionNumber))
}

// MerkleRoot mocks base method
func (m *MockBareRootMetadata) MerkleRoot() keybase1.MerkleRootV2 {
	ret := m.ctrl.Call(m, "MerkleRoot")
	ret0, _ := ret[0].(keybase1.MerkleRootV2)
	return ret0
}

// MerkleRoot indicates an expected call of MerkleRoot
func (mr *MockBareRootMetadataMockRecorder) MerkleRoot() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerkleRoot", reflect.TypeOf((*MockBareRootMetadata)(nil).MerkleRoot))
}

// BID mocks base method
func (m *MockBareRootMetadata) BID() BranchID {
	ret := m.ctrl.Call(m, "BID")
	ret0, _ := ret[0].(BranchID)
	return ret0
}

// BID indicates an expected call of BID
func (mr *MockBareRootMetadataMockRecorder) BID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BID", reflect.TypeOf((*MockBareRootMetadata)(nil).BID))
}

// GetPrevRoot mocks base method
func (m *MockBareRootMetadata) GetPrevRoot() kbfsmd.ID {
	ret := m.ctrl.Call(m, "GetPrevRoot")
	ret0, _ := ret[0].(kbfsmd.ID)
	return ret0
}

// GetPrevRoot indicates an expected call of GetPrevRoot
func (mr *MockBareRootMetadataMockRecorder) GetPrevRoot() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrevRoot", reflect.TypeOf((*MockBareRootMetadata)(nil).GetPrevRoot))
}

// IsUnmergedSet mocks base method
func (m *MockBareRootMetadata) IsUnmergedSet() bool {
	ret := m.ctrl.Call(m, "IsUnmergedSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUnmergedSet indicates an expected call of IsUnmergedSet
func (mr *MockBareRootMetadataMockRecorder) IsUnmergedSet() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUnmergedSet", reflect.TypeOf((*MockBareRootMetadata)(nil).IsUnmergedSet))
}

// GetSerializedPrivateMetadata mocks base method
func (m *MockBareRootMetadata) GetSerializedPrivateMetadata() []byte {
	ret := m.ctrl.Call(m, "GetSerializedPrivateMetadata")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetSerializedPrivateMetadata indicates an expected call of GetSerializedPrivateMetadata
func (mr *MockBareRootMetadataMockRecorder) GetSerializedPrivateMetadata() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSerializedPrivateMetadata", reflect.TypeOf((*MockBareRootMetadata)(nil).GetSerializedPrivateMetadata))
}

// GetSerializedWriterMetadata mocks base method
func (m *MockBareRootMetadata) GetSerializedWriterMetadata(codec kbfscodec.Codec) ([]byte, error) {
	ret := m.ctrl.Call(m, "GetSerializedWriterMetadata", codec)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSerializedWriterMetadata indicates an expected call of GetSerializedWriterMetadata
func (mr *MockBareRootMetadataMockRecorder) GetSerializedWriterMetadata(codec interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSerializedWriterMetadata", reflect.TypeOf((*MockBareRootMetadata)(nil).GetSerializedWriterMetadata), codec)
}

// Version mocks base method
func (m *MockBareRootMetadata) Version() MetadataVer {
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(MetadataVer)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockBareRootMetadataMockRecorder) Version() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockBareRootMetadata)(nil).Version))
}

// GetCurrentTLFPublicKey mocks base method
func (m *MockBareRootMetadata) GetCurrentTLFPublicKey(arg0 ExtraMetadata) (kbfscrypto.TLFPublicKey, error) {
	ret := m.ctrl.Call(m, "GetCurrentTLFPublicKey", arg0)
	ret0, _ := ret[0].(kbfscrypto.TLFPublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentTLFPublicKey indicates an expected call of GetCurrentTLFPublicKey
func (mr *MockBareRootMetadataMockRecorder) GetCurrentTLFPublicKey(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentTLFPublicKey", reflect.TypeOf((*MockBareRootMetadata)(nil).GetCurrentTLFPublicKey), arg0)
}

// GetUnresolvedParticipants mocks base method
func (m *MockBareRootMetadata) GetUnresolvedParticipants() []keybase1.SocialAssertion {
	ret := m.ctrl.Call(m, "GetUnresolvedParticipants")
	ret0, _ := ret[0].([]keybase1.SocialAssertion)
	return ret0
}

// GetUnresolvedParticipants indicates an expected call of GetUnresolvedParticipants
func (mr *MockBareRootMetadataMockRecorder) GetUnresolvedParticipants() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnresolvedParticipants", reflect.TypeOf((*MockBareRootMetadata)(nil).GetUnresolvedParticipants))
}

// GetTLFWriterKeyBundleID mocks base method
func (m *MockBareRootMetadata) GetTLFWriterKeyBundleID() TLFWriterKeyBundleID {
	ret := m.ctrl.Call(m, "GetTLFWriterKeyBundleID")
	ret0, _ := ret[0].(TLFWriterKeyBundleID)
	return ret0
}

// GetTLFWriterKeyBundleID indicates an expected call of GetTLFWriterKeyBundleID
func (mr *MockBareRootMetadataMockRecorder) GetTLFWriterKeyBundleID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFWriterKeyBundleID", reflect.TypeOf((*MockBareRootMetadata)(nil).GetTLFWriterKeyBundleID))
}

// GetTLFReaderKeyBundleID mocks base method
func (m *MockBareRootMetadata) GetTLFReaderKeyBundleID() TLFReaderKeyBundleID {
	ret := m.ctrl.Call(m, "GetTLFReaderKeyBundleID")
	ret0, _ := ret[0].(TLFReaderKeyBundleID)
	return ret0
}

// GetTLFReaderKeyBundleID indicates an expected call of GetTLFReaderKeyBundleID
func (mr *MockBareRootMetadataMockRecorder) GetTLFReaderKeyBundleID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFReaderKeyBundleID", reflect.TypeOf((*MockBareRootMetadata)(nil).GetTLFReaderKeyBundleID))
}

// StoresHistoricTLFCryptKeys mocks base method
func (m *MockBareRootMetadata) StoresHistoricTLFCryptKeys() bool {
	ret := m.ctrl.Call(m, "StoresHistoricTLFCryptKeys")
	ret0, _ := ret[0].(bool)
	return ret0
}

// StoresHistoricTLFCryptKeys indicates an expected call of StoresHistoricTLFCryptKeys
func (mr *MockBareRootMetadataMockRecorder) StoresHistoricTLFCryptKeys() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoresHistoricTLFCryptKeys", reflect.TypeOf((*MockBareRootMetadata)(nil).StoresHistoricTLFCryptKeys))
}

// GetHistoricTLFCryptKey mocks base method
func (m *MockBareRootMetadata) GetHistoricTLFCryptKey(c cryptoPure, keyGen KeyGen, currentKey kbfscrypto.TLFCryptKey, extra ExtraMetadata) (kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "GetHistoricTLFCryptKey", c, keyGen, currentKey, extra)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoricTLFCryptKey indicates an expected call of GetHistoricTLFCryptKey
func (mr *MockBareRootMetadataMockRecorder) GetHistoricTLFCryptKey(c, keyGen, currentKey, extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoricTLFCryptKey", reflect.TypeOf((*MockBareRootMetadata)(nil).GetHistoricTLFCryptKey), c, keyGen, currentKey, extra)
}

// MockMutableBareRootMetadata is a mock of MutableBareRootMetadata interface
type MockMutableBareRootMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockMutableBareRootMetadataMockRecorder
}

// MockMutableBareRootMetadataMockRecorder is the mock recorder for MockMutableBareRootMetadata
type MockMutableBareRootMetadataMockRecorder struct {
	mock *MockMutableBareRootMetadata
}

// NewMockMutableBareRootMetadata creates a new mock instance
func NewMockMutableBareRootMetadata(ctrl *gomock.Controller) *MockMutableBareRootMetadata {
	mock := &MockMutableBareRootMetadata{ctrl: ctrl}
	mock.recorder = &MockMutableBareRootMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMutableBareRootMetadata) EXPECT() *MockMutableBareRootMetadataMockRecorder {
	return m.recorder
}

// TlfID mocks base method
func (m *MockMutableBareRootMetadata) TlfID() tlf.ID {
	ret := m.ctrl.Call(m, "TlfID")
	ret0, _ := ret[0].(tlf.ID)
	return ret0
}

// TlfID indicates an expected call of TlfID
func (mr *MockMutableBareRootMetadataMockRecorder) TlfID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlfID", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).TlfID))
}

// KeyGenerationsToUpdate mocks base method
func (m *MockMutableBareRootMetadata) KeyGenerationsToUpdate() (KeyGen, KeyGen) {
	ret := m.ctrl.Call(m, "KeyGenerationsToUpdate")
	ret0, _ := ret[0].(KeyGen)
	ret1, _ := ret[1].(KeyGen)
	return ret0, ret1
}

// KeyGenerationsToUpdate indicates an expected call of KeyGenerationsToUpdate
func (mr *MockMutableBareRootMetadataMockRecorder) KeyGenerationsToUpdate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyGenerationsToUpdate", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).KeyGenerationsToUpdate))
}

// LatestKeyGeneration mocks base method
func (m *MockMutableBareRootMetadata) LatestKeyGeneration() KeyGen {
	ret := m.ctrl.Call(m, "LatestKeyGeneration")
	ret0, _ := ret[0].(KeyGen)
	return ret0
}

// LatestKeyGeneration indicates an expected call of LatestKeyGeneration
func (mr *MockMutableBareRootMetadataMockRecorder) LatestKeyGeneration() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestKeyGeneration", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).LatestKeyGeneration))
}

// IsValidRekeyRequest mocks base method
func (m *MockMutableBareRootMetadata) IsValidRekeyRequest(codec kbfscodec.Codec, prevMd BareRootMetadata, user keybase1.UID, prevExtra, extra ExtraMetadata) (bool, error) {
	ret := m.ctrl.Call(m, "IsValidRekeyRequest", codec, prevMd, user, prevExtra, extra)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidRekeyRequest indicates an expected call of IsValidRekeyRequest
func (mr *MockMutableBareRootMetadataMockRecorder) IsValidRekeyRequest(codec, prevMd, user, prevExtra, extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidRekeyRequest", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).IsValidRekeyRequest), codec, prevMd, user, prevExtra, extra)
}

// MergedStatus mocks base method
func (m *MockMutableBareRootMetadata) MergedStatus() MergeStatus {
	ret := m.ctrl.Call(m, "MergedStatus")
	ret0, _ := ret[0].(MergeStatus)
	return ret0
}

// MergedStatus indicates an expected call of MergedStatus
func (mr *MockMutableBareRootMetadataMockRecorder) MergedStatus() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergedStatus", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).MergedStatus))
}

// IsRekeySet mocks base method
func (m *MockMutableBareRootMetadata) IsRekeySet() bool {
	ret := m.ctrl.Call(m, "IsRekeySet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRekeySet indicates an expected call of IsRekeySet
func (mr *MockMutableBareRootMetadataMockRecorder) IsRekeySet() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRekeySet", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).IsRekeySet))
}

// IsWriterMetadataCopiedSet mocks base method
func (m *MockMutableBareRootMetadata) IsWriterMetadataCopiedSet() bool {
	ret := m.ctrl.Call(m, "IsWriterMetadataCopiedSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWriterMetadataCopiedSet indicates an expected call of IsWriterMetadataCopiedSet
func (mr *MockMutableBareRootMetadataMockRecorder) IsWriterMetadataCopiedSet() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWriterMetadataCopiedSet", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).IsWriterMetadataCopiedSet))
}

// IsFinal mocks base method
func (m *MockMutableBareRootMetadata) IsFinal() bool {
	ret := m.ctrl.Call(m, "IsFinal")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFinal indicates an expected call of IsFinal
func (mr *MockMutableBareRootMetadataMockRecorder) IsFinal() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFinal", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).IsFinal))
}

// IsWriter mocks base method
func (m *MockMutableBareRootMetadata) IsWriter(ctx context.Context, user keybase1.UID, cryptKey kbfscrypto.CryptPublicKey, verifyingKey kbfscrypto.VerifyingKey, teamMemChecker TeamMembershipChecker, extra ExtraMetadata) (bool, error) {
	ret := m.ctrl.Call(m, "IsWriter", ctx, user, cryptKey, verifyingKey, teamMemChecker, extra)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsWriter indicates an expected call of IsWriter
func (mr *MockMutableBareRootMetadataMockRecorder) IsWriter(ctx, user, cryptKey, verifyingKey, teamMemChecker, extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWriter", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).IsWriter), ctx, user, cryptKey, verifyingKey, teamMemChecker, extra)
}

// IsReader mocks base method
func (m *MockMutableBareRootMetadata) IsReader(ctx context.Context, user keybase1.UID, cryptKey kbfscrypto.CryptPublicKey, teamMemChecker TeamMembershipChecker, extra ExtraMetadata) (bool, error) {
	ret := m.ctrl.Call(m, "IsReader", ctx, user, cryptKey, teamMemChecker, extra)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReader indicates an expected call of IsReader
func (mr *MockMutableBareRootMetadataMockRecorder) IsReader(ctx, user, cryptKey, teamMemChecker, extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReader", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).IsReader), ctx, user, cryptKey, teamMemChecker, extra)
}

// DeepCopy mocks base method
func (m *MockMutableBareRootMetadata) DeepCopy(codec kbfscodec.Codec) (MutableBareRootMetadata, error) {
	ret := m.ctrl.Call(m, "DeepCopy", codec)
	ret0, _ := ret[0].(MutableBareRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeepCopy indicates an expected call of DeepCopy
func (mr *MockMutableBareRootMetadataMockRecorder) DeepCopy(codec interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeepCopy", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).DeepCopy), codec)
}

// MakeSuccessorCopy mocks base method
func (m *MockMutableBareRootMetadata) MakeSuccessorCopy(codec kbfscodec.Codec, crypto cryptoPure, extra ExtraMetadata, latestMDVer MetadataVer, tlfCryptKeyGetter func() ([]kbfscrypto.TLFCryptKey, error), isReadableAndWriter bool) (MutableBareRootMetadata, ExtraMetadata, error) {
	ret := m.ctrl.Call(m, "MakeSuccessorCopy", codec, crypto, extra, latestMDVer, tlfCryptKeyGetter, isReadableAndWriter)
	ret0, _ := ret[0].(MutableBareRootMetadata)
	ret1, _ := ret[1].(ExtraMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakeSuccessorCopy indicates an expected call of MakeSuccessorCopy
func (mr *MockMutableBareRootMetadataMockRecorder) MakeSuccessorCopy(codec, crypto, extra, latestMDVer, tlfCryptKeyGetter, isReadableAndWriter interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeSuccessorCopy", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).MakeSuccessorCopy), codec, crypto, extra, latestMDVer, tlfCryptKeyGetter, isReadableAndWriter)
}

// CheckValidSuccessor mocks base method
func (m *MockMutableBareRootMetadata) CheckValidSuccessor(currID kbfsmd.ID, nextMd BareRootMetadata) error {
	ret := m.ctrl.Call(m, "CheckValidSuccessor", currID, nextMd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckValidSuccessor indicates an expected call of CheckValidSuccessor
func (mr *MockMutableBareRootMetadataMockRecorder) CheckValidSuccessor(currID, nextMd interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckValidSuccessor", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).CheckValidSuccessor), currID, nextMd)
}

// CheckValidSuccessorForServer mocks base method
func (m *MockMutableBareRootMetadata) CheckValidSuccessorForServer(currID kbfsmd.ID, nextMd BareRootMetadata) error {
	ret := m.ctrl.Call(m, "CheckValidSuccessorForServer", currID, nextMd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckValidSuccessorForServer indicates an expected call of CheckValidSuccessorForServer
func (mr *MockMutableBareRootMetadataMockRecorder) CheckValidSuccessorForServer(currID, nextMd interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckValidSuccessorForServer", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).CheckValidSuccessorForServer), currID, nextMd)
}

// MakeBareTlfHandle mocks base method
func (m *MockMutableBareRootMetadata) MakeBareTlfHandle(extra ExtraMetadata) (tlf.Handle, error) {
	ret := m.ctrl.Call(m, "MakeBareTlfHandle", extra)
	ret0, _ := ret[0].(tlf.Handle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeBareTlfHandle indicates an expected call of MakeBareTlfHandle
func (mr *MockMutableBareRootMetadataMockRecorder) MakeBareTlfHandle(extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBareTlfHandle", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).MakeBareTlfHandle), extra)
}

// TlfHandleExtensions mocks base method
func (m *MockMutableBareRootMetadata) TlfHandleExtensions() []tlf.HandleExtension {
	ret := m.ctrl.Call(m, "TlfHandleExtensions")
	ret0, _ := ret[0].([]tlf.HandleExtension)
	return ret0
}

// TlfHandleExtensions indicates an expected call of TlfHandleExtensions
func (mr *MockMutableBareRootMetadataMockRecorder) TlfHandleExtensions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlfHandleExtensions", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).TlfHandleExtensions))
}

// GetUserDevicePublicKeys mocks base method
func (m *MockMutableBareRootMetadata) GetUserDevicePublicKeys(extra ExtraMetadata) (UserDevicePublicKeys, UserDevicePublicKeys, error) {
	ret := m.ctrl.Call(m, "GetUserDevicePublicKeys", extra)
	ret0, _ := ret[0].(UserDevicePublicKeys)
	ret1, _ := ret[1].(UserDevicePublicKeys)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserDevicePublicKeys indicates an expected call of GetUserDevicePublicKeys
func (mr *MockMutableBareRootMetadataMockRecorder) GetUserDevicePublicKeys(extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDevicePublicKeys", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).GetUserDevicePublicKeys), extra)
}

// GetTLFCryptKeyParams mocks base method
func (m *MockMutableBareRootMetadata) GetTLFCryptKeyParams(keyGen KeyGen, user keybase1.UID, key kbfscrypto.CryptPublicKey, extra ExtraMetadata) (kbfscrypto.TLFEphemeralPublicKey, EncryptedTLFCryptKeyClientHalf, TLFCryptKeyServerHalfID, bool, error) {
	ret := m.ctrl.Call(m, "GetTLFCryptKeyParams", keyGen, user, key, extra)
	ret0, _ := ret[0].(kbfscrypto.TLFEphemeralPublicKey)
	ret1, _ := ret[1].(EncryptedTLFCryptKeyClientHalf)
	ret2, _ := ret[2].(TLFCryptKeyServerHalfID)
	ret3, _ := ret[3].(bool)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetTLFCryptKeyParams indicates an expected call of GetTLFCryptKeyParams
func (mr *MockMutableBareRootMetadataMockRecorder) GetTLFCryptKeyParams(keyGen, user, key, extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFCryptKeyParams", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).GetTLFCryptKeyParams), keyGen, user, key, extra)
}

// IsValidAndSigned mocks base method
func (m *MockMutableBareRootMetadata) IsValidAndSigned(ctx context.Context, codec kbfscodec.Codec, crypto cryptoPure, teamMemChecker TeamMembershipChecker, extra ExtraMetadata, writerVerifyingKey kbfscrypto.VerifyingKey) error {
	ret := m.ctrl.Call(m, "IsValidAndSigned", ctx, codec, crypto, teamMemChecker, extra, writerVerifyingKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsValidAndSigned indicates an expected call of IsValidAndSigned
func (mr *MockMutableBareRootMetadataMockRecorder) IsValidAndSigned(ctx, codec, crypto, teamMemChecker, extra, writerVerifyingKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidAndSigned", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).IsValidAndSigned), ctx, codec, crypto, teamMemChecker, extra, writerVerifyingKey)
}

// IsLastModifiedBy mocks base method
func (m *MockMutableBareRootMetadata) IsLastModifiedBy(uid keybase1.UID, key kbfscrypto.VerifyingKey) error {
	ret := m.ctrl.Call(m, "IsLastModifiedBy", uid, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsLastModifiedBy indicates an expected call of IsLastModifiedBy
func (mr *MockMutableBareRootMetadataMockRecorder) IsLastModifiedBy(uid, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLastModifiedBy", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).IsLastModifiedBy), uid, key)
}

// LastModifyingWriter mocks base method
func (m *MockMutableBareRootMetadata) LastModifyingWriter() keybase1.UID {
	ret := m.ctrl.Call(m, "LastModifyingWriter")
	ret0, _ := ret[0].(keybase1.UID)
	return ret0
}

// LastModifyingWriter indicates an expected call of LastModifyingWriter
func (mr *MockMutableBareRootMetadataMockRecorder) LastModifyingWriter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastModifyingWriter", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).LastModifyingWriter))
}

// GetLastModifyingUser mocks base method
func (m *MockMutableBareRootMetadata) GetLastModifyingUser() keybase1.UID {
	ret := m.ctrl.Call(m, "GetLastModifyingUser")
	ret0, _ := ret[0].(keybase1.UID)
	return ret0
}

// GetLastModifyingUser indicates an expected call of GetLastModifyingUser
func (mr *MockMutableBareRootMetadataMockRecorder) GetLastModifyingUser() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastModifyingUser", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).GetLastModifyingUser))
}

// RefBytes mocks base method
func (m *MockMutableBareRootMetadata) RefBytes() uint64 {
	ret := m.ctrl.Call(m, "RefBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// RefBytes indicates an expected call of RefBytes
func (mr *MockMutableBareRootMetadataMockRecorder) RefBytes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefBytes", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).RefBytes))
}

// UnrefBytes mocks base method
func (m *MockMutableBareRootMetadata) UnrefBytes() uint64 {
	ret := m.ctrl.Call(m, "UnrefBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// UnrefBytes indicates an expected call of UnrefBytes
func (mr *MockMutableBareRootMetadataMockRecorder) UnrefBytes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnrefBytes", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).UnrefBytes))
}

// MDRefBytes mocks base method
func (m *MockMutableBareRootMetadata) MDRefBytes() uint64 {
	ret := m.ctrl.Call(m, "MDRefBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// MDRefBytes indicates an expected call of MDRefBytes
func (mr *MockMutableBareRootMetadataMockRecorder) MDRefBytes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDRefBytes", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).MDRefBytes))
}

// DiskUsage mocks base method
func (m *MockMutableBareRootMetadata) DiskUsage() uint64 {
	ret := m.ctrl.Call(m, "DiskUsage")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// DiskUsage indicates an expected call of DiskUsage
func (mr *MockMutableBareRootMetadataMockRecorder) DiskUsage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskUsage", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).DiskUsage))
}

// MDDiskUsage mocks base method
func (m *MockMutableBareRootMetadata) MDDiskUsage() uint64 {
	ret := m.ctrl.Call(m, "MDDiskUsage")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// MDDiskUsage indicates an expected call of MDDiskUsage
func (mr *MockMutableBareRootMetadataMockRecorder) MDDiskUsage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDDiskUsage", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).MDDiskUsage))
}

// RevisionNumber mocks base method
func (m *MockMutableBareRootMetadata) RevisionNumber() kbfsmd.Revision {
	ret := m.ctrl.Call(m, "RevisionNumber")
	ret0, _ := ret[0].(kbfsmd.Revision)
	return ret0
}

// RevisionNumber indicates an expected call of RevisionNumber
func (mr *MockMutableBareRootMetadataMockRecorder) RevisionNumber() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevisionNumber", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).RevisionNumber))
}

// MerkleRoot mocks base method
func (m *MockMutableBareRootMetadata) MerkleRoot() keybase1.MerkleRootV2 {
	ret := m.ctrl.Call(m, "MerkleRoot")
	ret0, _ := ret[0].(keybase1.MerkleRootV2)
	return ret0
}

// MerkleRoot indicates an expected call of MerkleRoot
func (mr *MockMutableBareRootMetadataMockRecorder) MerkleRoot() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerkleRoot", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).MerkleRoot))
}

// BID mocks base method
func (m *MockMutableBareRootMetadata) BID() BranchID {
	ret := m.ctrl.Call(m, "BID")
	ret0, _ := ret[0].(BranchID)
	return ret0
}

// BID indicates an expected call of BID
func (mr *MockMutableBareRootMetadataMockRecorder) BID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BID", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).BID))
}

// GetPrevRoot mocks base method
func (m *MockMutableBareRootMetadata) GetPrevRoot() kbfsmd.ID {
	ret := m.ctrl.Call(m, "GetPrevRoot")
	ret0, _ := ret[0].(kbfsmd.ID)
	return ret0
}

// GetPrevRoot indicates an expected call of GetPrevRoot
func (mr *MockMutableBareRootMetadataMockRecorder) GetPrevRoot() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrevRoot", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).GetPrevRoot))
}

// IsUnmergedSet mocks base method
func (m *MockMutableBareRootMetadata) IsUnmergedSet() bool {
	ret := m.ctrl.Call(m, "IsUnmergedSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUnmergedSet indicates an expected call of IsUnmergedSet
func (mr *MockMutableBareRootMetadataMockRecorder) IsUnmergedSet() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUnmergedSet", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).IsUnmergedSet))
}

// GetSerializedPrivateMetadata mocks base method
func (m *MockMutableBareRootMetadata) GetSerializedPrivateMetadata() []byte {
	ret := m.ctrl.Call(m, "GetSerializedPrivateMetadata")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetSerializedPrivateMetadata indicates an expected call of GetSerializedPrivateMetadata
func (mr *MockMutableBareRootMetadataMockRecorder) GetSerializedPrivateMetadata() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSerializedPrivateMetadata", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).GetSerializedPrivateMetadata))
}

// GetSerializedWriterMetadata mocks base method
func (m *MockMutableBareRootMetadata) GetSerializedWriterMetadata(codec kbfscodec.Codec) ([]byte, error) {
	ret := m.ctrl.Call(m, "GetSerializedWriterMetadata", codec)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSerializedWriterMetadata indicates an expected call of GetSerializedWriterMetadata
func (mr *MockMutableBareRootMetadataMockRecorder) GetSerializedWriterMetadata(codec interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSerializedWriterMetadata", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).GetSerializedWriterMetadata), codec)
}

// Version mocks base method
func (m *MockMutableBareRootMetadata) Version() MetadataVer {
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(MetadataVer)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockMutableBareRootMetadataMockRecorder) Version() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).Version))
}

// GetCurrentTLFPublicKey mocks base method
func (m *MockMutableBareRootMetadata) GetCurrentTLFPublicKey(arg0 ExtraMetadata) (kbfscrypto.TLFPublicKey, error) {
	ret := m.ctrl.Call(m, "GetCurrentTLFPublicKey", arg0)
	ret0, _ := ret[0].(kbfscrypto.TLFPublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentTLFPublicKey indicates an expected call of GetCurrentTLFPublicKey
func (mr *MockMutableBareRootMetadataMockRecorder) GetCurrentTLFPublicKey(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentTLFPublicKey", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).GetCurrentTLFPublicKey), arg0)
}

// GetUnresolvedParticipants mocks base method
func (m *MockMutableBareRootMetadata) GetUnresolvedParticipants() []keybase1.SocialAssertion {
	ret := m.ctrl.Call(m, "GetUnresolvedParticipants")
	ret0, _ := ret[0].([]keybase1.SocialAssertion)
	return ret0
}

// GetUnresolvedParticipants indicates an expected call of GetUnresolvedParticipants
func (mr *MockMutableBareRootMetadataMockRecorder) GetUnresolvedParticipants() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnresolvedParticipants", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).GetUnresolvedParticipants))
}

// GetTLFWriterKeyBundleID mocks base method
func (m *MockMutableBareRootMetadata) GetTLFWriterKeyBundleID() TLFWriterKeyBundleID {
	ret := m.ctrl.Call(m, "GetTLFWriterKeyBundleID")
	ret0, _ := ret[0].(TLFWriterKeyBundleID)
	return ret0
}

// GetTLFWriterKeyBundleID indicates an expected call of GetTLFWriterKeyBundleID
func (mr *MockMutableBareRootMetadataMockRecorder) GetTLFWriterKeyBundleID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFWriterKeyBundleID", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).GetTLFWriterKeyBundleID))
}

// GetTLFReaderKeyBundleID mocks base method
func (m *MockMutableBareRootMetadata) GetTLFReaderKeyBundleID() TLFReaderKeyBundleID {
	ret := m.ctrl.Call(m, "GetTLFReaderKeyBundleID")
	ret0, _ := ret[0].(TLFReaderKeyBundleID)
	return ret0
}

// GetTLFReaderKeyBundleID indicates an expected call of GetTLFReaderKeyBundleID
func (mr *MockMutableBareRootMetadataMockRecorder) GetTLFReaderKeyBundleID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFReaderKeyBundleID", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).GetTLFReaderKeyBundleID))
}

// StoresHistoricTLFCryptKeys mocks base method
func (m *MockMutableBareRootMetadata) StoresHistoricTLFCryptKeys() bool {
	ret := m.ctrl.Call(m, "StoresHistoricTLFCryptKeys")
	ret0, _ := ret[0].(bool)
	return ret0
}

// StoresHistoricTLFCryptKeys indicates an expected call of StoresHistoricTLFCryptKeys
func (mr *MockMutableBareRootMetadataMockRecorder) StoresHistoricTLFCryptKeys() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoresHistoricTLFCryptKeys", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).StoresHistoricTLFCryptKeys))
}

// GetHistoricTLFCryptKey mocks base method
func (m *MockMutableBareRootMetadata) GetHistoricTLFCryptKey(c cryptoPure, keyGen KeyGen, currentKey kbfscrypto.TLFCryptKey, extra ExtraMetadata) (kbfscrypto.TLFCryptKey, error) {
	ret := m.ctrl.Call(m, "GetHistoricTLFCryptKey", c, keyGen, currentKey, extra)
	ret0, _ := ret[0].(kbfscrypto.TLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoricTLFCryptKey indicates an expected call of GetHistoricTLFCryptKey
func (mr *MockMutableBareRootMetadataMockRecorder) GetHistoricTLFCryptKey(c, keyGen, currentKey, extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoricTLFCryptKey", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).GetHistoricTLFCryptKey), c, keyGen, currentKey, extra)
}

// SetRefBytes mocks base method
func (m *MockMutableBareRootMetadata) SetRefBytes(refBytes uint64) {
	m.ctrl.Call(m, "SetRefBytes", refBytes)
}

// SetRefBytes indicates an expected call of SetRefBytes
func (mr *MockMutableBareRootMetadataMockRecorder) SetRefBytes(refBytes interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefBytes", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetRefBytes), refBytes)
}

// SetUnrefBytes mocks base method
func (m *MockMutableBareRootMetadata) SetUnrefBytes(unrefBytes uint64) {
	m.ctrl.Call(m, "SetUnrefBytes", unrefBytes)
}

// SetUnrefBytes indicates an expected call of SetUnrefBytes
func (mr *MockMutableBareRootMetadataMockRecorder) SetUnrefBytes(unrefBytes interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnrefBytes", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetUnrefBytes), unrefBytes)
}

// SetMDRefBytes mocks base method
func (m *MockMutableBareRootMetadata) SetMDRefBytes(mdRefBytes uint64) {
	m.ctrl.Call(m, "SetMDRefBytes", mdRefBytes)
}

// SetMDRefBytes indicates an expected call of SetMDRefBytes
func (mr *MockMutableBareRootMetadataMockRecorder) SetMDRefBytes(mdRefBytes interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMDRefBytes", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetMDRefBytes), mdRefBytes)
}

// SetDiskUsage mocks base method
func (m *MockMutableBareRootMetadata) SetDiskUsage(diskUsage uint64) {
	m.ctrl.Call(m, "SetDiskUsage", diskUsage)
}

// SetDiskUsage indicates an expected call of SetDiskUsage
func (mr *MockMutableBareRootMetadataMockRecorder) SetDiskUsage(diskUsage interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDiskUsage", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetDiskUsage), diskUsage)
}

// SetMDDiskUsage mocks base method
func (m *MockMutableBareRootMetadata) SetMDDiskUsage(mdDiskUsage uint64) {
	m.ctrl.Call(m, "SetMDDiskUsage", mdDiskUsage)
}

// SetMDDiskUsage indicates an expected call of SetMDDiskUsage
func (mr *MockMutableBareRootMetadataMockRecorder) SetMDDiskUsage(mdDiskUsage interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMDDiskUsage", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetMDDiskUsage), mdDiskUsage)
}

// AddRefBytes mocks base method
func (m *MockMutableBareRootMetadata) AddRefBytes(refBytes uint64) {
	m.ctrl.Call(m, "AddRefBytes", refBytes)
}

// AddRefBytes indicates an expected call of AddRefBytes
func (mr *MockMutableBareRootMetadataMockRecorder) AddRefBytes(refBytes interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRefBytes", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).AddRefBytes), refBytes)
}

// AddUnrefBytes mocks base method
func (m *MockMutableBareRootMetadata) AddUnrefBytes(unrefBytes uint64) {
	m.ctrl.Call(m, "AddUnrefBytes", unrefBytes)
}

// AddUnrefBytes indicates an expected call of AddUnrefBytes
func (mr *MockMutableBareRootMetadataMockRecorder) AddUnrefBytes(unrefBytes interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUnrefBytes", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).AddUnrefBytes), unrefBytes)
}

// AddMDRefBytes mocks base method
func (m *MockMutableBareRootMetadata) AddMDRefBytes(mdRefBytes uint64) {
	m.ctrl.Call(m, "AddMDRefBytes", mdRefBytes)
}

// AddMDRefBytes indicates an expected call of AddMDRefBytes
func (mr *MockMutableBareRootMetadataMockRecorder) AddMDRefBytes(mdRefBytes interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMDRefBytes", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).AddMDRefBytes), mdRefBytes)
}

// AddDiskUsage mocks base method
func (m *MockMutableBareRootMetadata) AddDiskUsage(diskUsage uint64) {
	m.ctrl.Call(m, "AddDiskUsage", diskUsage)
}

// AddDiskUsage indicates an expected call of AddDiskUsage
func (mr *MockMutableBareRootMetadataMockRecorder) AddDiskUsage(diskUsage interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDiskUsage", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).AddDiskUsage), diskUsage)
}

// AddMDDiskUsage mocks base method
func (m *MockMutableBareRootMetadata) AddMDDiskUsage(mdDiskUsage uint64) {
	m.ctrl.Call(m, "AddMDDiskUsage", mdDiskUsage)
}

// AddMDDiskUsage indicates an expected call of AddMDDiskUsage
func (mr *MockMutableBareRootMetadataMockRecorder) AddMDDiskUsage(mdDiskUsage interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMDDiskUsage", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).AddMDDiskUsage), mdDiskUsage)
}

// ClearRekeyBit mocks base method
func (m *MockMutableBareRootMetadata) ClearRekeyBit() {
	m.ctrl.Call(m, "ClearRekeyBit")
}

// ClearRekeyBit indicates an expected call of ClearRekeyBit
func (mr *MockMutableBareRootMetadataMockRecorder) ClearRekeyBit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRekeyBit", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).ClearRekeyBit))
}

// ClearWriterMetadataCopiedBit mocks base method
func (m *MockMutableBareRootMetadata) ClearWriterMetadataCopiedBit() {
	m.ctrl.Call(m, "ClearWriterMetadataCopiedBit")
}

// ClearWriterMetadataCopiedBit indicates an expected call of ClearWriterMetadataCopiedBit
func (mr *MockMutableBareRootMetadataMockRecorder) ClearWriterMetadataCopiedBit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearWriterMetadataCopiedBit", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).ClearWriterMetadataCopiedBit))
}

// ClearFinalBit mocks base method
func (m *MockMutableBareRootMetadata) ClearFinalBit() {
	m.ctrl.Call(m, "ClearFinalBit")
}

// ClearFinalBit indicates an expected call of ClearFinalBit
func (mr *MockMutableBareRootMetadataMockRecorder) ClearFinalBit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearFinalBit", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).ClearFinalBit))
}

// SetUnmerged mocks base method
func (m *MockMutableBareRootMetadata) SetUnmerged() {
	m.ctrl.Call(m, "SetUnmerged")
}

// SetUnmerged indicates an expected call of SetUnmerged
func (mr *MockMutableBareRootMetadataMockRecorder) SetUnmerged() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnmerged", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetUnmerged))
}

// SetBranchID mocks base method
func (m *MockMutableBareRootMetadata) SetBranchID(bid BranchID) {
	m.ctrl.Call(m, "SetBranchID", bid)
}

// SetBranchID indicates an expected call of SetBranchID
func (mr *MockMutableBareRootMetadataMockRecorder) SetBranchID(bid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBranchID", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetBranchID), bid)
}

// SetPrevRoot mocks base method
func (m *MockMutableBareRootMetadata) SetPrevRoot(mdID kbfsmd.ID) {
	m.ctrl.Call(m, "SetPrevRoot", mdID)
}

// SetPrevRoot indicates an expected call of SetPrevRoot
func (mr *MockMutableBareRootMetadataMockRecorder) SetPrevRoot(mdID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrevRoot", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetPrevRoot), mdID)
}

// SetSerializedPrivateMetadata mocks base method
func (m *MockMutableBareRootMetadata) SetSerializedPrivateMetadata(spmd []byte) {
	m.ctrl.Call(m, "SetSerializedPrivateMetadata", spmd)
}

// SetSerializedPrivateMetadata indicates an expected call of SetSerializedPrivateMetadata
func (mr *MockMutableBareRootMetadataMockRecorder) SetSerializedPrivateMetadata(spmd interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSerializedPrivateMetadata", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetSerializedPrivateMetadata), spmd)
}

// SignWriterMetadataInternally mocks base method
func (m *MockMutableBareRootMetadata) SignWriterMetadataInternally(ctx context.Context, codec kbfscodec.Codec, signer kbfscrypto.Signer) error {
	ret := m.ctrl.Call(m, "SignWriterMetadataInternally", ctx, codec, signer)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignWriterMetadataInternally indicates an expected call of SignWriterMetadataInternally
func (mr *MockMutableBareRootMetadataMockRecorder) SignWriterMetadataInternally(ctx, codec, signer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignWriterMetadataInternally", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SignWriterMetadataInternally), ctx, codec, signer)
}

// SetLastModifyingWriter mocks base method
func (m *MockMutableBareRootMetadata) SetLastModifyingWriter(user keybase1.UID) {
	m.ctrl.Call(m, "SetLastModifyingWriter", user)
}

// SetLastModifyingWriter indicates an expected call of SetLastModifyingWriter
func (mr *MockMutableBareRootMetadataMockRecorder) SetLastModifyingWriter(user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastModifyingWriter", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetLastModifyingWriter), user)
}

// SetLastModifyingUser mocks base method
func (m *MockMutableBareRootMetadata) SetLastModifyingUser(user keybase1.UID) {
	m.ctrl.Call(m, "SetLastModifyingUser", user)
}

// SetLastModifyingUser indicates an expected call of SetLastModifyingUser
func (mr *MockMutableBareRootMetadataMockRecorder) SetLastModifyingUser(user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastModifyingUser", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetLastModifyingUser), user)
}

// SetRekeyBit mocks base method
func (m *MockMutableBareRootMetadata) SetRekeyBit() {
	m.ctrl.Call(m, "SetRekeyBit")
}

// SetRekeyBit indicates an expected call of SetRekeyBit
func (mr *MockMutableBareRootMetadataMockRecorder) SetRekeyBit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRekeyBit", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetRekeyBit))
}

// SetFinalBit mocks base method
func (m *MockMutableBareRootMetadata) SetFinalBit() {
	m.ctrl.Call(m, "SetFinalBit")
}

// SetFinalBit indicates an expected call of SetFinalBit
func (mr *MockMutableBareRootMetadataMockRecorder) SetFinalBit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalBit", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetFinalBit))
}

// SetWriterMetadataCopiedBit mocks base method
func (m *MockMutableBareRootMetadata) SetWriterMetadataCopiedBit() {
	m.ctrl.Call(m, "SetWriterMetadataCopiedBit")
}

// SetWriterMetadataCopiedBit indicates an expected call of SetWriterMetadataCopiedBit
func (mr *MockMutableBareRootMetadataMockRecorder) SetWriterMetadataCopiedBit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriterMetadataCopiedBit", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetWriterMetadataCopiedBit))
}

// SetRevision mocks base method
func (m *MockMutableBareRootMetadata) SetRevision(revision kbfsmd.Revision) {
	m.ctrl.Call(m, "SetRevision", revision)
}

// SetRevision indicates an expected call of SetRevision
func (mr *MockMutableBareRootMetadataMockRecorder) SetRevision(revision interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRevision", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetRevision), revision)
}

// SetMerkleRoot mocks base method
func (m *MockMutableBareRootMetadata) SetMerkleRoot(root keybase1.MerkleRootV2) {
	m.ctrl.Call(m, "SetMerkleRoot", root)
}

// SetMerkleRoot indicates an expected call of SetMerkleRoot
func (mr *MockMutableBareRootMetadataMockRecorder) SetMerkleRoot(root interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMerkleRoot", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetMerkleRoot), root)
}

// SetUnresolvedReaders mocks base method
func (m *MockMutableBareRootMetadata) SetUnresolvedReaders(readers []keybase1.SocialAssertion) {
	m.ctrl.Call(m, "SetUnresolvedReaders", readers)
}

// SetUnresolvedReaders indicates an expected call of SetUnresolvedReaders
func (mr *MockMutableBareRootMetadataMockRecorder) SetUnresolvedReaders(readers interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnresolvedReaders", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetUnresolvedReaders), readers)
}

// SetUnresolvedWriters mocks base method
func (m *MockMutableBareRootMetadata) SetUnresolvedWriters(writers []keybase1.SocialAssertion) {
	m.ctrl.Call(m, "SetUnresolvedWriters", writers)
}

// SetUnresolvedWriters indicates an expected call of SetUnresolvedWriters
func (mr *MockMutableBareRootMetadataMockRecorder) SetUnresolvedWriters(writers interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnresolvedWriters", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetUnresolvedWriters), writers)
}

// SetConflictInfo mocks base method
func (m *MockMutableBareRootMetadata) SetConflictInfo(ci *tlf.HandleExtension) {
	m.ctrl.Call(m, "SetConflictInfo", ci)
}

// SetConflictInfo indicates an expected call of SetConflictInfo
func (mr *MockMutableBareRootMetadataMockRecorder) SetConflictInfo(ci interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConflictInfo", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetConflictInfo), ci)
}

// SetFinalizedInfo mocks base method
func (m *MockMutableBareRootMetadata) SetFinalizedInfo(fi *tlf.HandleExtension) {
	m.ctrl.Call(m, "SetFinalizedInfo", fi)
}

// SetFinalizedInfo indicates an expected call of SetFinalizedInfo
func (mr *MockMutableBareRootMetadataMockRecorder) SetFinalizedInfo(fi interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalizedInfo", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetFinalizedInfo), fi)
}

// SetWriters mocks base method
func (m *MockMutableBareRootMetadata) SetWriters(writers []keybase1.UserOrTeamID) {
	m.ctrl.Call(m, "SetWriters", writers)
}

// SetWriters indicates an expected call of SetWriters
func (mr *MockMutableBareRootMetadataMockRecorder) SetWriters(writers interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriters", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetWriters), writers)
}

// SetTlfID mocks base method
func (m *MockMutableBareRootMetadata) SetTlfID(tlf tlf.ID) {
	m.ctrl.Call(m, "SetTlfID", tlf)
}

// SetTlfID indicates an expected call of SetTlfID
func (mr *MockMutableBareRootMetadataMockRecorder) SetTlfID(tlf interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTlfID", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetTlfID), tlf)
}

// AddKeyGeneration mocks base method
func (m *MockMutableBareRootMetadata) AddKeyGeneration(codec kbfscodec.Codec, crypto cryptoPure, currExtra ExtraMetadata, updatedWriterKeys, updatedReaderKeys UserDevicePublicKeys, ePubKey kbfscrypto.TLFEphemeralPublicKey, ePrivKey kbfscrypto.TLFEphemeralPrivateKey, pubKey kbfscrypto.TLFPublicKey, currCryptKey, nextCryptKey kbfscrypto.TLFCryptKey) (ExtraMetadata, UserDeviceKeyServerHalves, error) {
	ret := m.ctrl.Call(m, "AddKeyGeneration", codec, crypto, currExtra, updatedWriterKeys, updatedReaderKeys, ePubKey, ePrivKey, pubKey, currCryptKey, nextCryptKey)
	ret0, _ := ret[0].(ExtraMetadata)
	ret1, _ := ret[1].(UserDeviceKeyServerHalves)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddKeyGeneration indicates an expected call of AddKeyGeneration
func (mr *MockMutableBareRootMetadataMockRecorder) AddKeyGeneration(codec, crypto, currExtra, updatedWriterKeys, updatedReaderKeys, ePubKey, ePrivKey, pubKey, currCryptKey, nextCryptKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKeyGeneration", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).AddKeyGeneration), codec, crypto, currExtra, updatedWriterKeys, updatedReaderKeys, ePubKey, ePrivKey, pubKey, currCryptKey, nextCryptKey)
}

// SetLatestKeyGenerationForTeamTLF mocks base method
func (m *MockMutableBareRootMetadata) SetLatestKeyGenerationForTeamTLF(keyGen KeyGen) {
	m.ctrl.Call(m, "SetLatestKeyGenerationForTeamTLF", keyGen)
}

// SetLatestKeyGenerationForTeamTLF indicates an expected call of SetLatestKeyGenerationForTeamTLF
func (mr *MockMutableBareRootMetadataMockRecorder) SetLatestKeyGenerationForTeamTLF(keyGen interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLatestKeyGenerationForTeamTLF", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).SetLatestKeyGenerationForTeamTLF), keyGen)
}

// UpdateKeyBundles mocks base method
func (m *MockMutableBareRootMetadata) UpdateKeyBundles(crypto cryptoPure, extra ExtraMetadata, updatedWriterKeys, updatedReaderKeys UserDevicePublicKeys, ePubKey kbfscrypto.TLFEphemeralPublicKey, ePrivKey kbfscrypto.TLFEphemeralPrivateKey, tlfCryptKeys []kbfscrypto.TLFCryptKey) ([]UserDeviceKeyServerHalves, error) {
	ret := m.ctrl.Call(m, "UpdateKeyBundles", crypto, extra, updatedWriterKeys, updatedReaderKeys, ePubKey, ePrivKey, tlfCryptKeys)
	ret0, _ := ret[0].([]UserDeviceKeyServerHalves)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKeyBundles indicates an expected call of UpdateKeyBundles
func (mr *MockMutableBareRootMetadataMockRecorder) UpdateKeyBundles(crypto, extra, updatedWriterKeys, updatedReaderKeys, ePubKey, ePrivKey, tlfCryptKeys interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyBundles", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).UpdateKeyBundles), crypto, extra, updatedWriterKeys, updatedReaderKeys, ePubKey, ePrivKey, tlfCryptKeys)
}

// PromoteReaders mocks base method
func (m *MockMutableBareRootMetadata) PromoteReaders(readersToPromote map[keybase1.UID]bool, extra ExtraMetadata) error {
	ret := m.ctrl.Call(m, "PromoteReaders", readersToPromote, extra)
	ret0, _ := ret[0].(error)
	return ret0
}

// PromoteReaders indicates an expected call of PromoteReaders
func (mr *MockMutableBareRootMetadataMockRecorder) PromoteReaders(readersToPromote, extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteReaders", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).PromoteReaders), readersToPromote, extra)
}

// RevokeRemovedDevices mocks base method
func (m *MockMutableBareRootMetadata) RevokeRemovedDevices(updatedWriterKeys, updatedReaderKeys UserDevicePublicKeys, extra ExtraMetadata) (ServerHalfRemovalInfo, error) {
	ret := m.ctrl.Call(m, "RevokeRemovedDevices", updatedWriterKeys, updatedReaderKeys, extra)
	ret0, _ := ret[0].(ServerHalfRemovalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeRemovedDevices indicates an expected call of RevokeRemovedDevices
func (mr *MockMutableBareRootMetadataMockRecorder) RevokeRemovedDevices(updatedWriterKeys, updatedReaderKeys, extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRemovedDevices", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).RevokeRemovedDevices), updatedWriterKeys, updatedReaderKeys, extra)
}

// FinalizeRekey mocks base method
func (m *MockMutableBareRootMetadata) FinalizeRekey(c cryptoPure, extra ExtraMetadata) error {
	ret := m.ctrl.Call(m, "FinalizeRekey", c, extra)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeRekey indicates an expected call of FinalizeRekey
func (mr *MockMutableBareRootMetadataMockRecorder) FinalizeRekey(c, extra interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeRekey", reflect.TypeOf((*MockMutableBareRootMetadata)(nil).FinalizeRekey), c, extra)
}

// MockKeyBundleCache is a mock of KeyBundleCache interface
type MockKeyBundleCache struct {
	ctrl     *gomock.Controller
	recorder *MockKeyBundleCacheMockRecorder
}

// MockKeyBundleCacheMockRecorder is the mock recorder for MockKeyBundleCache
type MockKeyBundleCacheMockRecorder struct {
	mock *MockKeyBundleCache
}

// NewMockKeyBundleCache creates a new mock instance
func NewMockKeyBundleCache(ctrl *gomock.Controller) *MockKeyBundleCache {
	mock := &MockKeyBundleCache{ctrl: ctrl}
	mock.recorder = &MockKeyBundleCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyBundleCache) EXPECT() *MockKeyBundleCacheMockRecorder {
	return m.recorder
}

// GetTLFReaderKeyBundle mocks base method
func (m *MockKeyBundleCache) GetTLFReaderKeyBundle(arg0 TLFReaderKeyBundleID) (*TLFReaderKeyBundleV3, error) {
	ret := m.ctrl.Call(m, "GetTLFReaderKeyBundle", arg0)
	ret0, _ := ret[0].(*TLFReaderKeyBundleV3)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLFReaderKeyBundle indicates an expected call of GetTLFReaderKeyBundle
func (mr *MockKeyBundleCacheMockRecorder) GetTLFReaderKeyBundle(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFReaderKeyBundle", reflect.TypeOf((*MockKeyBundleCache)(nil).GetTLFReaderKeyBundle), arg0)
}

// GetTLFWriterKeyBundle mocks base method
func (m *MockKeyBundleCache) GetTLFWriterKeyBundle(arg0 TLFWriterKeyBundleID) (*TLFWriterKeyBundleV3, error) {
	ret := m.ctrl.Call(m, "GetTLFWriterKeyBundle", arg0)
	ret0, _ := ret[0].(*TLFWriterKeyBundleV3)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLFWriterKeyBundle indicates an expected call of GetTLFWriterKeyBundle
func (mr *MockKeyBundleCacheMockRecorder) GetTLFWriterKeyBundle(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLFWriterKeyBundle", reflect.TypeOf((*MockKeyBundleCache)(nil).GetTLFWriterKeyBundle), arg0)
}

// PutTLFReaderKeyBundle mocks base method
func (m *MockKeyBundleCache) PutTLFReaderKeyBundle(arg0 TLFReaderKeyBundleID, arg1 TLFReaderKeyBundleV3) {
	m.ctrl.Call(m, "PutTLFReaderKeyBundle", arg0, arg1)
}

// PutTLFReaderKeyBundle indicates an expected call of PutTLFReaderKeyBundle
func (mr *MockKeyBundleCacheMockRecorder) PutTLFReaderKeyBundle(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTLFReaderKeyBundle", reflect.TypeOf((*MockKeyBundleCache)(nil).PutTLFReaderKeyBundle), arg0, arg1)
}

// PutTLFWriterKeyBundle mocks base method
func (m *MockKeyBundleCache) PutTLFWriterKeyBundle(arg0 TLFWriterKeyBundleID, arg1 TLFWriterKeyBundleV3) {
	m.ctrl.Call(m, "PutTLFWriterKeyBundle", arg0, arg1)
}

// PutTLFWriterKeyBundle indicates an expected call of PutTLFWriterKeyBundle
func (mr *MockKeyBundleCacheMockRecorder) PutTLFWriterKeyBundle(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTLFWriterKeyBundle", reflect.TypeOf((*MockKeyBundleCache)(nil).PutTLFWriterKeyBundle), arg0, arg1)
}

// MockRekeyFSM is a mock of RekeyFSM interface
type MockRekeyFSM struct {
	ctrl     *gomock.Controller
	recorder *MockRekeyFSMMockRecorder
}

// MockRekeyFSMMockRecorder is the mock recorder for MockRekeyFSM
type MockRekeyFSMMockRecorder struct {
	mock *MockRekeyFSM
}

// NewMockRekeyFSM creates a new mock instance
func NewMockRekeyFSM(ctrl *gomock.Controller) *MockRekeyFSM {
	mock := &MockRekeyFSM{ctrl: ctrl}
	mock.recorder = &MockRekeyFSMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRekeyFSM) EXPECT() *MockRekeyFSMMockRecorder {
	return m.recorder
}

// Event mocks base method
func (m *MockRekeyFSM) Event(event RekeyEvent) {
	m.ctrl.Call(m, "Event", event)
}

// Event indicates an expected call of Event
func (mr *MockRekeyFSMMockRecorder) Event(event interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockRekeyFSM)(nil).Event), event)
}

// Shutdown mocks base method
func (m *MockRekeyFSM) Shutdown() {
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockRekeyFSMMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockRekeyFSM)(nil).Shutdown))
}

// listenOnEvent mocks base method
func (m *MockRekeyFSM) listenOnEvent(event rekeyEventType, callback func(RekeyEvent), repeatedly bool) {
	m.ctrl.Call(m, "listenOnEvent", event, callback, repeatedly)
}

// listenOnEvent indicates an expected call of listenOnEvent
func (mr *MockRekeyFSMMockRecorder) listenOnEvent(event, callback, repeatedly interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listenOnEvent", reflect.TypeOf((*MockRekeyFSM)(nil).listenOnEvent), event, callback, repeatedly)
}

// MockBlockRetriever is a mock of BlockRetriever interface
type MockBlockRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockBlockRetrieverMockRecorder
}

// MockBlockRetrieverMockRecorder is the mock recorder for MockBlockRetriever
type MockBlockRetrieverMockRecorder struct {
	mock *MockBlockRetriever
}

// NewMockBlockRetriever creates a new mock instance
func NewMockBlockRetriever(ctrl *gomock.Controller) *MockBlockRetriever {
	mock := &MockBlockRetriever{ctrl: ctrl}
	mock.recorder = &MockBlockRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockRetriever) EXPECT() *MockBlockRetrieverMockRecorder {
	return m.recorder
}

// Request mocks base method
func (m *MockBlockRetriever) Request(ctx context.Context, priority int, kmd KeyMetadata, ptr BlockPointer, block Block, lifetime BlockCacheLifetime) <-chan error {
	ret := m.ctrl.Call(m, "Request", ctx, priority, kmd, ptr, block, lifetime)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Request indicates an expected call of Request
func (mr *MockBlockRetrieverMockRecorder) Request(ctx, priority, kmd, ptr, block, lifetime interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockBlockRetriever)(nil).Request), ctx, priority, kmd, ptr, block, lifetime)
}

// CacheAndPrefetch mocks base method
func (m *MockBlockRetriever) CacheAndPrefetch(ctx context.Context, ptr BlockPointer, block Block, kmd KeyMetadata, priority int, lifetime BlockCacheLifetime, triggeredPrefetch bool) error {
	ret := m.ctrl.Call(m, "CacheAndPrefetch", ctx, ptr, block, kmd, priority, lifetime, triggeredPrefetch)
	ret0, _ := ret[0].(error)
	return ret0
}

// CacheAndPrefetch indicates an expected call of CacheAndPrefetch
func (mr *MockBlockRetrieverMockRecorder) CacheAndPrefetch(ctx, ptr, block, kmd, priority, lifetime, triggeredPrefetch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheAndPrefetch", reflect.TypeOf((*MockBlockRetriever)(nil).CacheAndPrefetch), ctx, ptr, block, kmd, priority, lifetime, triggeredPrefetch)
}
