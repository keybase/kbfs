// Auto-generated by avdl-compiler v1.3.20 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/notify_git.avdl

package keybase1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type RepoChangedArg struct {
	Folder         Folder `codec:"folder" json:"folder"`
	TeamID         TeamID `codec:"teamID" json:"teamID"`
	RepoID         RepoID `codec:"repoID" json:"repoID"`
	GlobalUniqueID string `codec:"globalUniqueID" json:"globalUniqueID"`
}

func (o RepoChangedArg) DeepCopy() RepoChangedArg {
	return RepoChangedArg{
		Folder:         o.Folder.DeepCopy(),
		TeamID:         o.TeamID.DeepCopy(),
		RepoID:         o.RepoID.DeepCopy(),
		GlobalUniqueID: o.GlobalUniqueID,
	}
}

type RepoDeletedArg struct {
	Folder         Folder `codec:"folder" json:"folder"`
	TeamID         TeamID `codec:"teamID" json:"teamID"`
	RepoID         RepoID `codec:"repoID" json:"repoID"`
	GlobalUniqueID string `codec:"globalUniqueID" json:"globalUniqueID"`
}

func (o RepoDeletedArg) DeepCopy() RepoDeletedArg {
	return RepoDeletedArg{
		Folder:         o.Folder.DeepCopy(),
		TeamID:         o.TeamID.DeepCopy(),
		RepoID:         o.RepoID.DeepCopy(),
		GlobalUniqueID: o.GlobalUniqueID,
	}
}

type NotifyGitInterface interface {
	RepoChanged(context.Context, RepoChangedArg) error
	RepoDeleted(context.Context, RepoDeletedArg) error
}

func NotifyGitProtocol(i NotifyGitInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.NotifyGit",
		Methods: map[string]rpc.ServeHandlerDescription{
			"repoChanged": {
				MakeArg: func() interface{} {
					ret := make([]RepoChangedArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]RepoChangedArg)
					if !ok {
						err = rpc.NewTypeError((*[]RepoChangedArg)(nil), args)
						return
					}
					err = i.RepoChanged(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodNotify,
			},
			"repoDeleted": {
				MakeArg: func() interface{} {
					ret := make([]RepoDeletedArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]RepoDeletedArg)
					if !ok {
						err = rpc.NewTypeError((*[]RepoDeletedArg)(nil), args)
						return
					}
					err = i.RepoDeleted(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodNotify,
			},
		},
	}
}

type NotifyGitClient struct {
	Cli rpc.GenericClient
}

func (c NotifyGitClient) RepoChanged(ctx context.Context, __arg RepoChangedArg) (err error) {
	err = c.Cli.Notify(ctx, "keybase.1.NotifyGit.repoChanged", []interface{}{__arg})
	return
}

func (c NotifyGitClient) RepoDeleted(ctx context.Context, __arg RepoDeletedArg) (err error) {
	err = c.Cli.Notify(ctx, "keybase.1.NotifyGit.repoDeleted", []interface{}{__arg})
	return
}
